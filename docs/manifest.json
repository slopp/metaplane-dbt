{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.0", "generated_at": "2022-08-26T19:15:46.773037Z", "invocation_id": "ad8d1f64-3577-4ae3-9604-b43fd064d711", "env": {}, "project_id": "e2fc020b2d2d92d6861128c9c5c77f71", "user_id": "278a2fb2-550d-4079-9b4c-abf9fad3c53a", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.hubspot_source.stg_hubspot__engagement_task": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_task_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_task_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__engagement_task_tmp')),\n                staging_columns=get_engagement_task_columns()\n            )\n        }}\n    from base\n\n/*\nSome users have experienced the `completion_date` field being synced as a string rather than a timestamp.\nTo address this, we use the below run_query command to query a sinlge record from the engagement_task tmp table\nand then assess in a conditional within the fields cte if the engagement_task field is indeed a UTC timestamp or not.\n\nIf the field is not a timestamp, then we safe_cast so downstream models do not fail. Otherwise, we do nothing to the \nfield.\n*/\n{% if execute -%}\n    {% set results = run_query('select completion_date from ' ~ ref('stg_hubspot__engagement_task_tmp') ~ ' where completion_date is not null limit 1') %}\n    {% set results_list = results.columns[0].values() | string %}\n{% endif -%}\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        body as task_note,\n\n        {% if 'tzinfo=<UTC>' not in results_list %}\n            {{ dbt_utils.safe_cast('completion_date', 'timestamp') }} as completion_timestamp,\n        {% else %}\n            completion_date as completion_timestamp,\n        {% endif %}\n\n        engagement_id,\n        for_object_type,\n        is_all_day,\n        priority,\n        probability_to_complete,\n        status as task_status,\n        subject as task_subject,\n        task_type\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_task_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.safe_cast", "macro.dbt.run_query"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_task_tmp", "model.hubspot_source.stg_hubspot__engagement_task_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__engagement_task"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_task", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__engagement_task.sql", "original_file_path": "models/stg_hubspot__engagement_task.sql", "name": "stg_hubspot__engagement_task", "alias": "stg_hubspot__engagement_task", "checksum": {"name": "sha256", "checksum": "141ca0f6dff813ecf5810bfbbecf3cf543aacac4a9d59ce3bde833b5357fe5f3"}, "tags": [], "refs": [["stg_hubspot__engagement_task_tmp"], ["stg_hubspot__engagement_task_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a TASK engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completion_timestamp": {"name": "completion_timestamp", "description": "The timestamp the task was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "for_object_type": {"name": "for_object_type", "description": "One of CONTACT or COMPANY, what object type the task is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_all_day": {"name": "is_all_day", "description": "Whether it is an all day task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority": {"name": "priority", "description": "The priority of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "probability_to_complete": {"name": "probability_to_complete", "description": "The probability that the task will be completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_note": {"name": "task_note", "description": "The body or details of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_status": {"name": "task_status", "description": "The status of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_subject": {"name": "task_subject", "description": "The subject or title of the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_type": {"name": "task_type", "description": "The type of task", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_task.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.7328188, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_task_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    completion_date\n    \n as \n    \n    completion_date\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n, \n    \n    \n    for_object_type\n    \n as \n    \n    for_object_type\n    \n, \n    \n    \n    is_all_day\n    \n as \n    \n    is_all_day\n    \n, \n    \n    \n    priority\n    \n as \n    \n    priority\n    \n, \n    cast(null as \n    float\n) as \n    \n    probability_to_complete\n    \n , \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    task_type\n    \n as \n    \n    task_type\n    \n\n\n\n    from base\n\n/*\nSome users have experienced the `completion_date` field being synced as a string rather than a timestamp.\nTo address this, we use the below run_query command to query a sinlge record from the engagement_task tmp table\nand then assess in a conditional within the fields cte if the engagement_task field is indeed a UTC timestamp or not.\n\nIf the field is not a timestamp, then we safe_cast so downstream models do not fail. Otherwise, we do nothing to the \nfield.\n*/\n\n    \n), fields as (\n\n    select\n        _fivetran_synced,\n        body as task_note,\n\n        \n            completion_date as completion_timestamp,\n        \n\n        engagement_id,\n        for_object_type,\n        is_all_day,\n        priority,\n        probability_to_complete,\n        status as task_status,\n        subject as task_subject,\n        task_type\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_task"}, "model.hubspot_source.stg_hubspot__engagement_deal": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_deal_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__engagement_deal_tmp')),\n                staging_columns=get_engagement_deal_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        deal_id,\n        engagement_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_deal_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_deal_tmp", "model.hubspot_source.stg_hubspot__engagement_deal_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__engagement_deal"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_deal", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__engagement_deal.sql", "original_file_path": "models/stg_hubspot__engagement_deal.sql", "name": "stg_hubspot__engagement_deal", "alias": "stg_hubspot__engagement_deal", "checksum": {"name": "sha256", "checksum": "898021a7f60addee81c2019a93b4f484169bd967975bedbfdf78cf3af94c2cc8"}, "tags": [], "refs": [["stg_hubspot__engagement_deal_tmp"], ["stg_hubspot__engagement_deal_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a 'link' between a deal and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_deal.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.725734, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_deal_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        deal_id,\n        engagement_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_deal"}, "model.hubspot_source.stg_hubspot__company_property_history": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__company_property_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__company_property_history_tmp')),\n                staging_columns=get_company_property_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        company_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        change_timestamp, -- source field name = timestamp ; alias declared in macros/get_company_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_company_property_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__company_property_history_tmp", "model.hubspot_source.stg_hubspot__company_property_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__company_property_history"], "unique_id": "model.hubspot_source.stg_hubspot__company_property_history", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__company_property_history.sql", "original_file_path": "models/stg_hubspot__company_property_history.sql", "name": "stg_hubspot__company_property_history", "alias": "stg_hubspot__company_property_history", "checksum": {"name": "sha256", "checksum": "57cbf94fca3a462f635d0f9a3b5de1fd3d898855f7721fe9cf202f5ba5e61415"}, "tags": [], "refs": [["stg_hubspot__company_property_history_tmp"], ["stg_hubspot__company_property_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a change to company record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_timestamp": {"name": "change_timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__company.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__company_property_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.8280141, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__company_property_history_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    timestamp\n    \n as change_timestamp , \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        company_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        change_timestamp, -- source field name = timestamp ; alias declared in macros/get_company_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__company_property_history"}, "model.hubspot_source.stg_hubspot__email_event_delivered": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_delivered_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_delivered_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_delivered_tmp')),\n                staging_columns=get_email_event_delivered_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        id as event_id,\n        response as returned_response,\n        smtp_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_delivered_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_delivered_tmp", "model.hubspot_source.stg_hubspot__email_event_delivered_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_event_delivered"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_delivered", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_event_delivered.sql", "original_file_path": "models/stg_hubspot__email_event_delivered.sql", "name": "stg_hubspot__email_event_delivered", "alias": "stg_hubspot__email_event_delivered", "checksum": {"name": "sha256", "checksum": "a2b5ac41bde0c92869fe7e96ecc82b021c45ce01df87dbcac040fa1bfa4ab6dd"}, "tags": [], "refs": [["stg_hubspot__email_event_delivered_tmp"], ["stg_hubspot__email_event_delivered_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a DELIVERED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "smtp_id": {"name": "smtp_id", "description": "An ID attached to the message by HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_delivered.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.686603, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_delivered_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    response\n    \n as \n    \n    response\n    \n, \n    \n    \n    smtp_id\n    \n as \n    \n    smtp_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        id as event_id,\n        response as returned_response,\n        smtp_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_delivered"}, "model.hubspot_source.stg_hubspot__owner": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_owner_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__owner_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__owner_tmp')),\n                staging_columns=get_owner_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        created_at as created_timestamp,\n        email as email_address,\n        first_name,\n        last_name,\n        owner_id,\n        portal_id,\n        type as owner_type,\n        updated_at as updated_timestamp,\n        trim( {{ dbt_utils.concat(['first_name', \"' '\", 'last_name']) }} ) as full_name\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_owner_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.concat"], "nodes": ["model.hubspot_source.stg_hubspot__owner_tmp", "model.hubspot_source.stg_hubspot__owner_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__owner"], "unique_id": "model.hubspot_source.stg_hubspot__owner", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__owner.sql", "original_file_path": "models/stg_hubspot__owner.sql", "name": "stg_hubspot__owner", "alias": "stg_hubspot__owner", "checksum": {"name": "sha256", "checksum": "626ce2b5147c5f027d6c45dbc4e4b7601787b13202e2181ce1fd06a6e2a1308c"}, "tags": [], "refs": [["stg_hubspot__owner_tmp"], ["stg_hubspot__owner_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__owner.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.225583, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__owner_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    portal_id\n    \n as \n    \n    portal_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        created_at as created_timestamp,\n        email as email_address,\n        first_name,\n        last_name,\n        owner_id,\n        portal_id,\n        type as owner_type,\n        updated_at as updated_timestamp,\n        trim( first_name || ' ' || last_name ) as full_name\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__owner"}, "model.hubspot_source.stg_hubspot__email_event": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_tmp')),\n                staging_columns=get_email_event_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        app_id,\n        caused_by_created as caused_timestamp,\n        caused_by_id as caused_by_event_id,\n        created as created_timestamp,\n        email_campaign_id,\n        filtered_event as is_filtered_event,\n        id as event_id,\n        obsoleted_by_created as obsoleted_timestamp,\n        obsoleted_by_id as obsoleted_by_event_id,\n        portal_id,\n        recipient as recipient_email_address,\n        sent_by_created as sent_timestamp,\n        sent_by_id as sent_by_event_id,\n        type as event_type\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_tmp", "model.hubspot_source.stg_hubspot__email_event_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_event"], "unique_id": "model.hubspot_source.stg_hubspot__email_event", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_event.sql", "original_file_path": "models/stg_hubspot__email_event.sql", "name": "stg_hubspot__email_event", "alias": "stg_hubspot__email_event", "checksum": {"name": "sha256", "checksum": "bb1e2e17bfe96ee5eee95744f9c9bb5834309f76e7dba67159225ec074341d24"}, "tags": [], "refs": [["stg_hubspot__email_event_tmp"], ["stg_hubspot__email_event_tmp"]], "sources": [], "metrics": [], "description": "Each record represents an email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The ID of the app that sent the email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "caused_by_event_id": {"name": "caused_by_event_id", "description": "The event ID which uniquely identifies the event which directly caused this event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "caused_timestamp": {"name": "caused_timestamp", "description": "The timestamp of the event that caused this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The type of event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_filtered_event": {"name": "is_filtered_event", "description": "A boolean representing whether the event has been filtered out of reporting based on customer reports settings or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "obsoleted_by_event_id": {"name": "obsoleted_by_event_id", "description": "The event ID which uniquely identifies the follow-on event which makes this current event obsolete. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "obsoleted_timestamp": {"name": "obsoleted_timestamp", "description": "The timestamp of the event that made the current event obsolete.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sent_by_event_id": {"name": "sent_by_event_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sent_timestamp": {"name": "sent_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.696894, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    app_id\n    \n as \n    \n    app_id\n    \n, \n    \n    \n    caused_by_created\n    \n as \n    \n    caused_by_created\n    \n, \n    \n    \n    caused_by_id\n    \n as \n    \n    caused_by_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    email_campaign_id\n    \n as \n    \n    email_campaign_id\n    \n, \n    \n    \n    filtered_event\n    \n as \n    \n    filtered_event\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    obsoleted_by_created\n    \n as \n    \n    obsoleted_by_created\n    \n, \n    \n    \n    obsoleted_by_id\n    \n as \n    \n    obsoleted_by_id\n    \n, \n    \n    \n    portal_id\n    \n as \n    \n    portal_id\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    sent_by_created\n    \n as \n    \n    sent_by_created\n    \n, \n    \n    \n    sent_by_id\n    \n as \n    \n    sent_by_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        app_id,\n        caused_by_created as caused_timestamp,\n        caused_by_id as caused_by_event_id,\n        created as created_timestamp,\n        email_campaign_id,\n        filtered_event as is_filtered_event,\n        id as event_id,\n        obsoleted_by_created as obsoleted_timestamp,\n        obsoleted_by_id as obsoleted_by_event_id,\n        portal_id,\n        recipient as recipient_email_address,\n        sent_by_created as sent_timestamp,\n        sent_by_id as sent_by_event_id,\n        type as event_type\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event"}, "model.hubspot_source.stg_hubspot__engagement_meeting": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_email_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_meeting_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__engagement_meeting_tmp')),\n                staging_columns=get_engagement_meeting_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        body as meeting_notes,\n        created_from_link_id,\n        end_time as end_timestamp,\n        engagement_id,\n        external_url,\n        meeting_outcome,\n        pre_meeting_prospect_reminders,\n        source,\n        source_id,\n        start_time as start_timestamp,\n        title as meeting_title,\n        web_conference_meeting_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_meeting_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_meeting_tmp", "model.hubspot_source.stg_hubspot__engagement_meeting_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__engagement_meeting"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_meeting", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__engagement_meeting.sql", "original_file_path": "models/stg_hubspot__engagement_meeting.sql", "name": "stg_hubspot__engagement_meeting", "alias": "stg_hubspot__engagement_meeting", "checksum": {"name": "sha256", "checksum": "d910723f79bca69c002268a0d48154cf925a26a01204efde0e5e3e3d10f4caaa"}, "tags": [], "refs": [["stg_hubspot__engagement_meeting_tmp"], ["stg_hubspot__engagement_meeting_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a MEETING engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "A timestamp representing the end time of the meeting", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_url": {"name": "external_url", "description": "The external URL of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meeting_notes": {"name": "meeting_notes", "description": "The details or body of the meeting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meeting_outcome": {"name": "meeting_outcome", "description": "The meeting outcome.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meeting_title": {"name": "meeting_title", "description": "The title or subject of the meeting", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the meeting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The internal ID of the meeting source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "A timestamp representing the start time of the meeting", "meta": {}, "data_type": null, "quote": null, "tags": []}, "web_conference_meeting_id": {"name": "web_conference_meeting_id", "description": "The ID of the web conference meeting.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_meeting.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.730377, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_meeting_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    created_from_link_id\n    \n as \n    \n    created_from_link_id\n    \n, \n    \n    \n    end_time\n    \n as \n    \n    end_time\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n, \n    \n    \n    external_url\n    \n as \n    \n    external_url\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    meeting_outcome\n    \n as \n    \n    meeting_outcome\n    \n, \n    \n    \n    pre_meeting_prospect_reminders\n    \n as \n    \n    pre_meeting_prospect_reminders\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    start_time\n    \n as \n    \n    start_time\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    web_conference_meeting_id\n    \n as \n    \n    web_conference_meeting_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        body as meeting_notes,\n        created_from_link_id,\n        end_time as end_timestamp,\n        engagement_id,\n        external_url,\n        meeting_outcome,\n        pre_meeting_prospect_reminders,\n        source,\n        source_id,\n        start_time as start_timestamp,\n        title as meeting_title,\n        web_conference_meeting_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_meeting"}, "model.hubspot_source.stg_hubspot__engagement_email": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_email_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_email_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__engagement_email_tmp')),\n                staging_columns=get_engagement_email_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        attached_video_id,\n        attached_video_opened as was_attached_video_opened,\n        attached_video_watched as was_attached_video_watched,\n        email_send_event_id_created as email_send_event_created_timestamp,\n        email_send_event_id_id as email_send_event_id,\n        engagement_id,\n        error_message,\n        facsimile_send_id,\n        from_email,\n        from_first_name,\n        from_last_name,\n        html as email_html,\n        logged_from,\n        media_processing_status,\n        message_id,\n        post_send_status,\n        recipient_drop_reasons,\n        sent_via,\n        status as email_status,\n        subject as email_subject,\n        text as email_text,\n        thread_id,\n        tracker_key,\n        validation_skipped\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_email_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_email_tmp", "model.hubspot_source.stg_hubspot__engagement_email_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__engagement_email"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_email", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__engagement_email.sql", "original_file_path": "models/stg_hubspot__engagement_email.sql", "name": "stg_hubspot__engagement_email", "alias": "stg_hubspot__engagement_email", "checksum": {"name": "sha256", "checksum": "edd7d47164f70610df36c264e85497c09e96507a9fb7cba4d4116f31eb16c0e4"}, "tags": [], "refs": [["stg_hubspot__engagement_email_tmp"], ["stg_hubspot__engagement_email_tmp"]], "sources": [], "metrics": [], "description": "Each record represents an EMAIL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attached_video_id": {"name": "attached_video_id", "description": "The ID of the video attached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_html": {"name": "email_html", "description": "The body of the HTML email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_event_created_timestamp": {"name": "email_send_event_created_timestamp", "description": "When the SENT event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_event_id": {"name": "email_send_event_id", "description": "The ID of the related SENT email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_status": {"name": "email_status", "description": "The status of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject of the email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_text": {"name": "email_text", "description": "The body of the text-only email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_message": {"name": "error_message", "description": "The error message, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The email address of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_first_name": {"name": "from_first_name", "description": "The first name of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_last_name": {"name": "from_last_name", "description": "The last name of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_processing_status": {"name": "media_processing_status", "description": "The processing status of the media content in the email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "The ID of the message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sent_via": {"name": "sent_via", "description": "How the email was sent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "The ID of the email thread.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_attached_video_opened": {"name": "was_attached_video_opened", "description": "Whether the the attached video was opened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_attached_video_watched": {"name": "was_attached_video_watched", "description": "Whether the the attached video was watched.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_email.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.728584, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_email_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    attached_video_id\n    \n as \n    \n    attached_video_id\n    \n, \n    \n    \n    attached_video_opened\n    \n as \n    \n    attached_video_opened\n    \n, \n    \n    \n    attached_video_watched\n    \n as \n    \n    attached_video_watched\n    \n, \n    \n    \n    email_send_event_id_created\n    \n as \n    \n    email_send_event_id_created\n    \n, \n    \n    \n    email_send_event_id_id\n    \n as \n    \n    email_send_event_id_id\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n, \n    \n    \n    error_message\n    \n as \n    \n    error_message\n    \n, \n    \n    \n    facsimile_send_id\n    \n as \n    \n    facsimile_send_id\n    \n, \n    \n    \n    from_email\n    \n as \n    \n    from_email\n    \n, \n    \n    \n    from_first_name\n    \n as \n    \n    from_first_name\n    \n, \n    \n    \n    from_last_name\n    \n as \n    \n    from_last_name\n    \n, \n    \n    \n    html\n    \n as \n    \n    html\n    \n, \n    \n    \n    logged_from\n    \n as \n    \n    logged_from\n    \n, \n    \n    \n    media_processing_status\n    \n as \n    \n    media_processing_status\n    \n, \n    cast(null as boolean) as \n    \n    member_of_forwarded_subthread\n    \n , \n    \n    \n    message_id\n    \n as \n    \n    message_id\n    \n, \n    \n    \n    post_send_status\n    \n as \n    \n    post_send_status\n    \n, \n    \n    \n    recipient_drop_reasons\n    \n as \n    \n    recipient_drop_reasons\n    \n, \n    \n    \n    sent_via\n    \n as \n    \n    sent_via\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    text\n    \n as \n    \n    text\n    \n, \n    \n    \n    thread_id\n    \n as \n    \n    thread_id\n    \n, \n    \n    \n    tracker_key\n    \n as \n    \n    tracker_key\n    \n, \n    \n    \n    validation_skipped\n    \n as \n    \n    validation_skipped\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        attached_video_id,\n        attached_video_opened as was_attached_video_opened,\n        attached_video_watched as was_attached_video_watched,\n        email_send_event_id_created as email_send_event_created_timestamp,\n        email_send_event_id_id as email_send_event_id,\n        engagement_id,\n        error_message,\n        facsimile_send_id,\n        from_email,\n        from_first_name,\n        from_last_name,\n        html as email_html,\n        logged_from,\n        media_processing_status,\n        message_id,\n        post_send_status,\n        recipient_drop_reasons,\n        sent_via,\n        status as email_status,\n        subject as email_subject,\n        text as email_text,\n        thread_id,\n        tracker_key,\n        validation_skipped\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_email"}, "model.hubspot_source.stg_hubspot__email_event_status_change": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_status_change_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_status_change_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_status_change_tmp')),\n                staging_columns=get_email_event_status_change_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        bounced as is_bounced,\n        id as event_id,\n        portal_subscription_status as subscription_status,\n        requested_by as requested_by_email,\n        source as change_source,\n        subscriptions\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_status_change_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_status_change_tmp", "model.hubspot_source.stg_hubspot__email_event_status_change_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_event_status_change"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_status_change", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_event_status_change.sql", "original_file_path": "models/stg_hubspot__email_event_status_change.sql", "name": "stg_hubspot__email_event_status_change", "alias": "stg_hubspot__email_event_status_change", "checksum": {"name": "sha256", "checksum": "47cf9452432fd6984c4804eafa08188df00800c45c65d7be98bc993031756230"}, "tags": [], "refs": [["stg_hubspot__email_event_status_change_tmp"], ["stg_hubspot__email_event_status_change_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a STATUS_CHANGE email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source of the subscription change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_bounced": {"name": "is_bounced", "description": "A HubSpot employee explicitly initiated the status change to block messages to the recipient. \n(Note this usage has been deprecated in favor of dropping messages with a 'dropReason' of BLOCKED_ADDRESS.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requested_by_email": {"name": "requested_by_email", "description": "The email address of the person requesting the change on behalf of the recipient. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_status": {"name": "subscription_status", "description": "The recipient's portal subscription status. \nNote that if this is 'UNSUBSCRIBED', the property 'subscriptions' is not necessarily an empty array, nor are all \nsubscriptions contained in it necessarily going to have their statuses set to 'UNSUBSCRIBED'.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscriptions": {"name": "subscriptions", "description": "An array of JSON objects representing the status of subscriptions for the recipient. \nEach JSON subscription object is comprised of the properties: 'id', 'status'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_status_change.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.694561, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_status_change_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bounced\n    \n as \n    \n    bounced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    portal_subscription_status\n    \n as \n    \n    portal_subscription_status\n    \n, \n    \n    \n    requested_by\n    \n as \n    \n    requested_by\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    subscriptions\n    \n as \n    \n    subscriptions\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        bounced as is_bounced,\n        id as event_id,\n        portal_subscription_status as subscription_status,\n        requested_by as requested_by_email,\n        source as change_source,\n        subscriptions\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_status_change"}, "model.hubspot_source.stg_hubspot__contact_list_member": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_member_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_list_member_tmp') }} \n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_list_member_tmp')),\n                staging_columns=get_contact_list_member_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted,\n        _fivetran_synced,\n        added_at as added_timestamp,\n        contact_id,\n        contact_list_id\n    from macro\n    \n)\n\nselect *\nfrom fields\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_list_member_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list_member_tmp", "model.hubspot_source.stg_hubspot__contact_list_member_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__contact_list_member"], "unique_id": "model.hubspot_source.stg_hubspot__contact_list_member", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__contact_list_member.sql", "original_file_path": "models/stg_hubspot__contact_list_member.sql", "name": "stg_hubspot__contact_list_member", "alias": "stg_hubspot__contact_list_member", "checksum": {"name": "sha256", "checksum": "2c31809e6613abd9cc024596a0fd5a91abb72f450d3708f52a6f1f4784d0a127"}, "tags": [], "refs": [["stg_hubspot__contact_list_member_tmp"], ["stg_hubspot__contact_list_member_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a 'link' between a contact and a contact list.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "added_timestamp": {"name": "added_timestamp", "description": "The timestamp a contact was added to a list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_list_id": {"name": "contact_list_id", "description": "The ID of the related contact list.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact_list_member.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.671605, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__contact_list_member_tmp \n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    added_at\n    \n as \n    \n    added_at\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    contact_list_id\n    \n as \n    \n    contact_list_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted,\n        _fivetran_synced,\n        added_at as added_timestamp,\n        contact_id,\n        contact_list_id\n    from macro\n    \n)\n\nselect *\nfrom fields\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__contact_list_member"}, "model.hubspot_source.stg_hubspot__contact": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_tmp')),\n                staging_columns=get_contact_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        id as contact_id,\n\n{% if var('hubspot__pass_through_all_columns', false) %}\n        -- just pass everything through\n        {{ \n            fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_tmp')), \n                prefix='property_', exclude=['id', 'property_contact_id']) \n        }}\n    from base\n\n{% else %}\n        -- just default columns + explicitly configured passthrough columns\n        property_email as email,\n        property_company as contact_company,\n        property_firstname as first_name,\n        property_lastname as last_name,\n        property_createdate as created_at,\n        property_jobtitle as job_title,\n        property_annualrevenue as company_annual_revenue,\n        _fivetran_deleted,\n        _fivetran_synced\n\n        --The below macro adds the fields defined within your hubspot__contact_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('hubspot__contact_pass_through_columns') }}\n\n        -- The below macro add the ability to create calculated fields using the hubspot__contact_calculated_fields variable.\n        {{ fivetran_utils.calculated_fields('hubspot__contact_calculated_fields') }}\n\n    from macro\n{% endif %}    \n    \n)\n\nselect *\nfrom fields\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns", "macro.fivetran_utils.calculated_fields"], "nodes": ["model.hubspot_source.stg_hubspot__contact_tmp", "model.hubspot_source.stg_hubspot__contact_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__contact"], "unique_id": "model.hubspot_source.stg_hubspot__contact", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__contact.sql", "original_file_path": "models/stg_hubspot__contact.sql", "name": "stg_hubspot__contact", "alias": "stg_hubspot__contact", "checksum": {"name": "sha256", "checksum": "43c0d771a643ce9cfd69d04a8a1cb2214f08877f292f90d171db9a44b895146b"}, "tags": [], "refs": [["stg_hubspot__contact_tmp"], ["stg_hubspot__contact_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a contact in Hubspot.", "columns": {"contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The contact's email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_company": {"name": "contact_company", "description": "The name of the contact's company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date that the contact was created in your HubSpot account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_title": {"name": "job_title", "description": "The contact's job title.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_annual_revenue": {"name": "company_annual_revenue", "description": "The contact's annual company revenue.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.678268, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__contact_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    property_email\n    \n as \n    \n    property_email\n    \n, \n    \n    \n    property_company\n    \n as \n    \n    property_company\n    \n, \n    \n    \n    property_firstname\n    \n as \n    \n    property_firstname\n    \n, \n    \n    \n    property_lastname\n    \n as \n    \n    property_lastname\n    \n, \n    \n    \n    property_createdate\n    \n as \n    \n    property_createdate\n    \n, \n    \n    \n    property_jobtitle\n    \n as \n    \n    property_jobtitle\n    \n, \n    \n    \n    property_annualrevenue\n    \n as \n    \n    property_annualrevenue\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        id as contact_id,\n\n\n        -- just default columns + explicitly configured passthrough columns\n        property_email as email,\n        property_company as contact_company,\n        property_firstname as first_name,\n        property_lastname as last_name,\n        property_createdate as created_at,\n        property_jobtitle as job_title,\n        property_annualrevenue as company_annual_revenue,\n        _fivetran_deleted,\n        _fivetran_synced\n\n        --The below macro adds the fields defined within your hubspot__contact_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n        -- The below macro add the ability to create calculated fields using the hubspot__contact_calculated_fields variable.\n        \n\n\n\n    from macro\n    \n    \n)\n\nselect *\nfrom fields\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__contact"}, "model.hubspot_source.stg_hubspot__deal": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_tmp')),\n                staging_columns=get_deal_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n\n{% if var('hubspot__pass_through_all_columns', false) %}\n        -- just pass everything through\n        {{ \n            fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_tmp')), \n                prefix='property_') \n        }}\n    from base\n\n{% else %}\n        -- just default columns + explicitly configured passthrough columns\n        _fivetran_synced,\n        is_deleted,\n        deal_id,\n        cast(deal_pipeline_id as {{ dbt_utils.type_string() }}) as deal_pipeline_id,\n        cast(deal_pipeline_stage_id as {{ dbt_utils.type_string() }}) as deal_pipeline_stage_id,\n        owner_id,\n        portal_id,\n        property_dealname as deal_name,\n        property_description as description,\n        property_amount as amount,\n        property_closedate as closed_at,\n        property_createdate as created_at\n\n        --The below macro adds the fields defined within your hubspot__deal_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('hubspot__deal_pass_through_columns') }}\n\n        -- The below macro add the ability to create calculated fields using the hubspot__deal_calculated_fields variable.\n        {{ fivetran_utils.calculated_fields('hubspot__deal_calculated_fields') }}\n\n    from macro\n{% endif %}\n\n)\n\nselect *\nfrom fields\nwhere not coalesce(is_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_string", "macro.fivetran_utils.fill_pass_through_columns", "macro.fivetran_utils.calculated_fields"], "nodes": ["model.hubspot_source.stg_hubspot__deal_tmp", "model.hubspot_source.stg_hubspot__deal_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__deal"], "unique_id": "model.hubspot_source.stg_hubspot__deal", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__deal.sql", "original_file_path": "models/stg_hubspot__deal.sql", "name": "stg_hubspot__deal", "alias": "stg_hubspot__deal", "checksum": {"name": "sha256", "checksum": "b6bc92c3a0009fece78d83f892f8e8802e46c4efdedc105ea9930d70cef94755"}, "tags": [], "refs": [["stg_hubspot__deal_tmp"], ["stg_hubspot__deal_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a deal in Hubspot.", "columns": {"deal_id": {"name": "deal_id", "description": "The ID of the deal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the deal's pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_pipeline_stage_id": {"name": "deal_pipeline_stage_id", "description": "The ID of the deal's pipeline stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_name": {"name": "deal_name", "description": "The name you have given this deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A brief description of the deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The total value of the deal in the deal's currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_at": {"name": "closed_at", "description": "The day the deal is expected to close, or was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date the deal was created. This property is set automatically by HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.657652, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    deal_pipeline_id\n    \n as \n    \n    deal_pipeline_id\n    \n, \n    \n    \n    deal_pipeline_stage_id\n    \n as \n    \n    deal_pipeline_stage_id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    portal_id\n    \n as \n    \n    portal_id\n    \n, \n    \n    \n    property_dealname\n    \n as \n    \n    property_dealname\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    property_description\n    \n , \n    \n    \n    property_amount\n    \n as \n    \n    property_amount\n    \n, \n    \n    \n    property_closedate\n    \n as \n    \n    property_closedate\n    \n, \n    \n    \n    property_createdate\n    \n as \n    \n    property_createdate\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n\n\n        -- just default columns + explicitly configured passthrough columns\n        _fivetran_synced,\n        is_deleted,\n        deal_id,\n        cast(deal_pipeline_id as \n    varchar\n) as deal_pipeline_id,\n        cast(deal_pipeline_stage_id as \n    varchar\n) as deal_pipeline_stage_id,\n        owner_id,\n        portal_id,\n        property_dealname as deal_name,\n        property_description as description,\n        property_amount as amount,\n        property_closedate as closed_at,\n        property_createdate as created_at\n\n        --The below macro adds the fields defined within your hubspot__deal_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n        -- The below macro add the ability to create calculated fields using the hubspot__deal_calculated_fields variable.\n        \n\n\n\n    from macro\n\n\n)\n\nselect *\nfrom fields\nwhere not coalesce(is_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal"}, "model.hubspot_source.stg_hubspot__deal_pipeline": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_pipeline_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_pipeline_tmp')),\n                staging_columns=get_deal_pipeline_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted,\n        _fivetran_synced,\n        active as is_active,\n        display_order,\n        label as pipeline_label,\n        cast(pipeline_id as {{ dbt_utils.type_string() }}) as deal_pipeline_id\n    from macro\n    \n)\n\nselect *\nfrom fields\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_pipeline_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_string"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline_tmp", "model.hubspot_source.stg_hubspot__deal_pipeline_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__deal_pipeline"], "unique_id": "model.hubspot_source.stg_hubspot__deal_pipeline", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__deal_pipeline.sql", "original_file_path": "models/stg_hubspot__deal_pipeline.sql", "name": "stg_hubspot__deal_pipeline", "alias": "stg_hubspot__deal_pipeline", "checksum": {"name": "sha256", "checksum": "2d7e5f348c37bd618f40433657e198c2f03f175ba32d8f4a161b6ceb3ff509ea"}, "tags": [], "refs": [["stg_hubspot__deal_pipeline_tmp"], ["stg_hubspot__deal_pipeline_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a pipeline in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the pipelines appear when viewed in HubSpot", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the stage is currently in use.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipeline_label": {"name": "pipeline_label", "description": "The human-readable label for the pipeline. The label is used when showing the pipeline in HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_pipeline.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.65598, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_pipeline_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    display_order\n    \n as \n    \n    display_order\n    \n, \n    \n    \n    label\n    \n as \n    \n    label\n    \n, \n    \n    \n    pipeline_id\n    \n as \n    \n    pipeline_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted,\n        _fivetran_synced,\n        active as is_active,\n        display_order,\n        label as pipeline_label,\n        cast(pipeline_id as \n    varchar\n) as deal_pipeline_id\n    from macro\n    \n)\n\nselect *\nfrom fields\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_pipeline"}, "model.hubspot_source.stg_hubspot__deal_company": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_company_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_company_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_company_tmp')),\n                staging_columns=get_deal_company_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        company_id,\n        deal_id,\n        _fivetran_synced\n        \n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_company_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__deal_company_tmp", "model.hubspot_source.stg_hubspot__deal_company_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__deal_company"], "unique_id": "model.hubspot_source.stg_hubspot__deal_company", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__deal_company.sql", "original_file_path": "models/stg_hubspot__deal_company.sql", "name": "stg_hubspot__deal_company", "alias": "stg_hubspot__deal_company", "checksum": {"name": "sha256", "checksum": "c983b53b3367493154bef750609cb5e6985ae420a959fb1c0685ad9a781f2372"}, "tags": [], "refs": [["stg_hubspot__deal_company_tmp"], ["stg_hubspot__deal_company_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a 'link' between a deal and company.", "columns": {"company_id": {"name": "company_id", "description": "The ID of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_company.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.659693, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_company_tmp\n\n), macro as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        company_id,\n        deal_id,\n        _fivetran_synced\n        \n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_company"}, "model.hubspot_source.stg_hubspot__engagement_note": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_note_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_note_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__engagement_note_tmp')),\n                staging_columns=get_engagement_note_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        body as note,\n        engagement_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_note_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_note_tmp", "model.hubspot_source.stg_hubspot__engagement_note_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__engagement_note"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_note", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__engagement_note.sql", "original_file_path": "models/stg_hubspot__engagement_note.sql", "name": "stg_hubspot__engagement_note", "alias": "stg_hubspot__engagement_note", "checksum": {"name": "sha256", "checksum": "7b310c029c7520e9bbf11fcdde24318af6cf4e23b59f246479f692b7893809e6"}, "tags": [], "refs": [["stg_hubspot__engagement_note_tmp"], ["stg_hubspot__engagement_note_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a NOTE engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "The body of the note. The body has a limit of 65536 characters.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_note.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.731026, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_note_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        body as note,\n        engagement_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_note"}, "model.hubspot_source.stg_hubspot__engagement_contact": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_contact_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_contact_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__engagement_contact_tmp')),\n                staging_columns=get_engagement_contact_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        contact_id,\n        engagement_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_contact_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_contact_tmp", "model.hubspot_source.stg_hubspot__engagement_contact_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__engagement_contact"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_contact", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__engagement_contact.sql", "original_file_path": "models/stg_hubspot__engagement_contact.sql", "name": "stg_hubspot__engagement_contact", "alias": "stg_hubspot__engagement_contact", "checksum": {"name": "sha256", "checksum": "b19c1faca89259973191ee9267a2f2ac0af262a365eb881c9ea16e702478435a"}, "tags": [], "refs": [["stg_hubspot__engagement_contact_tmp"], ["stg_hubspot__engagement_contact_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a 'link' between a contact and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_contact.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.725128, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_contact_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        contact_id,\n        engagement_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_contact"}, "model.hubspot_source.stg_hubspot__contact_list": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_list_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_list_tmp')),\n                staging_columns=get_contact_list_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted,\n        _fivetran_synced,\n        created_at as created_timestamp,\n        deleteable as is_deletable,\n        dynamic as is_dynamic,\n        id as contact_list_id,\n        metadata_error,\n        metadata_last_processing_state_change_at,\n        metadata_last_size_change_at,\n        metadata_processing,\n        metadata_size,\n        name as contact_list_name,\n        portal_id,\n        updated_at as updated_timestamp\n    from macro\n    \n)\n\nselect *\nfrom fields\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_list_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list_tmp", "model.hubspot_source.stg_hubspot__contact_list_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__contact_list"], "unique_id": "model.hubspot_source.stg_hubspot__contact_list", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__contact_list.sql", "original_file_path": "models/stg_hubspot__contact_list.sql", "name": "stg_hubspot__contact_list", "alias": "stg_hubspot__contact_list", "checksum": {"name": "sha256", "checksum": "7d60fa5b22c108bf1b0e3248455a68852a9b7f1a21dbeec34be0ff1485031c95"}, "tags": [], "refs": [["stg_hubspot__contact_list_tmp"], ["stg_hubspot__contact_list_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a contact list in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_list_id": {"name": "contact_list_id", "description": "The ID of the contact list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_list_name": {"name": "contact_list_name", "description": "The name of the contact list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp of the time the list was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deletable": {"name": "is_deletable", "description": "If this is false, this is a system list and cannot be deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_dynamic": {"name": "is_dynamic", "description": "Whether the contact list is dynamic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_error": {"name": "metadata_error", "description": "Any errors that happened the last time the list was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_last_processing_state_change_at": {"name": "metadata_last_processing_state_change_at", "description": "A timestamp of the last time that the processing state changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_last_size_change_at": {"name": "metadata_last_size_change_at", "description": "A timestamp of the last time that the size of the list changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_processing": {"name": "metadata_processing", "description": "One of DONE, REFRESHING, INITIALIZING, or PROCESSING. \nDONE indicates the list has finished processing, any other value indicates that list membership is being evaluated.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_size": {"name": "metadata_size", "description": "The approximate number of contacts in the list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "A timestamp of the time that the list was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact_list.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.673921, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__contact_list_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    deleteable\n    \n as \n    \n    deleteable\n    \n, \n    \n    \n    dynamic\n    \n as \n    \n    dynamic\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    metadata_error\n    \n as \n    \n    metadata_error\n    \n, \n    \n    \n    metadata_last_processing_state_change_at\n    \n as \n    \n    metadata_last_processing_state_change_at\n    \n, \n    \n    \n    metadata_last_size_change_at\n    \n as \n    \n    metadata_last_size_change_at\n    \n, \n    \n    \n    metadata_processing\n    \n as \n    \n    metadata_processing\n    \n, \n    \n    \n    metadata_size\n    \n as \n    \n    metadata_size\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    portal_id\n    \n as \n    \n    portal_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted,\n        _fivetran_synced,\n        created_at as created_timestamp,\n        deleteable as is_deletable,\n        dynamic as is_dynamic,\n        id as contact_list_id,\n        metadata_error,\n        metadata_last_processing_state_change_at,\n        metadata_last_size_change_at,\n        metadata_processing,\n        metadata_size,\n        name as contact_list_name,\n        portal_id,\n        updated_at as updated_timestamp\n    from macro\n    \n)\n\nselect *\nfrom fields\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__contact_list"}, "model.hubspot_source.stg_hubspot__deal_pipeline_stage": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_pipeline_stage_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_pipeline_stage_tmp')),\n                staging_columns=get_deal_pipeline_stage_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted,\n        _fivetran_synced,\n        active as is_active,\n        closed_won as is_closed_won,\n        display_order,\n        label as pipeline_stage_label,\n        pipeline_id as deal_pipeline_id,\n        probability,\n        cast(stage_id as {{ dbt_utils.type_string() }}) as deal_pipeline_stage_id\n    from macro\n    \n)\n\nselect *\nfrom fields\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_pipeline_stage_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_string"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp", "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__deal_pipeline_stage"], "unique_id": "model.hubspot_source.stg_hubspot__deal_pipeline_stage", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__deal_pipeline_stage.sql", "original_file_path": "models/stg_hubspot__deal_pipeline_stage.sql", "name": "stg_hubspot__deal_pipeline_stage", "alias": "stg_hubspot__deal_pipeline_stage", "checksum": {"name": "sha256", "checksum": "210f8a837e061de0f88557699f81f1eb6328131064b6d796b69c3cd0e23f7a5f"}, "tags": [], "refs": [["stg_hubspot__deal_pipeline_stage_tmp"], ["stg_hubspot__deal_pipeline_stage_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a pipeline stage in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the related pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_pipeline_stage_id": {"name": "deal_pipeline_stage_id", "description": "The ID of the pipeline stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the pipeline stage is currently in use.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_closed_won": {"name": "is_closed_won", "description": "Whether the stage represents a Closed Won deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipeline_stage_label": {"name": "pipeline_stage_label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "probability": {"name": "probability", "description": "The probability that the deal will close. Used for the deal forecast.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_pipeline_stage.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.6548119, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp\n\n), macro as (\n\n    select \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    closed_won\n    \n as \n    \n    closed_won\n    \n, \n    \n    \n    display_order\n    \n as \n    \n    display_order\n    \n, \n    \n    \n    label\n    \n as \n    \n    label\n    \n, \n    \n    \n    pipeline_id\n    \n as \n    \n    pipeline_id\n    \n, \n    \n    \n    probability\n    \n as \n    \n    probability\n    \n, \n    \n    \n    stage_id\n    \n as \n    \n    stage_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_deleted,\n        _fivetran_synced,\n        active as is_active,\n        closed_won as is_closed_won,\n        display_order,\n        label as pipeline_stage_label,\n        pipeline_id as deal_pipeline_id,\n        probability,\n        cast(stage_id as \n    varchar\n) as deal_pipeline_stage_id\n    from macro\n    \n)\n\nselect *\nfrom fields\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_pipeline_stage"}, "model.hubspot_source.stg_hubspot__email_event_dropped": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_dropped_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_dropped_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_dropped_tmp')),\n                staging_columns=get_email_event_dropped_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        bcc as bcc_emails,\n        cc as cc_emails,\n        drop_message,\n        drop_reason,\n        from_email, -- source field name = from ; alias declared in macros/get_email_event_dropped_columns.sql\n        id as event_id,\n        reply_to as reply_to_email,\n        subject as email_subject\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_dropped_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_dropped_tmp", "model.hubspot_source.stg_hubspot__email_event_dropped_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_event_dropped"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_dropped", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_event_dropped.sql", "original_file_path": "models/stg_hubspot__email_event_dropped.sql", "name": "stg_hubspot__email_event_dropped", "alias": "stg_hubspot__email_event_dropped", "checksum": {"name": "sha256", "checksum": "4c44c7185866d3d33efd3161dfb38ca0c96fe79e44253b021a05ee5aaf7692dd"}, "tags": [], "refs": [["stg_hubspot__email_event_dropped_tmp"], ["stg_hubspot__email_event_dropped_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a DROPPED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bcc_emails": {"name": "bcc_emails", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drop_message": {"name": "drop_message", "description": "The raw message describing why the email message was dropped. This will usually provide additional details beyond 'dropReason'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drop_reason": {"name": "drop_reason", "description": "The reason why the email message was dropped. See below for the possible values.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reply_to_email": {"name": "reply_to_email", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_dropped.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.688125, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_dropped_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bcc\n    \n as \n    \n    bcc\n    \n, \n    \n    \n    cc\n    \n as \n    \n    cc\n    \n, \n    \n    \n    drop_message\n    \n as \n    \n    drop_message\n    \n, \n    \n    \n    drop_reason\n    \n as \n    \n    drop_reason\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    reply_to\n    \n as \n    \n    reply_to\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n        \n            \n            \"FROM\"\n            \n        \n    \n as from_email \n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        bcc as bcc_emails,\n        cc as cc_emails,\n        drop_message,\n        drop_reason,\n        from_email, -- source field name = from ; alias declared in macros/get_email_event_dropped_columns.sql\n        id as event_id,\n        reply_to as reply_to_email,\n        subject as email_subject\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_dropped"}, "model.hubspot_source.stg_hubspot__deal_stage": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_hubspot__deal_stage_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_stage_tmp')),\n                staging_columns=get_deal_stage_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        date_entered,\n        deal_id,\n        source,\n        source_id,\n        value as deal_stage_name,\n        _fivetran_active,\n        _fivetran_end,\n        _fivetran_start\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_stage_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__deal_stage_tmp", "model.hubspot_source.stg_hubspot__deal_stage_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__deal_stage"], "unique_id": "model.hubspot_source.stg_hubspot__deal_stage", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__deal_stage.sql", "original_file_path": "models/stg_hubspot__deal_stage.sql", "name": "stg_hubspot__deal_stage", "alias": "stg_hubspot__deal_stage", "checksum": {"name": "sha256", "checksum": "bb5e4d21137deba5d5a08fcf0c5e6d646ac24eff16a58fb067f3193acf6eb05e"}, "tags": [], "refs": [["stg_hubspot__deal_stage_tmp"], ["stg_hubspot__deal_stage_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a deal stage.", "columns": {"_fivetran_active": {"name": "_fivetran_active", "description": "Boolean indicating whether the deal stage is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_end": {"name": "_fivetran_end", "description": "The Fivetran calculated exist time of the deal stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_start": {"name": "_fivetran_start", "description": "The date the deal stage was entered.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_entered": {"name": "date_entered", "description": "The timestamp the deal stage was entered.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "Reference to the deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The relevant source of the deal stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "Reference to the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_stage_name": {"name": "deal_stage_name", "description": "The value of the deal stage. Typically the name of the stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_stage.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.6592178, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from prod_analytics.hubspot_source.stg_hubspot__deal_stage_tmp\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_active\n    \n as \n    \n    _fivetran_active\n    \n, \n    \n    \n    _fivetran_end\n    \n as \n    \n    _fivetran_end\n    \n, \n    \n    \n    _fivetran_start\n    \n as \n    \n    _fivetran_start\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    date_entered\n    \n as \n    \n    date_entered\n    \n, \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        date_entered,\n        deal_id,\n        source,\n        source_id,\n        value as deal_stage_name,\n        _fivetran_active,\n        _fivetran_end,\n        _fivetran_start\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_stage"}, "model.hubspot_source.stg_hubspot__deal_property_history": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_property_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_property_history_tmp')),\n                staging_columns=get_deal_property_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        deal_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        change_timestamp, -- source field name = timestamp ; alias declared in macros/get_deal_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_property_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__deal_property_history_tmp", "model.hubspot_source.stg_hubspot__deal_property_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__deal_property_history"], "unique_id": "model.hubspot_source.stg_hubspot__deal_property_history", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__deal_property_history.sql", "original_file_path": "models/stg_hubspot__deal_property_history.sql", "name": "stg_hubspot__deal_property_history", "alias": "stg_hubspot__deal_property_history", "checksum": {"name": "sha256", "checksum": "89d213fc42e90cc51ea5ac22180d3a2c7045b295c5263422a6995b0a720f27ee"}, "tags": [], "refs": [["stg_hubspot__deal_property_history_tmp"], ["stg_hubspot__deal_property_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the details of your deal properties.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_timestamp": {"name": "change_timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__deal.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_property_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.660822, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_property_history_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    timestamp\n    \n as change_timestamp , \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        deal_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        change_timestamp, -- source field name = timestamp ; alias declared in macros/get_deal_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_property_history"}, "model.hubspot_source.stg_hubspot__email_event_bounce": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_bounce_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_bounce_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_bounce_tmp')),\n                staging_columns=get_email_event_bounce_columns()\n            )\n        }}\n    from base\n    \n), fields as (\n\n    select\n        _fivetran_synced,\n        category as bounce_category,\n        id as event_id,\n        response as returned_response,\n        status as returned_status\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_bounce_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_bounce_tmp", "model.hubspot_source.stg_hubspot__email_event_bounce_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_event_bounce"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_bounce", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_event_bounce.sql", "original_file_path": "models/stg_hubspot__email_event_bounce.sql", "name": "stg_hubspot__email_event_bounce", "alias": "stg_hubspot__email_event_bounce", "checksum": {"name": "sha256", "checksum": "025e8ac7e6d46d4db4879f113c367e3ba915d1179642f26a1afb35d61cf78d77"}, "tags": [], "refs": [["stg_hubspot__email_event_bounce_tmp"], ["stg_hubspot__email_event_bounce_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a BOUNCE email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bounce_category": {"name": "bounce_category", "description": "The best-guess of the type of bounce encountered. \nIf an appropriate category couldn't be determined, this property is omitted. See below for the possible values. \nNote that this is a derived value, and may be modified at any time to improve the accuracy of classification.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "returned_status": {"name": "returned_status", "description": "The status code returned from the recipient's email server.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_bounce.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.68323, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_bounce_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    response\n    \n as \n    \n    response\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n    from base\n    \n), fields as (\n\n    select\n        _fivetran_synced,\n        category as bounce_category,\n        id as event_id,\n        response as returned_response,\n        status as returned_status\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_bounce"}, "model.hubspot_source.stg_hubspot__engagement_company": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_company_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_company_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__engagement_company_tmp')),\n                staging_columns=get_engagement_company_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        company_id,\n        engagement_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_company_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_company_tmp", "model.hubspot_source.stg_hubspot__engagement_company_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__engagement_company"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_company", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__engagement_company.sql", "original_file_path": "models/stg_hubspot__engagement_company.sql", "name": "stg_hubspot__engagement_company", "alias": "stg_hubspot__engagement_company", "checksum": {"name": "sha256", "checksum": "a82033c7d83fb6aa8c725ec650e15509e3f63bb9cc935ad55e8f500d16e876a0"}, "tags": [], "refs": [["stg_hubspot__engagement_company_tmp"], ["stg_hubspot__engagement_company_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a 'link' between a company and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_company.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.724405, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_company_tmp\n\n), macro as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    company_id\n    \n as \n    \n    company_id\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        company_id,\n        engagement_id\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_company"}, "model.hubspot_source.stg_hubspot__email_event_deferred": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_deferred_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_deferred_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_deferred_tmp')),\n                staging_columns=get_email_event_deferred_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        attempt as attempt_number,\n        id as event_id,\n        response as returned_response\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_deferred_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_deferred_tmp", "model.hubspot_source.stg_hubspot__email_event_deferred_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_event_deferred"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_deferred", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_event_deferred.sql", "original_file_path": "models/stg_hubspot__email_event_deferred.sql", "name": "stg_hubspot__email_event_deferred", "alias": "stg_hubspot__email_event_deferred", "checksum": {"name": "sha256", "checksum": "48b248becf6638995434435185f496caa08055bb06a77aa97929f0e9bddcaa3d"}, "tags": [], "refs": [["stg_hubspot__email_event_deferred_tmp"], ["stg_hubspot__email_event_deferred_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a DEFERRED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attempt_number": {"name": "attempt_number", "description": "The delivery attempt number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_deferred.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.6858099, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_deferred_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    attempt\n    \n as \n    \n    attempt\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    response\n    \n as \n    \n    response\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        attempt as attempt_number,\n        id as event_id,\n        response as returned_response\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_deferred"}, "model.hubspot_source.stg_hubspot__company": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__company_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__company_tmp')),\n                staging_columns=get_company_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        id as company_id,\n\n{% if var('hubspot__pass_through_all_columns', false) %}\n        -- just pass everything through\n        {{ \n            fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref('stg_hubspot__company_tmp')), \n                prefix='property_', exclude=['id']\n            ) \n        }}\n\n    from base\n\n{% else %}\n        -- just default columns + explicitly configured passthrough columns\n        _fivetran_synced,\n        is_deleted,\n        property_name as company_name,\n        property_description as description,\n        property_createdate as created_at,\n        property_industry as industry,\n        property_address as street_address,\n        property_address_2 as street_address_2,\n        property_city as city,\n        property_state as state,\n        property_country as country,\n        property_annualrevenue as company_annual_revenue\n        \n        --The below macro adds the fields defined within your hubspot__ticket_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('hubspot__company_pass_through_columns') }}\n\n        -- The below macro add the ability to create calculated fields using the hubspot__company_calculated_fields variable.\n        {{ fivetran_utils.calculated_fields('hubspot__company_calculated_fields') }}\n        \n    from macro\n\n{% endif %}\n)\n\nselect *\nfrom fields\nwhere not coalesce(is_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_company_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns", "macro.fivetran_utils.calculated_fields"], "nodes": ["model.hubspot_source.stg_hubspot__company_tmp", "model.hubspot_source.stg_hubspot__company_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__company"], "unique_id": "model.hubspot_source.stg_hubspot__company", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__company.sql", "original_file_path": "models/stg_hubspot__company.sql", "name": "stg_hubspot__company", "alias": "stg_hubspot__company", "checksum": {"name": "sha256", "checksum": "76029f613d480015f7b3f3ff015172a2ad9d619d1fc5ad881a5454aba6e50795"}, "tags": [], "refs": [["stg_hubspot__company_tmp"], ["stg_hubspot__company_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a company in Hubspot.", "columns": {"company_id": {"name": "company_id", "description": "The ID of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A short statement about the company's mission and goals.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The date the company was added to your account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry": {"name": "industry", "description": "The type of business the company performs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "street_address": {"name": "street_address", "description": "The street address of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "street_address_2": {"name": "street_address_2", "description": "Additional address information for the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The city where the company is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state where the company is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country where the company is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_annual_revenue": {"name": "company_annual_revenue", "description": "The actual or estimated annual revenue of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__company.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__company.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.8298318, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__company_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    property_name\n    \n as \n    \n    property_name\n    \n, \n    \n    \n    property_description\n    \n as \n    \n    property_description\n    \n, \n    \n    \n    property_createdate\n    \n as \n    \n    property_createdate\n    \n, \n    \n    \n    property_industry\n    \n as \n    \n    property_industry\n    \n, \n    \n    \n    property_address\n    \n as \n    \n    property_address\n    \n, \n    \n    \n    property_address_2\n    \n as \n    \n    property_address_2\n    \n, \n    \n    \n    property_city\n    \n as \n    \n    property_city\n    \n, \n    \n    \n    property_state\n    \n as \n    \n    property_state\n    \n, \n    \n    \n    property_country\n    \n as \n    \n    property_country\n    \n, \n    \n    \n    property_annualrevenue\n    \n as \n    \n    property_annualrevenue\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        id as company_id,\n\n\n        -- just default columns + explicitly configured passthrough columns\n        _fivetran_synced,\n        is_deleted,\n        property_name as company_name,\n        property_description as description,\n        property_createdate as created_at,\n        property_industry as industry,\n        property_address as street_address,\n        property_address_2 as street_address_2,\n        property_city as city,\n        property_state as state,\n        property_country as country,\n        property_annualrevenue as company_annual_revenue\n        \n        --The below macro adds the fields defined within your hubspot__ticket_pass_through_columns variable into the staging model\n        \n\n\n\n\n\n        -- The below macro add the ability to create calculated fields using the hubspot__company_calculated_fields variable.\n        \n\n\n        \n    from macro\n\n\n)\n\nselect *\nfrom fields\nwhere not coalesce(is_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__company"}, "model.hubspot_source.stg_hubspot__deal_contact": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_contact_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__deal_contact_tmp') }}\n\n), macro as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__deal_contact_tmp')),\n                staging_columns=get_deal_contact_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        contact_id,\n        deal_id,\n        _fivetran_synced\n        \n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_deal_contact_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__deal_contact_tmp", "model.hubspot_source.stg_hubspot__deal_contact_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__deal_contact"], "unique_id": "model.hubspot_source.stg_hubspot__deal_contact", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__deal_contact.sql", "original_file_path": "models/stg_hubspot__deal_contact.sql", "name": "stg_hubspot__deal_contact", "alias": "stg_hubspot__deal_contact", "checksum": {"name": "sha256", "checksum": "8cc9751b0ba46e41a08d216ebac3398320573aaddb5916ebf07db94f35bf28a8"}, "tags": [], "refs": [["stg_hubspot__deal_contact_tmp"], ["stg_hubspot__deal_contact_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal_contact.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.453748, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_contact_tmp\n\n), macro as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    deal_id\n    \n as \n    \n    deal_id\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        contact_id,\n        deal_id,\n        _fivetran_synced\n        \n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_contact"}, "model.hubspot_source.stg_hubspot__email_event_click": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_click_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_click_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_click_tmp')),\n                staging_columns=get_email_event_click_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        referer as referer_url,\n        url as click_url,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_click_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_click_tmp", "model.hubspot_source.stg_hubspot__email_event_click_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_event_click"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_click", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_event_click.sql", "original_file_path": "models/stg_hubspot__email_event_click.sql", "name": "stg_hubspot__email_event_click", "alias": "stg_hubspot__email_event_click", "checksum": {"name": "sha256", "checksum": "9b390439502d6d4b7fc06e29435dc73e8af78365e92c4577749d8108ebd3c0b5"}, "tags": [], "refs": [["stg_hubspot__email_event_click_tmp"], ["stg_hubspot__email_event_click_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a CLICK email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_url": {"name": "click_url", "description": "The URL within the message that the recipient clicked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referer_url": {"name": "referer_url", "description": "The URL of the webpage that linked to the URL clicked. Whether this is provided, and what its value is, is determined by the recipient's email client.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_click.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.6845498, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_click_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    browser\n    \n as \n    \n    browser\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    ip_address\n    \n as \n    \n    ip_address\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    referer\n    \n as \n    \n    referer\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        referer as referer_url,\n        url as click_url,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_click"}, "model.hubspot_source.stg_hubspot__engagement_call": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_call_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_call_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__engagement_call_tmp')),\n                staging_columns=get_engagement_call_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        body as call_notes,\n        callee_object_id,\n        callee_object_type,\n        disposition as disposition_id,\n        duration_milliseconds as call_duration_milliseconds,\n        engagement_id,\n        external_account_id,\n        external_id,\n        from_number,\n        recording_url,\n        status as call_status,\n        to_number,\n        transcription_id,\n        unknown_visitor_conversation\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_call_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_call_tmp", "model.hubspot_source.stg_hubspot__engagement_call_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__engagement_call"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_call", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__engagement_call.sql", "original_file_path": "models/stg_hubspot__engagement_call.sql", "name": "stg_hubspot__engagement_call", "alias": "stg_hubspot__engagement_call", "checksum": {"name": "sha256", "checksum": "dc7d0533bf3301520d71db2b46ddf5c79a76392ba12bac6b464815e00a727a09"}, "tags": [], "refs": [["stg_hubspot__engagement_call_tmp"], ["stg_hubspot__engagement_call_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a CALL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_duration_milliseconds": {"name": "call_duration_milliseconds", "description": "The length of the call in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disposition_id": {"name": "disposition_id", "description": "The internal ID for the call outcome.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_account_id": {"name": "external_account_id", "description": "For calls made in HubSpot, this will be the internal ID of the account used to make the call.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_id": {"name": "external_id", "description": "For calls made in HubSpot, this will be the internal ID of the call.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_number": {"name": "from_number", "description": "The phone number that was used as the from number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recording_url": {"name": "recording_url", "description": "The URL of the recording file .", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_number": {"name": "to_number", "description": "The phone number that was called.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement_call.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.723778, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_call_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    callee_object_id\n    \n as \n    \n    callee_object_id\n    \n, \n    \n    \n    callee_object_type\n    \n as \n    \n    callee_object_type\n    \n, \n    \n    \n    disposition\n    \n as \n    \n    disposition\n    \n, \n    \n    \n    duration_milliseconds\n    \n as \n    \n    duration_milliseconds\n    \n, \n    \n    \n    engagement_id\n    \n as \n    \n    engagement_id\n    \n, \n    \n    \n    external_account_id\n    \n as \n    \n    external_account_id\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    from_number\n    \n as \n    \n    from_number\n    \n, \n    \n    \n    recording_url\n    \n as \n    \n    recording_url\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    to_number\n    \n as \n    \n    to_number\n    \n, \n    \n    \n    transcription_id\n    \n as \n    \n    transcription_id\n    \n, \n    \n    \n    unknown_visitor_conversation\n    \n as \n    \n    unknown_visitor_conversation\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        body as call_notes,\n        callee_object_id,\n        callee_object_type,\n        disposition as disposition_id,\n        duration_milliseconds as call_duration_milliseconds,\n        engagement_id,\n        external_account_id,\n        external_id,\n        from_number,\n        recording_url,\n        status as call_status,\n        to_number,\n        transcription_id,\n        unknown_visitor_conversation\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_call"}, "model.hubspot_source.stg_hubspot__engagement": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__engagement_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__engagement_tmp')),\n                staging_columns=get_engagement_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        active as is_active,\n        activity_type,\n        created_at as created_timestamp,\n        id as engagement_id,\n        last_updated as last_updated_timestamp,\n        owner_id,\n        portal_id,\n        occurred_timestamp, -- source field name = timestamp ; alias declared in macros/get_engagement_columns.sql\n        engagement_type\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_engagement_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_tmp", "model.hubspot_source.stg_hubspot__engagement_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__engagement"], "unique_id": "model.hubspot_source.stg_hubspot__engagement", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__engagement.sql", "original_file_path": "models/stg_hubspot__engagement.sql", "name": "stg_hubspot__engagement", "alias": "stg_hubspot__engagement", "checksum": {"name": "sha256", "checksum": "d10a598cafafd9327cd5f43fc473a4a17bf7f8dd497e9bcf5407da6890fd8a77"}, "tags": [], "refs": [["stg_hubspot__engagement_tmp"], ["stg_hubspot__engagement_tmp"]], "sources": [], "metrics": [], "description": "Each record represents an engagement", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activity_type": {"name": "activity_type", "description": "The engagement's activity type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "One of NOTE, EMAIL, TASK, MEETING, or CALL, the type of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_timestamp": {"name": "last_updated_timestamp", "description": "A timestamp in representing when the engagement was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__engagement.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.734384, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    activity_type\n    \n as \n    \n    activity_type\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_updated\n    \n as \n    \n    last_updated\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    portal_id\n    \n as \n    \n    portal_id\n    \n, \n    \n    \n    timestamp\n    \n as occurred_timestamp , \n    \n    \n    type\n    \n as engagement_type \n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        active as is_active,\n        activity_type,\n        created_at as created_timestamp,\n        id as engagement_id,\n        last_updated as last_updated_timestamp,\n        owner_id,\n        portal_id,\n        occurred_timestamp, -- source field name = timestamp ; alias declared in macros/get_engagement_columns.sql\n        engagement_type\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement"}, "model.hubspot_source.stg_hubspot__email_campaign": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_campaign_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_campaign_tmp')),\n                staging_columns=get_email_campaign_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        app_id,\n        app_name,\n        content_id,\n        id as email_campaign_id,\n        name as email_campaign_name,\n        num_included,\n        num_queued,\n        sub_type as email_campaign_sub_type,\n        subject as email_campaign_subject,\n        type as email_campaign_type\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_campaign_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__email_campaign_tmp", "model.hubspot_source.stg_hubspot__email_campaign_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_campaign"], "unique_id": "model.hubspot_source.stg_hubspot__email_campaign", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_campaign.sql", "original_file_path": "models/stg_hubspot__email_campaign.sql", "name": "stg_hubspot__email_campaign", "alias": "stg_hubspot__email_campaign", "checksum": {"name": "sha256", "checksum": "d13056dfea036822ae4400b796b742196e648d1ae5aad273f005f3ab80ad525f"}, "tags": [], "refs": [["stg_hubspot__email_campaign_tmp"], ["stg_hubspot__email_campaign_tmp"]], "sources": [], "metrics": [], "description": "Each record represents an email campaign in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The app ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "The app name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "The ID of the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_name": {"name": "email_campaign_name", "description": "The name of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_sub_type": {"name": "email_campaign_sub_type", "description": "The email campaign sub-type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_subject": {"name": "email_campaign_subject", "description": "The subject of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_type": {"name": "email_campaign_type", "description": "The email campaign type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_included": {"name": "num_included", "description": "The number of messages included as part of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_queued": {"name": "num_queued", "description": "The number of messages queued as part of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_campaign.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.698687, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_campaign_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    app_id\n    \n as \n    \n    app_id\n    \n, \n    \n    \n    app_name\n    \n as \n    \n    app_name\n    \n, \n    \n    \n    content_id\n    \n as \n    \n    content_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    num_included\n    \n as \n    \n    num_included\n    \n, \n    \n    \n    num_queued\n    \n as \n    \n    num_queued\n    \n, \n    \n    \n    sub_type\n    \n as \n    \n    sub_type\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        app_id,\n        app_name,\n        content_id,\n        id as email_campaign_id,\n        name as email_campaign_name,\n        num_included,\n        num_queued,\n        sub_type as email_campaign_sub_type,\n        subject as email_campaign_subject,\n        type as email_campaign_type\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_campaign"}, "model.hubspot_source.stg_hubspot__contact_property_history": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_property_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_property_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_property_history_tmp')),\n                staging_columns=get_contact_property_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        contact_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        change_timestamp, -- source field name = timestamp ; alias declared in macros/get_contact_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_property_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__contact_property_history_tmp", "model.hubspot_source.stg_hubspot__contact_property_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__contact_property_history"], "unique_id": "model.hubspot_source.stg_hubspot__contact_property_history", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__contact_property_history.sql", "original_file_path": "models/stg_hubspot__contact_property_history.sql", "name": "stg_hubspot__contact_property_history", "alias": "stg_hubspot__contact_property_history", "checksum": {"name": "sha256", "checksum": "a8d23acc70234b94d73d28123beb133a3cc33e9c32e345360744ccdf301a6fab"}, "tags": [], "refs": [["stg_hubspot__contact_property_history_tmp"], ["stg_hubspot__contact_property_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a change to contact record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_timestamp": {"name": "change_timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact_property_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.675064, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__contact_property_history_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    timestamp\n    \n as change_timestamp , \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        contact_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        change_timestamp, -- source field name = timestamp ; alias declared in macros/get_contact_property_history_columns.sql\n        value as new_value\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__contact_property_history"}, "model.hubspot_source.stg_hubspot__email_event_open": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_open_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_open_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_open_tmp')),\n                staging_columns=get_email_event_open_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        browser,\n        duration as duration_open,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_open_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_open_tmp", "model.hubspot_source.stg_hubspot__email_event_open_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_event_open"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_open", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_event_open.sql", "original_file_path": "models/stg_hubspot__email_event_open.sql", "name": "stg_hubspot__email_event_open", "alias": "stg_hubspot__email_event_open", "checksum": {"name": "sha256", "checksum": "d889037fe49d3d49be46e693b50f152013f882c31d692beb0af2cfc35d2b9ed4"}, "tags": [], "refs": [["stg_hubspot__email_event_open_tmp"], ["stg_hubspot__email_event_open_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a OPEN email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_open": {"name": "duration_open", "description": "If provided and nonzero, the approximate number of milliseconds the user had opened the email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_open.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.6903942, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_open_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    browser\n    \n as \n    \n    browser\n    \n, \n    \n    \n    duration\n    \n as \n    \n    duration\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    ip_address\n    \n as \n    \n    ip_address\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    user_agent\n    \n as \n    \n    user_agent\n    \n\n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        browser,\n        duration as duration_open,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_open"}, "model.hubspot_source.stg_hubspot__email_event_sent": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_sent_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_sent_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_sent_tmp')),\n                staging_columns=get_email_event_sent_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        bcc as bcc_emails,\n        cc as cc_emails,\n        from_email, -- source field name = from ; alias declared in macros/get_email_event_sent_columns.sql\n        id as event_id,\n        reply_to as reply_to_email,\n        subject as email_subject\n    from macro\n    \n)\n\nselect *\nfrom fields", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_sent_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_sent_tmp", "model.hubspot_source.stg_hubspot__email_event_sent_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_event_sent"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_sent", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_event_sent.sql", "original_file_path": "models/stg_hubspot__email_event_sent.sql", "name": "stg_hubspot__email_event_sent", "alias": "stg_hubspot__email_event_sent", "checksum": {"name": "sha256", "checksum": "e0b1945790da78fb8a5e20d8451e8d5cd2fc3f5183e1e8deb2406c12c9f4d8c0"}, "tags": [], "refs": [["stg_hubspot__email_event_sent_tmp"], ["stg_hubspot__email_event_sent_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a SENT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bcc_emails": {"name": "bcc_emails", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reply_to_email": {"name": "reply_to_email", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email_event_sent.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541349.692558, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_sent_tmp\n\n), macro as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bcc\n    \n as \n    \n    bcc\n    \n, \n    \n    \n    cc\n    \n as \n    \n    cc\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    reply_to\n    \n as \n    \n    reply_to\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n        \n            \n            \"FROM\"\n            \n        \n    \n as from_email \n\n\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        bcc as bcc_emails,\n        cc as cc_emails,\n        from_email, -- source field name = from ; alias declared in macros/get_email_event_sent_columns.sql\n        id as event_id,\n        reply_to as reply_to_email,\n        subject as email_subject\n    from macro\n    \n)\n\nselect *\nfrom fields", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_sent"}, "model.hubspot_source.stg_hubspot__contact_property_history_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_property_enabled'])) }}\n\nselect *\nfrom {{ var('contact_property_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.contact_property_history"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_property_history_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__contact_property_history_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__contact_property_history_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_property_history_tmp.sql", "name": "stg_hubspot__contact_property_history_tmp", "alias": "stg_hubspot__contact_property_history_tmp", "checksum": {"name": "sha256", "checksum": "94e046ad79ff164894e3d2ee9fa6d094236277d5e4eb61c16ba48a454a9d1092"}, "tags": [], "refs": [], "sources": [["hubspot", "contact_property_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_property_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.571722, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.contact_property_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__contact_property_history_tmp"}, "model.hubspot_source.stg_hubspot__email_event_dropped_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_dropped_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_dropped') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.email_event_dropped"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_dropped_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_dropped_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_event_dropped_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_dropped_tmp.sql", "name": "stg_hubspot__email_event_dropped_tmp", "alias": "stg_hubspot__email_event_dropped_tmp", "checksum": {"name": "sha256", "checksum": "6ea29cc5169d736f3d306ada0e68c21d47fdffaadf1d92fa7e63df762b71c67c"}, "tags": [], "refs": [], "sources": [["hubspot", "email_event_dropped"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_dropped_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.574799, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.email_event_dropped", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_dropped_tmp"}, "model.hubspot_source.stg_hubspot__email_event_sent_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_sent_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_sent') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.email_event_sent"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_sent_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_sent_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_event_sent_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_sent_tmp.sql", "name": "stg_hubspot__email_event_sent_tmp", "alias": "stg_hubspot__email_event_sent_tmp", "checksum": {"name": "sha256", "checksum": "c755ee8e2ade057381ab3f7264b0aff04fb1e666940b91bbc35d9dab8f6c79df"}, "tags": [], "refs": [], "sources": [["hubspot", "email_event_sent"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_sent_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.577884, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.email_event_sent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_sent_tmp"}, "model.hubspot_source.stg_hubspot__deal_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect *\nfrom {{ var('deal') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__deal_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__deal_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_tmp.sql", "name": "stg_hubspot__deal_tmp", "alias": "stg_hubspot__deal_tmp", "checksum": {"name": "sha256", "checksum": "124a98f73b4fa274b33cb876e1627e3bd328f16b00633a8af0904bd05a1eaf7e"}, "tags": [], "refs": [], "sources": [["hubspot", "deal"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.5816069, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.deal", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_tmp"}, "model.hubspot_source.stg_hubspot__deal_contact_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_contact_enabled'])) }}\n\nselect *\nfrom {{ var('deal_contact') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal_contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_contact_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__deal_contact_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__deal_contact_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_contact_tmp.sql", "name": "stg_hubspot__deal_contact_tmp", "alias": "stg_hubspot__deal_contact_tmp", "checksum": {"name": "sha256", "checksum": "d428077a4a1b950402d8fcb4f46de1fccf04bbef6a7274dc35f1a2f3a25d5688"}, "tags": [], "refs": [], "sources": [["hubspot", "deal_contact"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_contact_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.5899599, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.deal_contact", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_contact_tmp"}, "model.hubspot_source.stg_hubspot__contact_list_member_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_member_enabled'])) }}\n\nselect *\nfrom {{ var('contact_list_member') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.contact_list_member"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_list_member_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__contact_list_member_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__contact_list_member_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_list_member_tmp.sql", "name": "stg_hubspot__contact_list_member_tmp", "alias": "stg_hubspot__contact_list_member_tmp", "checksum": {"name": "sha256", "checksum": "c5f4b38033f7e73b8c560ae9b10c959ab53636db77febaea2878864bfcbd47e8"}, "tags": [], "refs": [], "sources": [["hubspot", "contact_list_member"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_list_member_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.593377, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.contact_list_member", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__contact_list_member_tmp"}, "model.hubspot_source.stg_hubspot__owner_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_owner_enabled'])) }}\n\nselect *\nfrom {{ var('owner') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.owner"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__owner_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__owner_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__owner_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__owner_tmp.sql", "name": "stg_hubspot__owner_tmp", "alias": "stg_hubspot__owner_tmp", "checksum": {"name": "sha256", "checksum": "8b06d5fa0a2f2102fcc69868ed48699af552e012171048d5c9afccc2e3074859"}, "tags": [], "refs": [], "sources": [["hubspot", "owner"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__owner_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.596609, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.owner", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__owner_tmp"}, "model.hubspot_source.stg_hubspot__deal_stage_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect * \nfrom {{ var('deal_stage') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal_stage"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_stage_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__deal_stage_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__deal_stage_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_stage_tmp.sql", "name": "stg_hubspot__deal_stage_tmp", "alias": "stg_hubspot__deal_stage_tmp", "checksum": {"name": "sha256", "checksum": "ec97e0066c2090f43c12562580a53d3de824e0c1408f86af9f1279119eec35e9"}, "tags": [], "refs": [], "sources": [["hubspot", "deal_stage"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_stage_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.6006348, "compiled_sql": "\n\nselect * \nfrom raw.hubspot.deal_stage", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_stage_tmp"}, "model.hubspot_source.stg_hubspot__deal_pipeline_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect *\nfrom {{ var('deal_pipeline') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal_pipeline"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_pipeline_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__deal_pipeline_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__deal_pipeline_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_pipeline_tmp.sql", "name": "stg_hubspot__deal_pipeline_tmp", "alias": "stg_hubspot__deal_pipeline_tmp", "checksum": {"name": "sha256", "checksum": "5ec1c0f28d2a898b8e0d02a04aba6b9721c90b43e037d327e43c6c327cc0fb8f"}, "tags": [], "refs": [], "sources": [["hubspot", "deal_pipeline"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_pipeline_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.604175, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.deal_pipeline", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_pipeline_tmp"}, "model.hubspot_source.stg_hubspot__engagement_company_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_company_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_company') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.engagement_company"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_company_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_company_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__engagement_company_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_company_tmp.sql", "name": "stg_hubspot__engagement_company_tmp", "alias": "stg_hubspot__engagement_company_tmp", "checksum": {"name": "sha256", "checksum": "d3e3765d608bc56f3bc07549accc1026e5d5ca93d650eb66d5522d4ad33bf3bc"}, "tags": [], "refs": [], "sources": [["hubspot", "engagement_company"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_company_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.617569, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.engagement_company", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_company_tmp"}, "model.hubspot_source.stg_hubspot__contact_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_enabled'])) }}\n\nselect *\nfrom {{ var('contact') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__contact_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__contact_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_tmp.sql", "name": "stg_hubspot__contact_tmp", "alias": "stg_hubspot__contact_tmp", "checksum": {"name": "sha256", "checksum": "17272cbcc9301857a35b6df8ea8a8426315db16044249a83a6dee8a13bda051d"}, "tags": [], "refs": [], "sources": [["hubspot", "contact"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.621175, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.contact", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__contact_tmp"}, "model.hubspot_source.stg_hubspot__email_event_status_change_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_status_change_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_status_change') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.email_event_status_change"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_status_change_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_status_change_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_event_status_change_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_status_change_tmp.sql", "name": "stg_hubspot__email_event_status_change_tmp", "alias": "stg_hubspot__email_event_status_change_tmp", "checksum": {"name": "sha256", "checksum": "4834d0413d972cb9b335efa782358855be7be2c4b7f70f2473ae5b13dda09c08"}, "tags": [], "refs": [], "sources": [["hubspot", "email_event_status_change"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_status_change_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.624566, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.email_event_status_change", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_status_change_tmp"}, "model.hubspot_source.stg_hubspot__engagement_note_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_note_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_note') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.engagement_note"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_note_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_note_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__engagement_note_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_note_tmp.sql", "name": "stg_hubspot__engagement_note_tmp", "alias": "stg_hubspot__engagement_note_tmp", "checksum": {"name": "sha256", "checksum": "bd3aa3ac5c07c206010b172fb2049c3724cdea3cc838cd1b536071f88543b79d"}, "tags": [], "refs": [], "sources": [["hubspot", "engagement_note"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_note_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.628125, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.engagement_note", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_note_tmp"}, "model.hubspot_source.stg_hubspot__deal_company_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled','hubspot_deal_company_enabled'])) }}\n\nselect *\nfrom {{ var('deal_company') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal_company"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_company_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__deal_company_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__deal_company_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_company_tmp.sql", "name": "stg_hubspot__deal_company_tmp", "alias": "stg_hubspot__deal_company_tmp", "checksum": {"name": "sha256", "checksum": "dd18ea003d261853bceba6b07f5f614d9719b423a1d54fbc0305590ca499d9c5"}, "tags": [], "refs": [], "sources": [["hubspot", "deal_company"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_company_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.635967, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.deal_company", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_company_tmp"}, "model.hubspot_source.stg_hubspot__engagement_deal_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_deal_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_deal') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.engagement_deal"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_deal_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_deal_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__engagement_deal_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_deal_tmp.sql", "name": "stg_hubspot__engagement_deal_tmp", "alias": "stg_hubspot__engagement_deal_tmp", "checksum": {"name": "sha256", "checksum": "700d960779a56df2619e3c72d555fd04f536d5cec3459618b2ca3e3ac5cfe25b"}, "tags": [], "refs": [], "sources": [["hubspot", "engagement_deal"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_deal_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.643009, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.engagement_deal", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_deal_tmp"}, "model.hubspot_source.stg_hubspot__company_property_history_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nselect *\nfrom {{ var('company_property_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.company_property_history"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__company_property_history_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__company_property_history_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__company_property_history_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__company_property_history_tmp.sql", "name": "stg_hubspot__company_property_history_tmp", "alias": "stg_hubspot__company_property_history_tmp", "checksum": {"name": "sha256", "checksum": "c63579bdf13286d3fef53cd3fc735d3e299f41623a8d2bb19c63bb5d1195df93"}, "tags": [], "refs": [], "sources": [["hubspot", "company_property_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__company_property_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.6509361, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.company_property_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__company_property_history_tmp"}, "model.hubspot_source.stg_hubspot__email_event_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nselect *\nfrom {{ var('email_event') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.email_event"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_event_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_tmp.sql", "name": "stg_hubspot__email_event_tmp", "alias": "stg_hubspot__email_event_tmp", "checksum": {"name": "sha256", "checksum": "bd2e785786c99cc9fca040403c1a44c02605d01c2fb1f8828631b22218761fcb"}, "tags": [], "refs": [], "sources": [["hubspot", "email_event"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.654321, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.email_event", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_tmp"}, "model.hubspot_source.stg_hubspot__company_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nselect *\nfrom {{ var('company') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.company"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__company_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__company_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__company_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__company_tmp.sql", "name": "stg_hubspot__company_tmp", "alias": "stg_hubspot__company_tmp", "checksum": {"name": "sha256", "checksum": "71e14b733d49851913c34d2a6a973e8e696bb05d7779e51cffdae2718fc65059"}, "tags": [], "refs": [], "sources": [["hubspot", "company"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__company_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.657873, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.company", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__company_tmp"}, "model.hubspot_source.stg_hubspot__email_event_click_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_click_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_click') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.email_event_click"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_click_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_click_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_event_click_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_click_tmp.sql", "name": "stg_hubspot__email_event_click_tmp", "alias": "stg_hubspot__email_event_click_tmp", "checksum": {"name": "sha256", "checksum": "6b724be03dd8dbaec06b9515c1143a84c95d5b3a4c7a674cb6544cefb449bf74"}, "tags": [], "refs": [], "sources": [["hubspot", "email_event_click"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_click_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.661381, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.email_event_click", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_click_tmp"}, "model.hubspot_source.stg_hubspot__engagement_contact_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_contact_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_contact') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.engagement_contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_contact_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_contact_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__engagement_contact_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_contact_tmp.sql", "name": "stg_hubspot__engagement_contact_tmp", "alias": "stg_hubspot__engagement_contact_tmp", "checksum": {"name": "sha256", "checksum": "68896f07089718c2878b9e71accc1f75d6d35516b996a7be2c0541d6b13c4508"}, "tags": [], "refs": [], "sources": [["hubspot", "engagement_contact"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_contact_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.6655538, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.engagement_contact", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_contact_tmp"}, "model.hubspot_source.stg_hubspot__contact_list_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_enabled'])) }}\n\nselect *\nfrom {{ var('contact_list') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.contact_list"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_list_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__contact_list_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__contact_list_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_list_tmp.sql", "name": "stg_hubspot__contact_list_tmp", "alias": "stg_hubspot__contact_list_tmp", "checksum": {"name": "sha256", "checksum": "fd9af8e7a35d01dc575bf5c19d751d25794d7acb7d5bb1463e5caeab72d857a2"}, "tags": [], "refs": [], "sources": [["hubspot", "contact_list"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__contact_list_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.669125, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.contact_list", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__contact_list_tmp"}, "model.hubspot_source.stg_hubspot__engagement_meeting_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_email_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_meeting') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.engagement_meeting"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_meeting_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_meeting_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__engagement_meeting_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_meeting_tmp.sql", "name": "stg_hubspot__engagement_meeting_tmp", "alias": "stg_hubspot__engagement_meeting_tmp", "checksum": {"name": "sha256", "checksum": "a58491a8d1b6fd5215742826e225c96c32641c971ca4471fc186d15baebe0069"}, "tags": [], "refs": [], "sources": [["hubspot", "engagement_meeting"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_meeting_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.6725178, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.engagement_meeting", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_meeting_tmp"}, "model.hubspot_source.stg_hubspot__engagement_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled'])) }}\n\nselect *\nfrom {{ var('engagement') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.engagement"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__engagement_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_tmp.sql", "name": "stg_hubspot__engagement_tmp", "alias": "stg_hubspot__engagement_tmp", "checksum": {"name": "sha256", "checksum": "5ac51429780d9f7160a9e98ac3c4735e92321b47835e9793189c928bf9299da7"}, "tags": [], "refs": [], "sources": [["hubspot", "engagement"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.6760519, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.engagement", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_tmp"}, "model.hubspot_source.stg_hubspot__email_event_delivered_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_delivered_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_delivered') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.email_event_delivered"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_delivered_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_delivered_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_event_delivered_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_delivered_tmp.sql", "name": "stg_hubspot__email_event_delivered_tmp", "alias": "stg_hubspot__email_event_delivered_tmp", "checksum": {"name": "sha256", "checksum": "f0d72c7ce2193ae96b6a3b5c317755bc9e53a598f3a1668496d4ded7b42dce2b"}, "tags": [], "refs": [], "sources": [["hubspot", "email_event_delivered"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_delivered_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.679543, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.email_event_delivered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_delivered_tmp"}, "model.hubspot_source.stg_hubspot__engagement_email_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_email_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_email') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.engagement_email"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_email_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_email_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__engagement_email_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_email_tmp.sql", "name": "stg_hubspot__engagement_email_tmp", "alias": "stg_hubspot__engagement_email_tmp", "checksum": {"name": "sha256", "checksum": "6b83154fa1de07667ec47ca47bb8be3450fb5ad4bb983f86656630df3fdbb8a9"}, "tags": [], "refs": [], "sources": [["hubspot", "engagement_email"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_email_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.6837602, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.engagement_email", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_email_tmp"}, "model.hubspot_source.stg_hubspot__email_event_bounce_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_bounce_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_bounce') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.email_event_bounce"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_bounce_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_bounce_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_event_bounce_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_bounce_tmp.sql", "name": "stg_hubspot__email_event_bounce_tmp", "alias": "stg_hubspot__email_event_bounce_tmp", "checksum": {"name": "sha256", "checksum": "5cf2f855ec70b4296cb2a2c12a040e5eaef869d317876a4979e9f1671ebb2ca3"}, "tags": [], "refs": [], "sources": [["hubspot", "email_event_bounce"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_bounce_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.698299, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.email_event_bounce", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_bounce_tmp"}, "model.hubspot_source.stg_hubspot__engagement_call_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_call_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_call') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.engagement_call"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_call_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_call_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__engagement_call_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_call_tmp.sql", "name": "stg_hubspot__engagement_call_tmp", "alias": "stg_hubspot__engagement_call_tmp", "checksum": {"name": "sha256", "checksum": "69b0b24222e906148931a0ccf9ff6b546b8dba794fbab4e375e4b787d1e93110"}, "tags": [], "refs": [], "sources": [["hubspot", "engagement_call"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_call_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.701718, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.engagement_call", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_call_tmp"}, "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect *\nfrom {{ var('deal_pipeline_stage') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal_pipeline_stage"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_pipeline_stage_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__deal_pipeline_stage_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_pipeline_stage_tmp.sql", "name": "stg_hubspot__deal_pipeline_stage_tmp", "alias": "stg_hubspot__deal_pipeline_stage_tmp", "checksum": {"name": "sha256", "checksum": "1600e72fdab295282f0c932e6476a36d14de2beeddba11eef56704c5e19dfece"}, "tags": [], "refs": [], "sources": [["hubspot", "deal_pipeline_stage"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_pipeline_stage_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.708789, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.deal_pipeline_stage", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp"}, "model.hubspot_source.stg_hubspot__engagement_task_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_task_enabled'])) }}\n\nselect *\nfrom {{ var('engagement_task') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.engagement_task"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__engagement_task_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__engagement_task_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__engagement_task_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__engagement_task_tmp.sql", "name": "stg_hubspot__engagement_task_tmp", "alias": "stg_hubspot__engagement_task_tmp", "checksum": {"name": "sha256", "checksum": "77c59970e529c5fbcbe4aa4d15d0b2bee88de8ba394efb53a0a998b722e941bb"}, "tags": [], "refs": [], "sources": [["hubspot", "engagement_task"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__engagement_task_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.712189, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.engagement_task", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__engagement_task_tmp"}, "model.hubspot_source.stg_hubspot__email_event_open_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_open_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_open') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.email_event_open"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_open_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_open_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_event_open_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_open_tmp.sql", "name": "stg_hubspot__email_event_open_tmp", "alias": "stg_hubspot__email_event_open_tmp", "checksum": {"name": "sha256", "checksum": "f3ada0551ce1bab0ca3302c0464e2d17c8bbe5f4f74daccdf0bf84ee5fcd0a81"}, "tags": [], "refs": [], "sources": [["hubspot", "email_event_open"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_open_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.71648, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.email_event_open", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_open_tmp"}, "model.hubspot_source.stg_hubspot__deal_property_history_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nselect *\nfrom {{ var('deal_property_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.deal_property_history"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__deal_property_history_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__deal_property_history_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__deal_property_history_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__deal_property_history_tmp.sql", "name": "stg_hubspot__deal_property_history_tmp", "alias": "stg_hubspot__deal_property_history_tmp", "checksum": {"name": "sha256", "checksum": "168adec4f1836e664cfd6ae9d122a38bfd62840a758c7ade3ff13e7373bbfb31"}, "tags": [], "refs": [], "sources": [["hubspot", "deal_property_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__deal_property_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.719925, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.deal_property_history", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__deal_property_history_tmp"}, "model.hubspot_source.stg_hubspot__email_event_deferred_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_deferred_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_deferred') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.email_event_deferred"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_deferred_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_deferred_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_event_deferred_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_deferred_tmp.sql", "name": "stg_hubspot__email_event_deferred_tmp", "alias": "stg_hubspot__email_event_deferred_tmp", "checksum": {"name": "sha256", "checksum": "49cc95430e8375d3d61ea116f5e866c90d1e094df57a2afc11aaa879856003af"}, "tags": [], "refs": [], "sources": [["hubspot", "email_event_deferred"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_event_deferred_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.7233841, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.email_event_deferred", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_event_deferred_tmp"}, "model.hubspot_source.stg_hubspot__email_campaign_tmp": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nselect *\nfrom {{ var('email_campaign') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["source.hubspot_source.hubspot.email_campaign"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_campaign_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_campaign_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_campaign_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_campaign_tmp.sql", "name": "stg_hubspot__email_campaign_tmp", "alias": "stg_hubspot__email_campaign_tmp", "checksum": {"name": "sha256", "checksum": "82140dbdec643b7ca1159e66138817a6e05cacce7ed8ddefdd9934f40f6afc38"}, "tags": [], "refs": [], "sources": [["hubspot", "email_campaign"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/tmp/stg_hubspot__email_campaign_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": true}, "created_at": 1661541348.726902, "compiled_sql": "\n\nselect *\nfrom raw.hubspot.email_campaign", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot_source.stg_hubspot__email_campaign_tmp"}, "model.linkedin_pages_source.stg_linkedin_pages__share_statistic": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_pages__share_statistic_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_pages__share_statistic_tmp')),\n                staging_columns=get_share_statistic_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='linkedin_pages_union_schemas', \n            union_database_variable='linkedin_pages_union_databases') \n        }}\n    \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id as share_statistic_id,\n        _fivetran_synced,\n        _organization_entity_urn as organization_entity_urn,\n        _share_entity_urn as share_entity_urn,\n        click_count,\n        comment_count,\n        engagement,\n        impression_count,\n        like_count,\n        share_count,\n        source_relation\n    from fields\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_pages_source.get_share_statistic_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp", "model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages_source", "fqn": ["linkedin_pages_source", "stg_linkedin_pages__share_statistic"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__share_statistic", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "stg_linkedin_pages__share_statistic.sql", "original_file_path": "models/stg_linkedin_pages__share_statistic.sql", "name": "stg_linkedin_pages__share_statistic", "alias": "stg_linkedin_pages__share_statistic", "checksum": {"name": "sha256", "checksum": "16898a44f4f3f9dc737f9f6d64ef038741703de06f67cf14dc22b8d8ece0cf8d"}, "tags": [], "refs": [["stg_linkedin_pages__share_statistic_tmp"], ["stg_linkedin_pages__share_statistic_tmp"]], "sources": [], "metrics": [], "description": "Each record represents the performance of a Linkedin share.", "columns": {"share_statistic_id": {"name": "share_statistic_id", "description": "The Fivetran ID of the record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_entity_urn": {"name": "organization_entity_urn", "description": "The organizational entity URN for which the statistics represents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_entity_urn": {"name": "share_entity_urn", "description": "The share URN for describing individual share statistics. Is blank for aggregate share statistics.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_count": {"name": "click_count", "description": "Number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment_count": {"name": "comment_count", "description": "Number of comments.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement": {"name": "engagement", "description": "Number of organic clicks, likes, comments, and shares over impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_count": {"name": "impression_count", "description": "Number of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "like_count": {"name": "like_count", "description": "Number of likes. This field can become negative when members who liked a sponsored share later unlike it. The like is not counted since it is not organic, but the unlike is counted as organic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_count": {"name": "share_count", "description": "Number of shares.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_pages_source://models/stg_linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages__share_statistic.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages_source", "materialized": "table"}, "created_at": 1661541349.8565571, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _organization_entity_urn\n    \n as \n    \n    _organization_entity_urn\n    \n, \n    \n    \n    _share_entity_urn\n    \n as \n    \n    _share_entity_urn\n    \n, \n    \n    \n    click_count\n    \n as \n    \n    click_count\n    \n, \n    \n    \n    comment_count\n    \n as \n    \n    comment_count\n    \n, \n    \n    \n    engagement\n    \n as \n    \n    engagement\n    \n, \n    \n    \n    impression_count\n    \n as \n    \n    impression_count\n    \n, \n    \n    \n    like_count\n    \n as \n    \n    like_count\n    \n, \n    \n    \n    share_count\n    \n as \n    \n    share_count\n    \n\n\n\n\n        \n\n\n, cast('' as \n    varchar\n) as source_relation\n\n\n\n    \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id as share_statistic_id,\n        _fivetran_synced,\n        _organization_entity_urn as organization_entity_urn,\n        _share_entity_urn as share_entity_urn,\n        click_count,\n        comment_count,\n        engagement,\n        impression_count,\n        like_count,\n        share_count,\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages_source.stg_linkedin_pages__share_statistic"}, "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_pages__ugc_post_share_media_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_pages__ugc_post_share_media_tmp')),\n                staging_columns=get_ugc_post_share_content_media_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='linkedin_pages_union_schemas', \n            union_database_variable='linkedin_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        description_attributes,\n        description_inferred_locale,\n        description_text,\n        landing_page_title,\n        landing_page_url,\n        last_modified_time as last_modified_timestamp,\n        media,\n        original_url,\n        status,\n        thumbnails,\n        title_attributes,\n        title_inferred_locale,\n        title_text,\n        ugc_post_id,\n        source_relation\n    from fields\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_pages_source.get_ugc_post_share_content_media_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages_source", "fqn": ["linkedin_pages_source", "stg_linkedin_pages__ugc_post_share_content_media"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "stg_linkedin_pages__ugc_post_share_content_media.sql", "original_file_path": "models/stg_linkedin_pages__ugc_post_share_content_media.sql", "name": "stg_linkedin_pages__ugc_post_share_content_media", "alias": "stg_linkedin_pages__ugc_post_share_content_media", "checksum": {"name": "sha256", "checksum": "9cb6ba17713dd14430348707a99ea06a3f958cd79c9d799365b170f40949c846"}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_share_media_tmp"], ["stg_linkedin_pages__ugc_post_share_media_tmp"]], "sources": [], "metrics": [], "description": "Each record represents content media shared as part of a UGC post.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_attributes": {"name": "description_attributes", "description": "User generated attributes in the text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_inferred_locale": {"name": "description_inferred_locale", "description": "The locale that may have be inferred for this text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_text": {"name": "description_text", "description": "The text content that may be attributed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page_title": {"name": "landing_page_title", "description": "If present, this content entity will be rendered as a CTA with landingPageTitle as the CTA text and landingPageUrl as the click through url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page_url": {"name": "landing_page_url", "description": "The click through url. Maximum length is 2000 characters.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_timestamp": {"name": "last_modified_timestamp", "description": "The timestamp when the content was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media": {"name": "media", "description": "The URN of the media shared.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_url": {"name": "original_url", "description": "URL whose content is summarized", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the availability of this media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thumbnails": {"name": "thumbnails", "description": "The thumbnail saved from the ingestion of this article.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_attributes": {"name": "title_attributes", "description": "User generated attributes in the text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_inferred_locale": {"name": "title_inferred_locale", "description": "The locale that may have be inferred for this text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_text": {"name": "title_text", "description": "The text content that may be attributed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "The ID of the UGC post record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_pages_source://models/stg_linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages__ugc_post_share_content_media.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages_source", "materialized": "table"}, "created_at": 1661541349.862598, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description_attributes\n    \n as \n    \n    description_attributes\n    \n, \n    \n    \n    description_inferred_locale\n    \n as \n    \n    description_inferred_locale\n    \n, \n    \n    \n    description_text\n    \n as \n    \n    description_text\n    \n, \n    \n    \n    landing_page_title\n    \n as \n    \n    landing_page_title\n    \n, \n    \n    \n    landing_page_url\n    \n as \n    \n    landing_page_url\n    \n, \n    \n    \n    last_modified_time\n    \n as \n    \n    last_modified_time\n    \n, \n    \n    \n    media\n    \n as \n    \n    media\n    \n, \n    \n    \n    original_url\n    \n as \n    \n    original_url\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    thumbnails\n    \n as \n    \n    thumbnails\n    \n, \n    \n    \n    title_attributes\n    \n as \n    \n    title_attributes\n    \n, \n    \n    \n    title_inferred_locale\n    \n as \n    \n    title_inferred_locale\n    \n, \n    \n    \n    title_text\n    \n as \n    \n    title_text\n    \n, \n    \n    \n    ugc_post_id\n    \n as \n    \n    ugc_post_id\n    \n\n\n\n\n        \n\n\n, cast('' as \n    varchar\n) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        description_attributes,\n        description_inferred_locale,\n        description_text,\n        landing_page_title,\n        landing_page_url,\n        last_modified_time as last_modified_timestamp,\n        media,\n        original_url,\n        status,\n        thumbnails,\n        title_attributes,\n        title_inferred_locale,\n        title_text,\n        ugc_post_id,\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media"}, "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_pages__ugc_post_history_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_pages__ugc_post_history_tmp')),\n                staging_columns=get_ugc_post_history_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='linkedin_pages_union_schemas', \n            union_database_variable='linkedin_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        author as post_author,\n        created_actor,\n        created_time as created_timestamp,\n        deleted_actor,\n        deleted_time as deleted_timestamp,\n        first_published_at as first_published_timestamp,\n        case when lower(id) like '%urn:li:share:%' \n                then replace(id, 'urn:li:share:', '')\n            when lower(id) like '%urn:li:ugcpost:%'\n                then replace(lower(id), 'urn:li:ugcpost:', '')\n            else id end as ugc_post_id,\n        id as ugc_post_urn,\n        -- This generates an 'embed' URL. I can't get normal URLs working.\n        {{ dbt_utils.concat([\"'https://www.linkedin.com/embed/feed/update/'\", \"id\"]) }} as post_url,\n        last_modified_actor,\n        last_modified_time as last_modified_timestamp,\n        lifecycle_state,\n        specific_content_primary_landing_page_url,\n        specific_content_share_commentary_attributes,\n        specific_content_share_commentary_inferred_locale,\n        specific_content_share_commentary_text,\n        specific_content_share_media_category,\n        target_audience_targeted_entities,\n        version_tag,\n        visibility,\n        source_relation\n    from fields\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_pages_source.get_ugc_post_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt_utils.concat"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages_source", "fqn": ["linkedin_pages_source", "stg_linkedin_pages__ugc_post_history"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "stg_linkedin_pages__ugc_post_history.sql", "original_file_path": "models/stg_linkedin_pages__ugc_post_history.sql", "name": "stg_linkedin_pages__ugc_post_history", "alias": "stg_linkedin_pages__ugc_post_history", "checksum": {"name": "sha256", "checksum": "03428959f4205ed4b7d14baa5ead741a439842a82dac89bcd3cea672e310296b"}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_history_tmp"], ["stg_linkedin_pages__ugc_post_history_tmp"]], "sources": [], "metrics": [], "description": "Each record represents a version of a UGC post.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_author": {"name": "post_author", "description": "Urn of the author of this content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_actor": {"name": "created_actor", "description": "User who created the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "Timestamp when the content was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_actor": {"name": "deleted_actor", "description": "User who deleted the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_timestamp": {"name": "deleted_timestamp", "description": "Timestamp when the content was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_published_timestamp": {"name": "first_published_timestamp", "description": "The time at which this content was first published.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "Unique id for this object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_actor": {"name": "last_modified_actor", "description": "User who last modified the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_timestamp": {"name": "last_modified_timestamp", "description": "Timestamp when the content was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_url": {"name": "post_url", "description": "Url of the post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifecycle_state": {"name": "lifecycle_state", "description": "The current state of the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_primary_landing_page_url": {"name": "specific_content_primary_landing_page_url", "description": "The main landing page URL of the share.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_attributes": {"name": "specific_content_share_commentary_attributes", "description": "User generated attributes in the text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_inferred_locale": {"name": "specific_content_share_commentary_inferred_locale", "description": "The locale that may have be inferred for this text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_text": {"name": "specific_content_share_commentary_text", "description": "The text content that may be attributed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_media_category": {"name": "specific_content_share_media_category", "description": "The type of media contained within the media field of this object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_audience_targeted_entities": {"name": "target_audience_targeted_entities", "description": "Intended audience or best fit audiences for this content as decided by the owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "Version tag of the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visibility": {"name": "visibility", "description": "Visibility restrictions on content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_pages_source://models/stg_linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages__ugc_post_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages_source", "materialized": "table"}, "created_at": 1661541349.8598652, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    author\n    \n as \n    \n    author\n    \n, \n    \n    \n    client_application\n    \n as \n    \n    client_application\n    \n, \n    \n    \n    container_entity\n    \n as \n    \n    container_entity\n    \n, \n    \n    \n    content_certification_record\n    \n as \n    \n    content_certification_record\n    \n, \n    \n    \n    created_actor\n    \n as \n    \n    created_actor\n    \n, \n    \n    \n    created_time\n    \n as \n    \n    created_time\n    \n, \n    \n    \n    deleted_actor\n    \n as \n    \n    deleted_actor\n    \n, \n    \n    \n    deleted_time\n    \n as \n    \n    deleted_time\n    \n, \n    \n    \n    distribution_distributed_via_follow_feed\n    \n as \n    \n    distribution_distributed_via_follow_feed\n    \n, \n    \n    \n    distribution_external_distribution_channels\n    \n as \n    \n    distribution_external_distribution_channels\n    \n, \n    \n    \n    distribution_feed_distribution\n    \n as \n    \n    distribution_feed_distribution\n    \n, \n    \n    \n    first_published_at\n    \n as \n    \n    first_published_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_modified_actor\n    \n as \n    \n    last_modified_actor\n    \n, \n    \n    \n    last_modified_time\n    \n as \n    \n    last_modified_time\n    \n, \n    \n    \n    lifecycle_state\n    \n as \n    \n    lifecycle_state\n    \n, \n    \n    \n    response_context_parent\n    \n as \n    \n    response_context_parent\n    \n, \n    \n    \n    response_context_root\n    \n as \n    \n    response_context_root\n    \n, \n    \n    \n    specific_content_primary_landing_page_url\n    \n as \n    \n    specific_content_primary_landing_page_url\n    \n, \n    \n    \n    specific_content_share_commentary_attributes\n    \n as \n    \n    specific_content_share_commentary_attributes\n    \n, \n    \n    \n    specific_content_share_commentary_inferred_locale\n    \n as \n    \n    specific_content_share_commentary_inferred_locale\n    \n, \n    \n    \n    specific_content_share_commentary_text\n    \n as \n    \n    specific_content_share_commentary_text\n    \n, \n    \n    \n    specific_content_share_media_category\n    \n as \n    \n    specific_content_share_media_category\n    \n, \n    \n    \n    target_audience_targeted_entities\n    \n as \n    \n    target_audience_targeted_entities\n    \n, \n    \n    \n    version_tag\n    \n as \n    \n    version_tag\n    \n, \n    \n    \n    visibility\n    \n as \n    \n    visibility\n    \n\n\n\n\n        \n\n\n, cast('' as \n    varchar\n) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        author as post_author,\n        created_actor,\n        created_time as created_timestamp,\n        deleted_actor,\n        deleted_time as deleted_timestamp,\n        first_published_at as first_published_timestamp,\n        case when lower(id) like '%urn:li:share:%' \n                then replace(id, 'urn:li:share:', '')\n            when lower(id) like '%urn:li:ugcpost:%'\n                then replace(lower(id), 'urn:li:ugcpost:', '')\n            else id end as ugc_post_id,\n        id as ugc_post_urn,\n        -- This generates an 'embed' URL. I can't get normal URLs working.\n        'https://www.linkedin.com/embed/feed/update/' || id as post_url,\n        last_modified_actor,\n        last_modified_time as last_modified_timestamp,\n        lifecycle_state,\n        specific_content_primary_landing_page_url,\n        specific_content_share_commentary_attributes,\n        specific_content_share_commentary_inferred_locale,\n        specific_content_share_commentary_text,\n        specific_content_share_media_category,\n        target_audience_targeted_entities,\n        version_tag,\n        visibility,\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_history"}, "model.linkedin_pages_source.stg_linkedin_pages__organization": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_pages__organization_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_pages__organization_tmp')),\n                staging_columns=get_organization_columns()\n            )\n        }}\n        \n        {{ fivetran_utils.source_relation(\n            union_schema_variable='linkedin_pages_union_schemas', \n            union_database_variable='linkedin_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as organization_id,\n        localized_name as organization_name,\n        source_relation\n    from fields\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_pages_source.get_organization_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__organization_tmp", "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages_source", "fqn": ["linkedin_pages_source", "stg_linkedin_pages__organization"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__organization", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "stg_linkedin_pages__organization.sql", "original_file_path": "models/stg_linkedin_pages__organization.sql", "name": "stg_linkedin_pages__organization", "alias": "stg_linkedin_pages__organization", "checksum": {"name": "sha256", "checksum": "3b6ee9e35cd1f43fe9b6cc47b4ec25a758bcdfbdb6513f6cac2f80bd20e8e3b2"}, "tags": [], "refs": [["stg_linkedin_pages__organization_tmp"], ["stg_linkedin_pages__organization_tmp"]], "sources": [], "metrics": [], "description": "Each record represents an organization.", "columns": {"organization_id": {"name": "organization_id", "description": "Unique id for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_localized": {"name": "name_localized", "description": "The localized name of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_preferred_locale_country": {"name": "name_preferred_locale_country", "description": "The preferred country of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_preferred_locale_language": {"name": "name_preferred_locale_language", "description": "The preferred language of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_pages_source://models/stg_linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages__organization.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages_source", "materialized": "table"}, "created_at": 1661541349.854655, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__organization_tmp\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    cover_photo_v_2_crop_info_height\n    \n as \n    \n    cover_photo_v_2_crop_info_height\n    \n, \n    \n    \n    cover_photo_v_2_crop_info_width\n    \n as \n    \n    cover_photo_v_2_crop_info_width\n    \n, \n    \n    \n    cover_photo_v_2_crop_info_x\n    \n as \n    \n    cover_photo_v_2_crop_info_x\n    \n, \n    \n    \n    cover_photo_v_2_crop_info_y\n    \n as \n    \n    cover_photo_v_2_crop_info_y\n    \n, \n    \n    \n    cover_photo_v_2_cropped\n    \n as \n    \n    cover_photo_v_2_cropped\n    \n, \n    \n    \n    cover_photo_v_2_original\n    \n as \n    \n    cover_photo_v_2_original\n    \n, \n    \n    \n    default_locale_country\n    \n as \n    \n    default_locale_country\n    \n, \n    \n    \n    default_locale_language\n    \n as \n    \n    default_locale_language\n    \n, \n    \n    \n    description_localized\n    \n as \n    \n    description_localized\n    \n, \n    \n    \n    description_preferred_locale_country\n    \n as \n    \n    description_preferred_locale_country\n    \n, \n    \n    \n    description_preferred_locale_language\n    \n as \n    \n    description_preferred_locale_language\n    \n, \n    \n    \n    founded_on_day\n    \n as \n    \n    founded_on_day\n    \n, \n    \n    \n    founded_on_month\n    \n as \n    \n    founded_on_month\n    \n, \n    \n    \n    founded_on_year\n    \n as \n    \n    founded_on_year\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    localized_description\n    \n as \n    \n    localized_description\n    \n, \n    \n    \n    localized_name\n    \n as \n    \n    localized_name\n    \n, \n    \n    \n    localized_website\n    \n as \n    \n    localized_website\n    \n, \n    \n    \n    logo_v_2_crop_info_height\n    \n as \n    \n    logo_v_2_crop_info_height\n    \n, \n    \n    \n    logo_v_2_crop_info_width\n    \n as \n    \n    logo_v_2_crop_info_width\n    \n, \n    \n    \n    logo_v_2_crop_info_x\n    \n as \n    \n    logo_v_2_crop_info_x\n    \n, \n    \n    \n    logo_v_2_crop_info_y\n    \n as \n    \n    logo_v_2_crop_info_y\n    \n, \n    \n    \n    logo_v_2_cropped\n    \n as \n    \n    logo_v_2_cropped\n    \n, \n    \n    \n    logo_v_2_original\n    \n as \n    \n    logo_v_2_original\n    \n, \n    \n    \n    name_localized\n    \n as \n    \n    name_localized\n    \n, \n    \n    \n    name_preferred_locale_country\n    \n as \n    \n    name_preferred_locale_country\n    \n, \n    \n    \n    name_preferred_locale_language\n    \n as \n    \n    name_preferred_locale_language\n    \n, \n    \n    \n    organization_status\n    \n as \n    \n    organization_status\n    \n, \n    \n    \n    organization_type\n    \n as \n    \n    organization_type\n    \n, \n    \n    \n    overview_photo_v_2_crop_info_height\n    \n as \n    \n    overview_photo_v_2_crop_info_height\n    \n, \n    \n    \n    overview_photo_v_2_crop_info_width\n    \n as \n    \n    overview_photo_v_2_crop_info_width\n    \n, \n    \n    \n    overview_photo_v_2_crop_info_x\n    \n as \n    \n    overview_photo_v_2_crop_info_x\n    \n, \n    \n    \n    overview_photo_v_2_crop_info_y\n    \n as \n    \n    overview_photo_v_2_crop_info_y\n    \n, \n    \n    \n    overview_photo_v_2_cropped\n    \n as \n    \n    overview_photo_v_2_cropped\n    \n, \n    \n    \n    overview_photo_v_2_original\n    \n as \n    \n    overview_photo_v_2_original\n    \n, \n    \n    \n    parent_relationship_parent_id\n    \n as \n    \n    parent_relationship_parent_id\n    \n, \n    \n    \n    parent_relationship_status\n    \n as \n    \n    parent_relationship_status\n    \n, \n    \n    \n    parent_relationship_type\n    \n as \n    \n    parent_relationship_type\n    \n, \n    \n    \n    primary_organization_type\n    \n as \n    \n    primary_organization_type\n    \n, \n    \n    \n    school_attributes_hierarchy_classification\n    \n as \n    \n    school_attributes_hierarchy_classification\n    \n, \n    \n    \n    school_attributes_legacy_school\n    \n as \n    \n    school_attributes_legacy_school\n    \n, \n    \n    \n    school_attributes_type\n    \n as \n    \n    school_attributes_type\n    \n, \n    \n    \n    school_attributes_year_level\n    \n as \n    \n    school_attributes_year_level\n    \n, \n    \n    \n    staff_count_range\n    \n as \n    \n    staff_count_range\n    \n, \n    \n    \n    vanity_name\n    \n as \n    \n    vanity_name\n    \n, \n    \n    \n    version_tag\n    \n as \n    \n    version_tag\n    \n, \n    \n    \n    website_localized\n    \n as \n    \n    website_localized\n    \n, \n    \n    \n    website_preferred_locale_country\n    \n as \n    \n    website_preferred_locale_country\n    \n, \n    \n    \n    website_preferred_locale_language\n    \n as \n    \n    website_preferred_locale_language\n    \n\n\n\n        \n        \n\n\n, cast('' as \n    varchar\n) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as organization_id,\n        localized_name as organization_name,\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages_source.stg_linkedin_pages__organization"}, "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_pages__ugc_post_share_statistic_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_pages__ugc_post_share_statistic_tmp')),\n                staging_columns=get_ugc_post_share_statistic_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='linkedin_pages_union_schemas', \n            union_database_variable='linkedin_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        share_statistic_id,\n        ugc_post_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_pages_source.get_ugc_post_share_statistic_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages_source", "fqn": ["linkedin_pages_source", "stg_linkedin_pages__ugc_post_share_statistic"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "stg_linkedin_pages__ugc_post_share_statistic.sql", "original_file_path": "models/stg_linkedin_pages__ugc_post_share_statistic.sql", "name": "stg_linkedin_pages__ugc_post_share_statistic", "alias": "stg_linkedin_pages__ugc_post_share_statistic", "checksum": {"name": "sha256", "checksum": "1477a90d38f616b119caf0a3d4c6c6a67d60b6b27d8501ce5da0dd3bf317986f"}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_share_statistic_tmp"], ["stg_linkedin_pages__ugc_post_share_statistic_tmp"]], "sources": [], "metrics": [], "description": "Mapping table for organizations and UGC posts.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_statistic_id": {"name": "share_statistic_id", "description": "Unique id for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "Unique id for the UGC post", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_pages_source://models/stg_linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages__ugc_post_share_statistic.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages_source", "materialized": "table"}, "created_at": 1661541349.8633401, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    share_statistic_id\n    \n as \n    \n    share_statistic_id\n    \n, \n    \n    \n    ugc_post_id\n    \n as \n    \n    ugc_post_id\n    \n\n\n\n\n        \n\n\n, cast('' as \n    varchar\n) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        share_statistic_id,\n        ugc_post_id,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic"}, "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_linkedin_pages__organization_ugc_post_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_linkedin_pages__organization_ugc_post_tmp')),\n                staging_columns=get_organization_ugc_post_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='linkedin_pages_union_schemas', \n            union_database_variable='linkedin_pages_union_databases') \n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        organization_id,\n\n        case\n            when lower(ugc_post_id) like '%urn:li:share:%' \n                then replace(ugc_post_id, 'urn:li:share:', '')\n            when lower(ugc_post_id) like '%urn:li:ugcpost:%'\n                then replace(lower(ugc_post_id), 'urn:li:ugcpost:', '')\n            else ugc_post_id\n        end as ugc_post_id,\n\n        source_relation\n    from fields\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.linkedin_pages_source.get_organization_ugc_post_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp", "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages_source", "fqn": ["linkedin_pages_source", "stg_linkedin_pages__organization_ugc_post"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "stg_linkedin_pages__organization_ugc_post.sql", "original_file_path": "models/stg_linkedin_pages__organization_ugc_post.sql", "name": "stg_linkedin_pages__organization_ugc_post", "alias": "stg_linkedin_pages__organization_ugc_post", "checksum": {"name": "sha256", "checksum": "99da53159dd8e3ab00e934637a30021dd1583a149ab608ed11ba1debab1e2475"}, "tags": [], "refs": [["stg_linkedin_pages__organization_ugc_post_tmp"], ["stg_linkedin_pages__organization_ugc_post_tmp"]], "sources": [], "metrics": [], "description": "Mapping table for organizations and UGC posts.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Unique id for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "Unique id for the UGC post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_pages_source://models/stg_linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages__organization_ugc_post.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages_source", "materialized": "table"}, "created_at": 1661541349.853444, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n, \n    \n    \n    ugc_post_id\n    \n as \n    \n    ugc_post_id\n    \n\n\n\n\n        \n\n\n, cast('' as \n    varchar\n) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_synced,\n        organization_id,\n\n        case\n            when lower(ugc_post_id) like '%urn:li:share:%' \n                then replace(ugc_post_id, 'urn:li:share:', '')\n            when lower(ugc_post_id) like '%urn:li:ugcpost:%'\n                then replace(lower(ugc_post_id), 'urn:li:ugcpost:', '')\n            else ugc_post_id\n        end as ugc_post_id,\n\n        source_relation\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post"}, "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='ugc_post_history', \n        database_variable='linkedin_pages_database', \n        schema_variable='linkedin_pages_schema', \n        default_database=target.database,\n        default_schema='linkedin_company_pages',\n        default_variable='ugc_post_history',\n        union_schema_variable='linkedin_pages_union_schemas',\n        union_database_variable='linkedin_pages_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.linkedin_pages_source.linkedin_pages.ugc_post_history"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages_source", "fqn": ["linkedin_pages_source", "tmp", "stg_linkedin_pages__ugc_post_history_tmp"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "tmp/stg_linkedin_pages__ugc_post_history_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_pages__ugc_post_history_tmp.sql", "name": "stg_linkedin_pages__ugc_post_history_tmp", "alias": "stg_linkedin_pages__ugc_post_history_tmp", "checksum": {"name": "sha256", "checksum": "7050e46a4798532c118ce6151540bd5cc9093af74271754e58239789ddb56d16"}, "tags": [], "refs": [], "sources": [["linkedin_pages", "ugc_post_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/tmp/stg_linkedin_pages__ugc_post_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages_source", "materialized": "table"}, "created_at": 1661541348.840723, "compiled_sql": "\n\n\n\n    select * \n    from raw.linkedin_company_pages.ugc_post_history\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp"}, "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp": {"raw_sql": "--depends_on: {{ var('organization') }}\n{{\n    fivetran_utils.union_data(\n        table_identifier='organization', \n        database_variable='linkedin_pages_database', \n        schema_variable='linkedin_pages_schema', \n        default_database=target.database,\n        default_schema='linkedin_company_pages',\n        default_variable='organization',\n        union_schema_variable='linkedin_pages_union_schemas',\n        union_database_variable='linkedin_pages_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.linkedin_pages_source.linkedin_pages.organization", "source.linkedin_pages_source.linkedin_pages.organization"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages_source", "fqn": ["linkedin_pages_source", "tmp", "stg_linkedin_pages__organization_tmp"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "tmp/stg_linkedin_pages__organization_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_pages__organization_tmp.sql", "name": "stg_linkedin_pages__organization_tmp", "alias": "stg_linkedin_pages__organization_tmp", "checksum": {"name": "sha256", "checksum": "e150cf17bdf32e1523759ed80388defe131799c84c56e657db89fb137fc9f38a"}, "tags": [], "refs": [], "sources": [["linkedin_pages", "organization"], ["linkedin_pages", "organization"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/tmp/stg_linkedin_pages__organization_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages_source", "materialized": "table"}, "created_at": 1661541348.8508632, "compiled_sql": "--depends_on: raw.linkedin_company_pages.organization\n\n\n\n\n    select * \n    from raw.linkedin_company_pages.organization\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages_source.stg_linkedin_pages__organization_tmp"}, "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='organization_ugc_post', \n        database_variable='linkedin_pages_database', \n        schema_variable='linkedin_pages_schema', \n        default_database=target.database,\n        default_schema='linkedin_company_pages',\n        default_variable='organization_ugc_post',\n        union_schema_variable='linkedin_pages_union_schemas',\n        union_database_variable='linkedin_pages_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.linkedin_pages_source.linkedin_pages.organization_ugc_post"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages_source", "fqn": ["linkedin_pages_source", "tmp", "stg_linkedin_pages__organization_ugc_post_tmp"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "tmp/stg_linkedin_pages__organization_ugc_post_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_pages__organization_ugc_post_tmp.sql", "name": "stg_linkedin_pages__organization_ugc_post_tmp", "alias": "stg_linkedin_pages__organization_ugc_post_tmp", "checksum": {"name": "sha256", "checksum": "16e21ad17d2e72f810a6fbd540ccd4615721a999f505b6f3186e6c69049131c8"}, "tags": [], "refs": [], "sources": [["linkedin_pages", "organization_ugc_post"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/tmp/stg_linkedin_pages__organization_ugc_post_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages_source", "materialized": "table"}, "created_at": 1661541348.8549728, "compiled_sql": "\n\n\n\n    select * \n    from raw.linkedin_company_pages.organization_ugc_post\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp"}, "model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='share_statistic', \n        database_variable='linkedin_pages_database', \n        schema_variable='linkedin_pages_schema', \n        default_database=target.database,\n        default_schema='linkedin_company_pages',\n        default_variable='share_statistic',\n        union_schema_variable='linkedin_pages_union_schemas',\n        union_database_variable='linkedin_pages_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.linkedin_pages_source.linkedin_pages.share_statistic"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages_source", "fqn": ["linkedin_pages_source", "tmp", "stg_linkedin_pages__share_statistic_tmp"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "tmp/stg_linkedin_pages__share_statistic_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_pages__share_statistic_tmp.sql", "name": "stg_linkedin_pages__share_statistic_tmp", "alias": "stg_linkedin_pages__share_statistic_tmp", "checksum": {"name": "sha256", "checksum": "1090aa79a374d4b15d3bfeec72981e8e2e3ec22413f427afc9a97b785c505bec"}, "tags": [], "refs": [], "sources": [["linkedin_pages", "share_statistic"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/tmp/stg_linkedin_pages__share_statistic_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages_source", "materialized": "table"}, "created_at": 1661541348.8586082, "compiled_sql": "\n\n\n\n    select * \n    from raw.linkedin_company_pages.share_statistic\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp"}, "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='ugc_post_share_statistic', \n        database_variable='linkedin_pages_database', \n        schema_variable='linkedin_pages_schema', \n        default_database=target.database,\n        default_schema='linkedin_company_pages',\n        default_variable='ugc_post_share_statistic',\n        union_schema_variable='linkedin_pages_union_schemas',\n        union_database_variable='linkedin_pages_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.linkedin_pages_source.linkedin_pages.ugc_post_share_statistic"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages_source", "fqn": ["linkedin_pages_source", "tmp", "stg_linkedin_pages__ugc_post_share_statistic_tmp"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "tmp/stg_linkedin_pages__ugc_post_share_statistic_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_pages__ugc_post_share_statistic_tmp.sql", "name": "stg_linkedin_pages__ugc_post_share_statistic_tmp", "alias": "stg_linkedin_pages__ugc_post_share_statistic_tmp", "checksum": {"name": "sha256", "checksum": "98f47502b2bfd24414afae9150a8f0d937ff179b5e006e1e5805853a75d44bbe"}, "tags": [], "refs": [], "sources": [["linkedin_pages", "ugc_post_share_statistic"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/tmp/stg_linkedin_pages__ugc_post_share_statistic_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages_source", "materialized": "table"}, "created_at": 1661541348.862228, "compiled_sql": "\n\n\n\n    select * \n    from raw.linkedin_company_pages.ugc_post_share_statistic\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp"}, "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp": {"raw_sql": "{{\n    fivetran_utils.union_data(\n        table_identifier='ugc_post_share_content_media', \n        database_variable='linkedin_pages_database', \n        schema_variable='linkedin_pages_schema', \n        default_database=target.database,\n        default_schema='linkedin_company_pages',\n        default_variable='ugc_post_share_content_media',\n        union_schema_variable='linkedin_pages_union_schemas',\n        union_database_variable='linkedin_pages_union_databases'\n    )\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.linkedin_pages_source.linkedin_pages.ugc_post_share_content_media"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages_source", "fqn": ["linkedin_pages_source", "tmp", "stg_linkedin_pages__ugc_post_share_media_tmp"], "unique_id": "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "tmp/stg_linkedin_pages__ugc_post_share_media_tmp.sql", "original_file_path": "models/tmp/stg_linkedin_pages__ugc_post_share_media_tmp.sql", "name": "stg_linkedin_pages__ugc_post_share_media_tmp", "alias": "stg_linkedin_pages__ugc_post_share_media_tmp", "checksum": {"name": "sha256", "checksum": "6fed93fde067df2d4641d4cc2c4c42592e986f02458486c2ab17fc0176dae127"}, "tags": [], "refs": [], "sources": [["linkedin_pages", "ugc_post_share_content_media"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/tmp/stg_linkedin_pages__ugc_post_share_media_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages_source", "materialized": "table"}, "created_at": 1661541348.866534, "compiled_sql": "\n\n\n\n    select * \n    from raw.linkedin_company_pages.ugc_post_share_content_media\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp"}, "model.hubspot.hubspot__companies": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nwith companies as (\n\n    select *\n    from {{ var('company') }}\n\n{% if fivetran_utils.enabled_vars(['hubspot_engagement_enabled','hubspot_engagement_company_enabled']) %}\n\n), engagements as (\n\n    select *\n    from {{ ref('hubspot__engagements') }}\n\n), engagement_companies as (\n\n    select *\n    from {{ var('engagement_company') }}\n\n), engagement_companies_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_companies.company_id\n    from engagements\n    inner join engagement_companies\n        using (engagement_id)\n\n), engagement_companies_agg as (\n\n    {{ engagements_aggregated('engagement_companies_joined', 'company_id') }}\n\n), joined as (\n\n    select \n        companies.*,\n        {% for metric in engagement_metrics() %}\n        coalesce(engagement_companies_agg.{{ metric }},0) as {{ metric }} {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from companies\n    left join engagement_companies_agg\n        using (company_id)\n\n)\n\nselect *\nfrom joined\n\n{% else %}\n\n)\n\nselect *\nfrom companies\n\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_aggregated", "macro.hubspot.engagement_metrics"], "nodes": ["model.hubspot_source.stg_hubspot__company", "model.hubspot.hubspot__engagements", "model.hubspot_source.stg_hubspot__engagement_company"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "sales", "hubspot__companies"], "unique_id": "model.hubspot.hubspot__companies", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "sales/hubspot__companies.sql", "original_file_path": "models/sales/hubspot__companies.sql", "name": "hubspot__companies", "alias": "hubspot__companies", "checksum": {"name": "sha256", "checksum": "154ed1f5973a9bcbb7a137bb4c09d75a0daee546ddbcacea4b396e0ba8395bf2"}, "tags": [], "refs": [["stg_hubspot__company"], ["hubspot__engagements"], ["stg_hubspot__engagement_company"]], "sources": [], "metrics": [], "description": "Each record represents a company in Hubspot.", "columns": {"company_id": {"name": "company_id", "description": "The ID of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted in Hubspot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_notes": {"name": "count_engagement_notes", "description": "The total number of related note engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_tasks": {"name": "count_engagement_tasks", "description": "The total number of related task engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_calls": {"name": "count_engagement_calls", "description": "The total number of related call engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_meetings": {"name": "count_engagement_meetings", "description": "The total number of related meeting engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_emails": {"name": "count_engagement_emails", "description": "The total number of related email engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_incoming_emails": {"name": "count_engagement_incoming_emails", "description": "The total number of related incoming email engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_forwarded_emails": {"name": "count_engagement_forwarded_emails", "description": "The total number of related forwarded email engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/sales/sales.yml", "compiled_path": "target/compiled/hubspot/models/sales/hubspot__companies.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.928076, "compiled_sql": "\n\nwith companies as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__company\n\n\n\n), engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), engagement_companies as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_company\n\n), engagement_companies_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_companies.company_id\n    from engagements\n    inner join engagement_companies\n        using (engagement_id)\n\n), engagement_companies_agg as (\n\n    \n\n    select\n        company_id,\n        count(case when engagement_type = 'NOTE' then company_id end) as count_engagement_notes,\n        count(case when engagement_type = 'TASK' then company_id end) as count_engagement_tasks,\n        count(case when engagement_type = 'CALL' then company_id end) as count_engagement_calls,\n        count(case when engagement_type = 'MEETING' then company_id end) as count_engagement_meetings,\n        count(case when engagement_type = 'EMAIL' then company_id end) as count_engagement_emails,\n        count(case when engagement_type = 'INCOMING_EMAIL' then company_id end) as count_engagement_incoming_emails,\n        count(case when engagement_type = 'FORWARDED_EMAIL' then company_id end) as count_engagement_forwarded_emails\n    from engagement_companies_joined\n    group by 1\n\n\n\n), joined as (\n\n    select \n        companies.*,\n        \n        coalesce(engagement_companies_agg.count_engagement_notes,0) as count_engagement_notes ,\n        \n        coalesce(engagement_companies_agg.count_engagement_tasks,0) as count_engagement_tasks ,\n        \n        coalesce(engagement_companies_agg.count_engagement_calls,0) as count_engagement_calls ,\n        \n        coalesce(engagement_companies_agg.count_engagement_meetings,0) as count_engagement_meetings ,\n        \n        coalesce(engagement_companies_agg.count_engagement_emails,0) as count_engagement_emails ,\n        \n        coalesce(engagement_companies_agg.count_engagement_incoming_emails,0) as count_engagement_incoming_emails ,\n        \n        coalesce(engagement_companies_agg.count_engagement_forwarded_emails,0) as count_engagement_forwarded_emails \n        \n    from companies\n    left join engagement_companies_agg\n        using (company_id)\n\n)\n\nselect *\nfrom joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__companies"}, "model.hubspot.hubspot__deals": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith deals_enhanced as (\n\n    select *\n    from {{ ref('int_hubspot__deals_enhanced') }}\n\n{% if fivetran_utils.enabled_vars(['hubspot_engagement_enabled','hubspot_engagement_deal_enabled']) %}\n\n), engagements as (\n\n    select *\n    from {{ ref('hubspot__engagements') }}\n\n), engagement_deals as (\n\n    select *\n    from {{ var('engagement_deal') }}\n\n), engagement_deal_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_deals.deal_id\n    from engagements\n    inner join engagement_deals\n        using (engagement_id)\n\n), engagement_deal_agg as (\n\n    {{ engagements_aggregated('engagement_deal_joined', 'deal_id') }}\n\n), engagements_joined as (\n\n    select \n        deals_enhanced.*,\n        {% for metric in engagement_metrics() %}\n        coalesce(engagement_deal_agg.{{ metric }},0) as {{ metric }} {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from deals_enhanced\n    left join engagement_deal_agg\n        using (deal_id)\n\n)\n\nselect *\nfrom engagements_joined\n\n{% else %}\n\n)\n\nselect *\nfrom deals_enhanced\n\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_aggregated", "macro.hubspot.engagement_metrics"], "nodes": ["model.hubspot.int_hubspot__deals_enhanced", "model.hubspot.hubspot__engagements", "model.hubspot_source.stg_hubspot__engagement_deal"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "sales", "hubspot__deals"], "unique_id": "model.hubspot.hubspot__deals", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "sales/hubspot__deals.sql", "original_file_path": "models/sales/hubspot__deals.sql", "name": "hubspot__deals", "alias": "hubspot__deals", "checksum": {"name": "sha256", "checksum": "2f06f65ba141d55137e6305d15f76fad8ec323b4acfce983ed1cab911847847a"}, "tags": [], "refs": [["int_hubspot__deals_enhanced"], ["hubspot__engagements"], ["stg_hubspot__engagement_deal"]], "sources": [], "metrics": [], "description": "Each record represents a deal in Hubspot.", "columns": {"deal_id": {"name": "deal_id", "description": "The ID of the deal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the deal's pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_pipeline_stage_id": {"name": "deal_pipeline_stage_id", "description": "The ID of the deal's pipeline stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_notes": {"name": "count_engagement_notes", "description": "The total number of related note engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_tasks": {"name": "count_engagement_tasks", "description": "The total number of related task engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_calls": {"name": "count_engagement_calls", "description": "The total number of related call engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_meetings": {"name": "count_engagement_meetings", "description": "The total number of related meeting engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_emails": {"name": "count_engagement_emails", "description": "The total number of related email engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_incoming_emails": {"name": "count_engagement_incoming_emails", "description": "The total number of related incoming email engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_forwarded_emails": {"name": "count_engagement_forwarded_emails", "description": "The total number of related forwarded email engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipeline_label": {"name": "pipeline_label", "description": "The label of the deal's pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipeline_stage_label": {"name": "pipeline_stage_label", "description": "The label of the deal's pipeline stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_email_address": {"name": "owner_email_address", "description": "The email address of the deal's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_full_name": {"name": "owner_full_name", "description": "The full name of the deal's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/sales/sales.yml", "compiled_path": "target/compiled/hubspot/models/sales/hubspot__deals.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.924177, "compiled_sql": "\n\nwith  __dbt__cte__int_hubspot__deals_enhanced as (\n\n\nwith deals as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal\n\n), pipelines as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_pipeline\n\n), pipeline_stages as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_pipeline_stage\n\n), owners as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__owner\n\n), deal_fields_joined as (\n\n    select \n        deals.*,\n        pipelines.pipeline_label,\n        pipelines.is_active as is_pipeline_active,\n        pipeline_stages.pipeline_stage_label,\n        owners.email_address as owner_email_address,\n        owners.full_name as owner_full_name\n\n    from deals    \n    left join pipelines \n        on deals.deal_pipeline_id = pipelines.deal_pipeline_id\n    left join pipeline_stages \n        on deals.deal_pipeline_stage_id = pipeline_stages.deal_pipeline_stage_id\n    left join owners \n        on deals.owner_id = owners.owner_id\n)\n\nselect *\nfrom deal_fields_joined\n),deals_enhanced as (\n\n    select *\n    from __dbt__cte__int_hubspot__deals_enhanced\n\n\n\n), engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), engagement_deals as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_deal\n\n), engagement_deal_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_deals.deal_id\n    from engagements\n    inner join engagement_deals\n        using (engagement_id)\n\n), engagement_deal_agg as (\n\n    \n\n    select\n        deal_id,\n        count(case when engagement_type = 'NOTE' then deal_id end) as count_engagement_notes,\n        count(case when engagement_type = 'TASK' then deal_id end) as count_engagement_tasks,\n        count(case when engagement_type = 'CALL' then deal_id end) as count_engagement_calls,\n        count(case when engagement_type = 'MEETING' then deal_id end) as count_engagement_meetings,\n        count(case when engagement_type = 'EMAIL' then deal_id end) as count_engagement_emails,\n        count(case when engagement_type = 'INCOMING_EMAIL' then deal_id end) as count_engagement_incoming_emails,\n        count(case when engagement_type = 'FORWARDED_EMAIL' then deal_id end) as count_engagement_forwarded_emails\n    from engagement_deal_joined\n    group by 1\n\n\n\n), engagements_joined as (\n\n    select \n        deals_enhanced.*,\n        \n        coalesce(engagement_deal_agg.count_engagement_notes,0) as count_engagement_notes ,\n        \n        coalesce(engagement_deal_agg.count_engagement_tasks,0) as count_engagement_tasks ,\n        \n        coalesce(engagement_deal_agg.count_engagement_calls,0) as count_engagement_calls ,\n        \n        coalesce(engagement_deal_agg.count_engagement_meetings,0) as count_engagement_meetings ,\n        \n        coalesce(engagement_deal_agg.count_engagement_emails,0) as count_engagement_emails ,\n        \n        coalesce(engagement_deal_agg.count_engagement_incoming_emails,0) as count_engagement_incoming_emails ,\n        \n        coalesce(engagement_deal_agg.count_engagement_forwarded_emails,0) as count_engagement_forwarded_emails \n        \n    from deals_enhanced\n    left join engagement_deal_agg\n        using (deal_id)\n\n)\n\nselect *\nfrom engagements_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.hubspot.int_hubspot__deals_enhanced", "sql": " __dbt__cte__int_hubspot__deals_enhanced as (\n\n\nwith deals as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal\n\n), pipelines as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_pipeline\n\n), pipeline_stages as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_pipeline_stage\n\n), owners as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__owner\n\n), deal_fields_joined as (\n\n    select \n        deals.*,\n        pipelines.pipeline_label,\n        pipelines.is_active as is_pipeline_active,\n        pipeline_stages.pipeline_stage_label,\n        owners.email_address as owner_email_address,\n        owners.full_name as owner_full_name\n\n    from deals    \n    left join pipelines \n        on deals.deal_pipeline_id = pipelines.deal_pipeline_id\n    left join pipeline_stages \n        on deals.deal_pipeline_stage_id = pipeline_stages.deal_pipeline_stage_id\n    left join owners \n        on deals.owner_id = owners.owner_id\n)\n\nselect *\nfrom deal_fields_joined\n)"}], "relation_name": "prod_analytics.hubspot.hubspot__deals"}, "model.hubspot.hubspot__deal_stages": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith deals_enhanced as (\n\n    select *\n    from {{ ref('int_hubspot__deals_enhanced') }}\n\n), deal_stage as (\n\n    select *\n    from {{ var('deal_stage') }}\n\n), final as (\n\n    select\n        deal_stage.deal_id || '-' || row_number() over(partition by deal_stage.deal_id order by deal_stage.date_entered asc) as deal_stage_id,\n        deal_stage.deal_stage_name, \n        deal_stage._fivetran_start as date_stage_entered,\n        deal_stage._fivetran_end as date_stage_exited,\n        deal_stage._fivetran_active as is_stage_active,\n        deals_enhanced.*\n\n    from deal_stage\n\n    left join deals_enhanced\n        on deal_stage.deal_id = deals_enhanced.deal_id\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot.int_hubspot__deals_enhanced", "model.hubspot_source.stg_hubspot__deal_stage"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "sales", "hubspot__deal_stages"], "unique_id": "model.hubspot.hubspot__deal_stages", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "sales/hubspot__deal_stages.sql", "original_file_path": "models/sales/hubspot__deal_stages.sql", "name": "hubspot__deal_stages", "alias": "hubspot__deal_stages", "checksum": {"name": "sha256", "checksum": "c374b5acd38e145919857ac97b25460aa0c2ea312a8de4e71ba4da095860ad94"}, "tags": [], "refs": [["int_hubspot__deals_enhanced"], ["stg_hubspot__deal_stage"]], "sources": [], "metrics": [], "description": "Each record represents a stage within a deal in Hubspot", "columns": {"deal_stage_id": {"name": "deal_stage_id", "description": "The unique deal stage identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_stage_name": {"name": "deal_stage_name", "description": "The name of the deal stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_stage_entered": {"name": "date_stage_entered", "description": "The timestamp the deal stage was entered.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_stage_exited": {"name": "date_stage_exited", "description": "The Fivetran calculated exit time of the deal stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_stage_active": {"name": "is_stage_active", "description": "Boolean indicating whether the deal stage is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the deal's pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_pipeline_stage_id": {"name": "deal_pipeline_stage_id", "description": "The ID of the deal's pipeline stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipeline_label": {"name": "pipeline_label", "description": "The label of the deal's pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_pipeline_active": {"name": "is_pipeline_active", "description": "Boolean indicating if the deal pipeline is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipeline_stage_label": {"name": "pipeline_stage_label", "description": "The label of the deal's pipeline stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_email_address": {"name": "owner_email_address", "description": "The email address of the deal's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_full_name": {"name": "owner_full_name", "description": "The full name of the deal's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/sales/sales.yml", "compiled_path": "target/compiled/hubspot/models/sales/hubspot__deal_stages.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.926452, "compiled_sql": "\n\nwith  __dbt__cte__int_hubspot__deals_enhanced as (\n\n\nwith deals as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal\n\n), pipelines as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_pipeline\n\n), pipeline_stages as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_pipeline_stage\n\n), owners as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__owner\n\n), deal_fields_joined as (\n\n    select \n        deals.*,\n        pipelines.pipeline_label,\n        pipelines.is_active as is_pipeline_active,\n        pipeline_stages.pipeline_stage_label,\n        owners.email_address as owner_email_address,\n        owners.full_name as owner_full_name\n\n    from deals    \n    left join pipelines \n        on deals.deal_pipeline_id = pipelines.deal_pipeline_id\n    left join pipeline_stages \n        on deals.deal_pipeline_stage_id = pipeline_stages.deal_pipeline_stage_id\n    left join owners \n        on deals.owner_id = owners.owner_id\n)\n\nselect *\nfrom deal_fields_joined\n),deals_enhanced as (\n\n    select *\n    from __dbt__cte__int_hubspot__deals_enhanced\n\n), deal_stage as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_stage\n\n), final as (\n\n    select\n        deal_stage.deal_id || '-' || row_number() over(partition by deal_stage.deal_id order by deal_stage.date_entered asc) as deal_stage_id,\n        deal_stage.deal_stage_name, \n        deal_stage._fivetran_start as date_stage_entered,\n        deal_stage._fivetran_end as date_stage_exited,\n        deal_stage._fivetran_active as is_stage_active,\n        deals_enhanced.*\n\n    from deal_stage\n\n    left join deals_enhanced\n        on deal_stage.deal_id = deals_enhanced.deal_id\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.hubspot.int_hubspot__deals_enhanced", "sql": " __dbt__cte__int_hubspot__deals_enhanced as (\n\n\nwith deals as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal\n\n), pipelines as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_pipeline\n\n), pipeline_stages as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_pipeline_stage\n\n), owners as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__owner\n\n), deal_fields_joined as (\n\n    select \n        deals.*,\n        pipelines.pipeline_label,\n        pipelines.is_active as is_pipeline_active,\n        pipeline_stages.pipeline_stage_label,\n        owners.email_address as owner_email_address,\n        owners.full_name as owner_full_name\n\n    from deals    \n    left join pipelines \n        on deals.deal_pipeline_id = pipelines.deal_pipeline_id\n    left join pipeline_stages \n        on deals.deal_pipeline_stage_id = pipeline_stages.deal_pipeline_stage_id\n    left join owners \n        on deals.owner_id = owners.owner_id\n)\n\nselect *\nfrom deal_fields_joined\n)"}], "relation_name": "prod_analytics.hubspot.hubspot__deal_stages"}, "model.hubspot.hubspot__engagements": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled'])) }}\n\nwith engagements as (\n\n    select *\n    from {{ var('engagement') }}\n\n{% if fivetran_utils.enabled_vars(['hubspot_engagement_contact_enabled']) %}\n\n), contacts as (\n\n    select *\n    from {{ var('engagement_contact') }}\n\n), contacts_agg as (\n\n    select \n        engagement_id,\n        {{ fivetran_utils.array_agg('contact_id') }} as contact_ids\n    from contacts\n    group by 1\n\n{% endif %}\n\n{% if fivetran_utils.enabled_vars(['hubspot_engagement_deal_enabled']) %}\n\n), deals as (\n\n    select *\n    from {{ var('engagement_deal') }}\n \n), deals_agg as (\n\n    select \n        engagement_id,\n        {{ fivetran_utils.array_agg('deal_id') }} as deal_ids\n    from deals\n    group by 1\n\n{% endif %}\n\n{% if fivetran_utils.enabled_vars(['hubspot_engagement_company_enabled']) %}\n\n), companies as (\n\n    select *\n    from {{ var('engagement_company') }}\n\n), companies_agg as (\n\n    select \n        engagement_id,\n        {{ fivetran_utils.array_agg('company_id') }} as company_ids\n    from companies\n    group by 1\n\n{% endif %}\n\n), joined as (\n\n    select \n        {% if fivetran_utils.enabled_vars(['hubspot_engagement_contact_enabled']) %} contacts_agg.contact_ids, {% endif %}\n        {% if fivetran_utils.enabled_vars(['hubspot_engagement_deal_enabled']) %} deals_agg.deal_ids, {% endif %}\n        {% if fivetran_utils.enabled_vars(['hubspot_engagement_company_enabled']) %} companies_agg.company_ids, {% endif %}\n        engagements.*\n    from engagements\n    {% if fivetran_utils.enabled_vars(['hubspot_engagement_contact_enabled']) %} left join contacts_agg using (engagement_id) {% endif %}\n    {% if fivetran_utils.enabled_vars(['hubspot_engagement_deal_enabled']) %} left join deals_agg using (engagement_id) {% endif %}\n    {% if fivetran_utils.enabled_vars(['hubspot_engagement_company_enabled']) %} left join companies_agg using (engagement_id) {% endif %}\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.fivetran_utils.array_agg"], "nodes": ["model.hubspot_source.stg_hubspot__engagement", "model.hubspot_source.stg_hubspot__engagement_contact", "model.hubspot_source.stg_hubspot__engagement_deal", "model.hubspot_source.stg_hubspot__engagement_company"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "sales", "hubspot__engagements"], "unique_id": "model.hubspot.hubspot__engagements", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "sales/hubspot__engagements.sql", "original_file_path": "models/sales/hubspot__engagements.sql", "name": "hubspot__engagements", "alias": "hubspot__engagements", "checksum": {"name": "sha256", "checksum": "287fb9ef6ed072e803731e55ddc15089e166966a5ff55f33c79edc0c0c5ab4a8"}, "tags": [], "refs": [["stg_hubspot__engagement"], ["stg_hubspot__engagement_contact"], ["stg_hubspot__engagement_deal"], ["stg_hubspot__engagement_company"]], "sources": [], "metrics": [], "description": "Each record represents an engagement", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activity_type": {"name": "activity_type", "description": "The engagement's activity type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "One of NOTE, EMAIL, TASK, MEETING, or CALL, the type of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_timestamp": {"name": "last_updated_timestamp", "description": "A timestamp in representing when the engagement was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_ids": {"name": "contact_ids", "description": "List of contacts related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_ids": {"name": "deal_ids", "description": "List of deals related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_ids": {"name": "company_ids", "description": "List of companies related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/sales/sales.yml", "compiled_path": "target/compiled/hubspot/models/sales/hubspot__engagements.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.930111, "compiled_sql": "\n\nwith engagements as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement\n\n\n\n), contacts as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_contact\n\n), contacts_agg as (\n\n    select \n        engagement_id,\n        \n    array_agg(contact_id)\n as contact_ids\n    from contacts\n    group by 1\n\n\n\n\n\n), deals as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_deal\n \n), deals_agg as (\n\n    select \n        engagement_id,\n        \n    array_agg(deal_id)\n as deal_ids\n    from deals\n    group by 1\n\n\n\n\n\n), companies as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_company\n\n), companies_agg as (\n\n    select \n        engagement_id,\n        \n    array_agg(company_id)\n as company_ids\n    from companies\n    group by 1\n\n\n\n), joined as (\n\n    select \n         contacts_agg.contact_ids, \n         deals_agg.deal_ids, \n         companies_agg.company_ids, \n        engagements.*\n    from engagements\n     left join contacts_agg using (engagement_id) \n     left join deals_agg using (engagement_id) \n     left join companies_agg using (engagement_id) \n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__engagements"}, "model.hubspot.hubspot__deal_history": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith history as (\n\n    select *\n    from {{ var('deal_property_history') }}\n\n), windows as (\n\n    select\n        deal_id,\n        field_name,\n        change_source,\n        change_source_id,\n        change_timestamp as valid_from,\n        new_value,\n        lead(change_timestamp) over (partition by deal_id, field_name order by change_timestamp) as valid_to\n    from history\n\n), surrogate as (\n\n    select \n        windows.*,\n        {{ dbt_utils.surrogate_key(['field_name','deal_id','valid_from']) }} as id\n    from windows\n\n)\n\nselect *\nfrom surrogate", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.surrogate_key"], "nodes": ["model.hubspot_source.stg_hubspot__deal_property_history"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "sales", "history", "hubspot__deal_history"], "unique_id": "model.hubspot.hubspot__deal_history", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "sales/history/hubspot__deal_history.sql", "original_file_path": "models/sales/history/hubspot__deal_history.sql", "name": "hubspot__deal_history", "alias": "hubspot__deal_history", "checksum": {"name": "sha256", "checksum": "5b97d9925ec7bb737ea0722fe9d62fc05bf6f476e25ebebe565d76b1ff664e45"}, "tags": [], "refs": [["stg_hubspot__deal_property_history"]], "sources": [], "metrics": [], "description": "Each record represents a change to deal record in Hubspot; the grain of this model is deal_id -> field_name -> valid_to.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the change was valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the change was valid to. Null if still valid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/sales/history/history.yml", "compiled_path": "target/compiled/hubspot/models/sales/history/hubspot__deal_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.9409769, "compiled_sql": "\n\nwith history as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_property_history\n\n), windows as (\n\n    select\n        deal_id,\n        field_name,\n        change_source,\n        change_source_id,\n        change_timestamp as valid_from,\n        new_value,\n        lead(change_timestamp) over (partition by deal_id, field_name order by change_timestamp) as valid_to\n    from history\n\n), surrogate as (\n\n    select \n        windows.*,\n        md5(cast(coalesce(cast(field_name as \n    varchar\n), '') || '-' || coalesce(cast(deal_id as \n    varchar\n), '') || '-' || coalesce(cast(valid_from as \n    varchar\n), '') as \n    varchar\n)) as id\n    from windows\n\n)\n\nselect *\nfrom surrogate", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__deal_history"}, "model.hubspot.hubspot__company_history": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_company_enabled'])) }}\n\nwith history as (\n\n    select *\n    from {{ var('company_property_history') }}\n\n), windows as (\n\n    select\n        company_id,\n        field_name,\n        change_source,\n        change_source_id,\n        change_timestamp as valid_from,\n        new_value,\n        lead(change_timestamp) over (partition by company_id, field_name order by change_timestamp) as valid_to\n    from history\n\n), surrogate as (\n\n    select \n        windows.*,\n        {{ dbt_utils.surrogate_key(['field_name','company_id','valid_from']) }} as id\n    from windows\n\n)\n\nselect *\nfrom surrogate", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.surrogate_key"], "nodes": ["model.hubspot_source.stg_hubspot__company_property_history"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "sales", "history", "hubspot__company_history"], "unique_id": "model.hubspot.hubspot__company_history", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "sales/history/hubspot__company_history.sql", "original_file_path": "models/sales/history/hubspot__company_history.sql", "name": "hubspot__company_history", "alias": "hubspot__company_history", "checksum": {"name": "sha256", "checksum": "a9cdcbdcea578c47c3c4bc14f2105ee662026cc06f7b429e88685649f9b78d14"}, "tags": [], "refs": [["stg_hubspot__company_property_history"]], "sources": [], "metrics": [], "description": "Each record represents a change to company record in Hubspot; the grain of this model is company_id -> field_name -> valid_to.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the change was valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the change was valid to. Null if still valid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/sales/history/history.yml", "compiled_path": "target/compiled/hubspot/models/sales/history/hubspot__company_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.939518, "compiled_sql": "\n\nwith history as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__company_property_history\n\n), windows as (\n\n    select\n        company_id,\n        field_name,\n        change_source,\n        change_source_id,\n        change_timestamp as valid_from,\n        new_value,\n        lead(change_timestamp) over (partition by company_id, field_name order by change_timestamp) as valid_to\n    from history\n\n), surrogate as (\n\n    select \n        windows.*,\n        md5(cast(coalesce(cast(field_name as \n    varchar\n), '') || '-' || coalesce(cast(company_id as \n    varchar\n), '') || '-' || coalesce(cast(valid_from as \n    varchar\n), '') as \n    varchar\n)) as id\n    from windows\n\n)\n\nselect *\nfrom surrogate", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__company_history"}, "model.hubspot.hubspot__engagement_tasks": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_task_enabled','hubspot_engagement_enabled'])) }}\n\n{{ engagements_joined(var('engagement_task')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_joined"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_task", "model.hubspot.hubspot__engagements"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "sales", "engagement_events", "hubspot__engagement_tasks"], "unique_id": "model.hubspot.hubspot__engagement_tasks", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "sales/engagement_events/hubspot__engagement_tasks.sql", "original_file_path": "models/sales/engagement_events/hubspot__engagement_tasks.sql", "name": "hubspot__engagement_tasks", "alias": "hubspot__engagement_tasks", "checksum": {"name": "sha256", "checksum": "ed927f800196acc2e97fc161fe3f1e245d601865deb17e8739933c4417397589"}, "tags": [], "refs": [["stg_hubspot__engagement_task"], ["hubspot__engagements"]], "sources": [], "metrics": [], "description": "Each record represents a TASK engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completion_timestamp": {"name": "completion_timestamp", "description": "The timestamp the task was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "for_object_type": {"name": "for_object_type", "description": "One of CONTACT or COMPANY, what object type the task is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_all_day": {"name": "is_all_day", "description": "Whether it is an all day task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority": {"name": "priority", "description": "The priority of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "probability_to_complete": {"name": "probability_to_complete", "description": "The probability that the task will be completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_note": {"name": "task_note", "description": "The body or details of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_status": {"name": "task_status", "description": "The status of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_subject": {"name": "task_subject", "description": "The subject or title of the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_type": {"name": "task_type", "description": "The type of task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_ids": {"name": "contact_ids", "description": "List of contacts related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_ids": {"name": "deal_ids", "description": "List of deals related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_ids": {"name": "company_ids", "description": "List of companies related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/sales/engagement_events/engagement_events.yml", "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/hubspot__engagement_tasks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.96416, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_task\n\n), engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), joined as (\n\n    select \n        base.*,\n         engagements.contact_ids, \n         engagements.deal_ids, \n         engagements.company_ids, \n        engagements.is_active,\n        engagements.created_timestamp,\n        engagements.occurred_timestamp,\n        engagements.owner_id\n    from base\n    left join engagements\n        using (engagement_id)\n\n)\n\nselect *\nfrom joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__engagement_tasks"}, "model.hubspot.hubspot__engagement_notes": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_note_enabled','hubspot_engagement_enabled'])) }}\n\n{{ engagements_joined(var('engagement_note')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_joined"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_note", "model.hubspot.hubspot__engagements"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "sales", "engagement_events", "hubspot__engagement_notes"], "unique_id": "model.hubspot.hubspot__engagement_notes", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "sales/engagement_events/hubspot__engagement_notes.sql", "original_file_path": "models/sales/engagement_events/hubspot__engagement_notes.sql", "name": "hubspot__engagement_notes", "alias": "hubspot__engagement_notes", "checksum": {"name": "sha256", "checksum": "c7ccb3b2fa0f9f70bc924cd13b8b5dbd027c65499f3c3d60cef0e66741e44e86"}, "tags": [], "refs": [["stg_hubspot__engagement_note"], ["hubspot__engagements"]], "sources": [], "metrics": [], "description": "Each record represents a NOTE engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note": {"name": "note", "description": "The body of the note. The body has a limit of 65536 characters.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_ids": {"name": "contact_ids", "description": "List of contacts related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_ids": {"name": "deal_ids", "description": "List of deals related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_ids": {"name": "company_ids", "description": "List of companies related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/sales/engagement_events/engagement_events.yml", "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/hubspot__engagement_notes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.9614878, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_note\n\n), engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), joined as (\n\n    select \n        base.*,\n         engagements.contact_ids, \n         engagements.deal_ids, \n         engagements.company_ids, \n        engagements.is_active,\n        engagements.created_timestamp,\n        engagements.occurred_timestamp,\n        engagements.owner_id\n    from base\n    left join engagements\n        using (engagement_id)\n\n)\n\nselect *\nfrom joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__engagement_notes"}, "model.hubspot.hubspot__engagement_calls": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_call_enabled','hubspot_engagement_enabled'])) }}\n\n{{ engagements_joined(var('engagement_call')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_joined"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_call", "model.hubspot.hubspot__engagements"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "sales", "engagement_events", "hubspot__engagement_calls"], "unique_id": "model.hubspot.hubspot__engagement_calls", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "sales/engagement_events/hubspot__engagement_calls.sql", "original_file_path": "models/sales/engagement_events/hubspot__engagement_calls.sql", "name": "hubspot__engagement_calls", "alias": "hubspot__engagement_calls", "checksum": {"name": "sha256", "checksum": "f5e094f3180675aee83776940893660de874d9e6cceaab45450f49ec537f5597"}, "tags": [], "refs": [["stg_hubspot__engagement_call"], ["hubspot__engagements"]], "sources": [], "metrics": [], "description": "Each record represents a CALL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_duration_milliseconds": {"name": "call_duration_milliseconds", "description": "The length of the call in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disposition_id": {"name": "disposition_id", "description": "The internal ID for the call outcome.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_account_id": {"name": "external_account_id", "description": "For calls made in HubSpot, this will be the internal ID of the account used to make the call.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_id": {"name": "external_id", "description": "For calls made in HubSpot, this will be the internal ID of the call.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_number": {"name": "from_number", "description": "The phone number that was used as the from number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recording_url": {"name": "recording_url", "description": "The URL of the recording file .", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_number": {"name": "to_number", "description": "The phone number that was called.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_ids": {"name": "contact_ids", "description": "List of contacts related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_ids": {"name": "deal_ids", "description": "List of deals related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_ids": {"name": "company_ids", "description": "List of companies related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/sales/engagement_events/engagement_events.yml", "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/hubspot__engagement_calls.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.9530728, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_call\n\n), engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), joined as (\n\n    select \n        base.*,\n         engagements.contact_ids, \n         engagements.deal_ids, \n         engagements.company_ids, \n        engagements.is_active,\n        engagements.created_timestamp,\n        engagements.occurred_timestamp,\n        engagements.owner_id\n    from base\n    left join engagements\n        using (engagement_id)\n\n)\n\nselect *\nfrom joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__engagement_calls"}, "model.hubspot.hubspot__engagement_emails": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_email_enabled','hubspot_engagement_enabled'])) }}\n\n{{ engagements_joined(var('engagement_email')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_joined"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_email", "model.hubspot.hubspot__engagements"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "sales", "engagement_events", "hubspot__engagement_emails"], "unique_id": "model.hubspot.hubspot__engagement_emails", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "sales/engagement_events/hubspot__engagement_emails.sql", "original_file_path": "models/sales/engagement_events/hubspot__engagement_emails.sql", "name": "hubspot__engagement_emails", "alias": "hubspot__engagement_emails", "checksum": {"name": "sha256", "checksum": "16b83242d8424d9fbd8c22ced83153357a0674783980d84fa8b5c43fa7d66f4c"}, "tags": [], "refs": [["stg_hubspot__engagement_email"], ["hubspot__engagements"]], "sources": [], "metrics": [], "description": "Each record represents an EMAIL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attached_video_id": {"name": "attached_video_id", "description": "The ID of the video attached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_html": {"name": "email_html", "description": "The body of the HTML email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_event_created_timestamp": {"name": "email_send_event_created_timestamp", "description": "When the SENT event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_event_id": {"name": "email_send_event_id", "description": "The ID of the related SENT email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_status": {"name": "email_status", "description": "The status of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject of the email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_text": {"name": "email_text", "description": "The body of the text-only email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_message": {"name": "error_message", "description": "The error message, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The email address of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_first_name": {"name": "from_first_name", "description": "The first name of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_last_name": {"name": "from_last_name", "description": "The last name of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_processing_status": {"name": "media_processing_status", "description": "The processing status of the media content in the email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "The ID of the message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sent_via": {"name": "sent_via", "description": "How the email was sent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "The ID of the email thread.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_attached_video_opened": {"name": "was_attached_video_opened", "description": "Whether the the attached video was opened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_attached_video_watched": {"name": "was_attached_video_watched", "description": "Whether the the attached video was watched.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_ids": {"name": "contact_ids", "description": "List of contacts related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_ids": {"name": "deal_ids", "description": "List of deals related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_ids": {"name": "company_ids", "description": "List of companies related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/sales/engagement_events/engagement_events.yml", "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/hubspot__engagement_emails.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.957171, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_email\n\n), engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), joined as (\n\n    select \n        base.*,\n         engagements.contact_ids, \n         engagements.deal_ids, \n         engagements.company_ids, \n        engagements.is_active,\n        engagements.created_timestamp,\n        engagements.occurred_timestamp,\n        engagements.owner_id\n    from base\n    left join engagements\n        using (engagement_id)\n\n)\n\nselect *\nfrom joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__engagement_emails"}, "model.hubspot.hubspot__engagement_meetings": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_meeting_enabled','hubspot_engagement_enabled'])) }}\n\n{{ engagements_joined(var('engagement_meeting')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_joined"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_meeting", "model.hubspot.hubspot__engagements"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "sales", "engagement_events", "hubspot__engagement_meetings"], "unique_id": "model.hubspot.hubspot__engagement_meetings", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "sales/engagement_events/hubspot__engagement_meetings.sql", "original_file_path": "models/sales/engagement_events/hubspot__engagement_meetings.sql", "name": "hubspot__engagement_meetings", "alias": "hubspot__engagement_meetings", "checksum": {"name": "sha256", "checksum": "69bf205e7fe981d7152bdd0a4f591cc7e0721b352c14794d98a999785d5a268f"}, "tags": [], "refs": [["stg_hubspot__engagement_meeting"], ["hubspot__engagements"]], "sources": [], "metrics": [], "description": "Each record represents a MEETING engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "A timestamp representing the end time of the meeting", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_url": {"name": "external_url", "description": "The external URL of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meeting_notes": {"name": "meeting_notes", "description": "The details or body of the meeting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meeting_outcome": {"name": "meeting_outcome", "description": "The meeting outcome.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meeting_title": {"name": "meeting_title", "description": "The title or subject of the meeting", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the meeting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The internal ID of the meeting source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "A timestamp representing the start time of the meeting", "meta": {}, "data_type": null, "quote": null, "tags": []}, "web_conference_meeting_id": {"name": "web_conference_meeting_id", "description": "The ID of the web conference meeting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "occurred_timestamp": {"name": "occurred_timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_ids": {"name": "contact_ids", "description": "List of contacts related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_ids": {"name": "deal_ids", "description": "List of deals related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_ids": {"name": "company_ids", "description": "List of companies related to the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/sales/engagement_events/engagement_events.yml", "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/hubspot__engagement_meetings.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.95985, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_meeting\n\n), engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), joined as (\n\n    select \n        base.*,\n         engagements.contact_ids, \n         engagements.deal_ids, \n         engagements.company_ids, \n        engagements.is_active,\n        engagements.created_timestamp,\n        engagements.occurred_timestamp,\n        engagements.owner_id\n    from base\n    left join engagements\n        using (engagement_id)\n\n)\n\nselect *\nfrom joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__engagement_meetings"}, "model.hubspot.int_hubspot__deals_enhanced": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_deal_enabled'])) }}\n\nwith deals as (\n\n    select *\n    from {{ var('deal') }}\n\n), pipelines as (\n\n    select *\n    from {{ var('deal_pipeline') }}\n\n), pipeline_stages as (\n\n    select *\n    from {{ var('deal_pipeline_stage') }}\n\n), owners as (\n\n    select *\n    from {{ var('owner') }}\n\n), deal_fields_joined as (\n\n    select \n        deals.*,\n        pipelines.pipeline_label,\n        pipelines.is_active as is_pipeline_active,\n        pipeline_stages.pipeline_stage_label,\n        owners.email_address as owner_email_address,\n        owners.full_name as owner_full_name\n\n    from deals    \n    left join pipelines \n        on deals.deal_pipeline_id = pipelines.deal_pipeline_id\n    left join pipeline_stages \n        on deals.deal_pipeline_stage_id = pipeline_stages.deal_pipeline_stage_id\n    left join owners \n        on deals.owner_id = owners.owner_id\n)\n\nselect *\nfrom deal_fields_joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot_source.stg_hubspot__deal", "model.hubspot_source.stg_hubspot__deal_pipeline", "model.hubspot_source.stg_hubspot__deal_pipeline_stage", "model.hubspot_source.stg_hubspot__owner"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "sales", "intermediate", "int_hubspot__deals_enhanced"], "unique_id": "model.hubspot.int_hubspot__deals_enhanced", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "sales/intermediate/int_hubspot__deals_enhanced.sql", "original_file_path": "models/sales/intermediate/int_hubspot__deals_enhanced.sql", "name": "int_hubspot__deals_enhanced", "alias": "int_hubspot__deals_enhanced", "checksum": {"name": "sha256", "checksum": "9a519cb2a222d38612ffd4e0c91b8f039baa8c43a336eb185197dbe49074a84a"}, "tags": [], "refs": [["stg_hubspot__deal"], ["stg_hubspot__deal_pipeline"], ["stg_hubspot__deal_pipeline_stage"], ["stg_hubspot__owner"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/intermediate/int_hubspot__deals_enhanced.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "hubspot", "enabled": true}, "created_at": 1661541348.9429471, "compiled_sql": "\n\nwith deals as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal\n\n), pipelines as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_pipeline\n\n), pipeline_stages as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__deal_pipeline_stage\n\n), owners as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__owner\n\n), deal_fields_joined as (\n\n    select \n        deals.*,\n        pipelines.pipeline_label,\n        pipelines.is_active as is_pipeline_active,\n        pipeline_stages.pipeline_stage_label,\n        owners.email_address as owner_email_address,\n        owners.full_name as owner_full_name\n\n    from deals    \n    left join pipelines \n        on deals.deal_pipeline_id = pipelines.deal_pipeline_id\n    left join pipeline_stages \n        on deals.deal_pipeline_stage_id = pipeline_stages.deal_pipeline_stage_id\n    left join owners \n        on deals.owner_id = owners.owner_id\n)\n\nselect *\nfrom deal_fields_joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.hubspot.hubspot__email_sends": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nwith sends as (\n\n    select *\n    from {{ ref('hubspot__email_event_sent') }}\n\n), metrics as (\n\n    select *\n    from {{ ref('int_hubspot__email_event_aggregates') }}\n\n), joined as (\n\n    select\n        sends.*,\n        coalesce(metrics.bounces,0) as bounces,\n        coalesce(metrics.clicks,0) as clicks,\n        coalesce(metrics.deferrals,0) as deferrals,\n        coalesce(metrics.deliveries,0) as deliveries,\n        coalesce(metrics.drops,0) as drops,\n        coalesce(metrics.forwards,0) as forwards,\n        coalesce(metrics.opens,0) as opens,\n        coalesce(metrics.prints,0) as prints,\n        coalesce(metrics.spam_reports,0) as spam_reports\n    from sends\n    left join metrics using (email_send_id)\n\n), booleans as (\n\n    select \n        *,\n        bounces > 0 as was_bounced,\n        clicks > 0 as was_clicked,\n        deferrals > 0 as was_deferred,\n        deliveries > 0 as was_delivered,\n        forwards > 0 as was_forwarded,\n        opens > 0 as was_opened,\n        prints > 0 as was_printed,\n        spam_reports > 0 as was_spam_reported\n    from joined\n\n{% if fivetran_utils.enabled_vars(['hubspot_email_event_status_change_enabled']) %}\n\n), unsubscribes as (\n\n    select *\n    from {{ ref('int_hubspot__email_aggregate_status_change') }}\n\n), unsubscribes_joined as (\n\n    select \n        booleans.*,\n        coalesce(unsubscribes.unsubscribes,0) as unsubscribes,\n        coalesce(unsubscribes.unsubscribes,0) > 0 as was_unsubcribed\n    from booleans\n    left join unsubscribes using (email_send_id)\n\n)\n\nselect *\nfrom unsubscribes_joined\n\n{% else %}\n\n)\n\nselect *\nfrom booleans\n\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot.hubspot__email_event_sent", "model.hubspot.int_hubspot__email_event_aggregates", "model.hubspot.int_hubspot__email_aggregate_status_change"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "hubspot__email_sends"], "unique_id": "model.hubspot.hubspot__email_sends", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/hubspot__email_sends.sql", "original_file_path": "models/marketing/hubspot__email_sends.sql", "name": "hubspot__email_sends", "alias": "hubspot__email_sends", "checksum": {"name": "sha256", "checksum": "1eb48b5c443cbef4644238a4ca46094889f92cee2ab9c18e8ed33e67d00ebb50"}, "tags": [], "refs": [["hubspot__email_event_sent"], ["int_hubspot__email_event_aggregates"], ["int_hubspot__email_aggregate_status_change"]], "sources": [], "metrics": [], "description": "Each record represents a SENT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bcc_emails": {"name": "bcc_emails", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reply_to_email": {"name": "reply_to_email", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bounces": {"name": "bounces", "description": "The total number of bounce email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicks": {"name": "clicks", "description": "The total number of click email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferrals": {"name": "deferrals", "description": "The total number of deferral email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deliveries": {"name": "deliveries", "description": "The total number of delivery email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drops": {"name": "drops", "description": "The total number of drop email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "forwards": {"name": "forwards", "description": "The total number of forward email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opens": {"name": "opens", "description": "The total number of open email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prints": {"name": "prints", "description": "The total number of print email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spam_reports": {"name": "spam_reports", "description": "The total number of spam report email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unsubscribes": {"name": "unsubscribes", "description": "The total number of unsubscribe email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_bounced": {"name": "was_bounced", "description": "Whether the email was bounced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_clicked": {"name": "was_clicked", "description": "Whether the email was clicked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_deferred": {"name": "was_deferred", "description": "Whether the email was deferred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_delivered": {"name": "was_delivered", "description": "Whether the email was delivered.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_forwarded": {"name": "was_forwarded", "description": "Whether the email was forwarded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_opened": {"name": "was_opened", "description": "Whether the email was opened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_printed": {"name": "was_printed", "description": "Whether the email was printed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_spam_reported": {"name": "was_spam_reported", "description": "Whether the email was spam reported.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_unsubcribed": {"name": "was_unsubcribed", "description": "Whether the email was unsubcribed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/marketing.yml", "compiled_path": "target/compiled/hubspot/models/marketing/hubspot__email_sends.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.978348, "compiled_sql": "\n\nwith  __dbt__cte__int_hubspot__email_event_aggregates as (\n\n\nwith events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), aggregates as (\n\n    select\n        sent_by_event_id as email_send_id,\n        count(case when event_type = 'OPEN' then sent_by_event_id end) as opens,\n        count(case when event_type = 'SENT' then sent_by_event_id end) as sends,\n        count(case when event_type = 'DELIVERED' then sent_by_event_id end) as deliveries,\n        count(case when event_type = 'DROPPED' then sent_by_event_id end) as drops,\n        count(case when event_type = 'CLICK' then sent_by_event_id end) as clicks,\n        count(case when event_type = 'FORWARD' then sent_by_event_id end) as forwards,\n        count(case when event_type = 'DEFERRED' then sent_by_event_id end) as deferrals,\n        count(case when event_type = 'BOUNCE' then sent_by_event_id end) as bounces,\n        count(case when event_type = 'SPAMREPORT' then sent_by_event_id end) as spam_reports,\n        count(case when event_type = 'PRINT' then sent_by_event_id end) as prints\n    from events\n    where sent_by_event_id is not null\n    group by 1\n\n)\n\nselect *\nfrom aggregates\n),  __dbt__cte__int_hubspot__email_aggregate_status_change as (\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__email_event_status_change\n\n), aggregates as (\n\n    select\n        email_campaign_id,\n        email_send_id,\n        count(case when subscription_status = 'UNSUBSCRIBED' then 1 end) as unsubscribes\n    from base\n    where email_send_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregates\n),sends as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__email_event_sent\n\n), metrics as (\n\n    select *\n    from __dbt__cte__int_hubspot__email_event_aggregates\n\n), joined as (\n\n    select\n        sends.*,\n        coalesce(metrics.bounces,0) as bounces,\n        coalesce(metrics.clicks,0) as clicks,\n        coalesce(metrics.deferrals,0) as deferrals,\n        coalesce(metrics.deliveries,0) as deliveries,\n        coalesce(metrics.drops,0) as drops,\n        coalesce(metrics.forwards,0) as forwards,\n        coalesce(metrics.opens,0) as opens,\n        coalesce(metrics.prints,0) as prints,\n        coalesce(metrics.spam_reports,0) as spam_reports\n    from sends\n    left join metrics using (email_send_id)\n\n), booleans as (\n\n    select \n        *,\n        bounces > 0 as was_bounced,\n        clicks > 0 as was_clicked,\n        deferrals > 0 as was_deferred,\n        deliveries > 0 as was_delivered,\n        forwards > 0 as was_forwarded,\n        opens > 0 as was_opened,\n        prints > 0 as was_printed,\n        spam_reports > 0 as was_spam_reported\n    from joined\n\n\n\n), unsubscribes as (\n\n    select *\n    from __dbt__cte__int_hubspot__email_aggregate_status_change\n\n), unsubscribes_joined as (\n\n    select \n        booleans.*,\n        coalesce(unsubscribes.unsubscribes,0) as unsubscribes,\n        coalesce(unsubscribes.unsubscribes,0) > 0 as was_unsubcribed\n    from booleans\n    left join unsubscribes using (email_send_id)\n\n)\n\nselect *\nfrom unsubscribes_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.hubspot.int_hubspot__email_event_aggregates", "sql": " __dbt__cte__int_hubspot__email_event_aggregates as (\n\n\nwith events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), aggregates as (\n\n    select\n        sent_by_event_id as email_send_id,\n        count(case when event_type = 'OPEN' then sent_by_event_id end) as opens,\n        count(case when event_type = 'SENT' then sent_by_event_id end) as sends,\n        count(case when event_type = 'DELIVERED' then sent_by_event_id end) as deliveries,\n        count(case when event_type = 'DROPPED' then sent_by_event_id end) as drops,\n        count(case when event_type = 'CLICK' then sent_by_event_id end) as clicks,\n        count(case when event_type = 'FORWARD' then sent_by_event_id end) as forwards,\n        count(case when event_type = 'DEFERRED' then sent_by_event_id end) as deferrals,\n        count(case when event_type = 'BOUNCE' then sent_by_event_id end) as bounces,\n        count(case when event_type = 'SPAMREPORT' then sent_by_event_id end) as spam_reports,\n        count(case when event_type = 'PRINT' then sent_by_event_id end) as prints\n    from events\n    where sent_by_event_id is not null\n    group by 1\n\n)\n\nselect *\nfrom aggregates\n)"}, {"id": "model.hubspot.int_hubspot__email_aggregate_status_change", "sql": " __dbt__cte__int_hubspot__email_aggregate_status_change as (\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__email_event_status_change\n\n), aggregates as (\n\n    select\n        email_campaign_id,\n        email_send_id,\n        count(case when subscription_status = 'UNSUBSCRIBED' then 1 end) as unsubscribes\n    from base\n    where email_send_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregates\n)"}], "relation_name": "prod_analytics.hubspot.hubspot__email_sends"}, "model.hubspot.hubspot__contact_lists": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_list_enabled'])) }}\n\nwith contact_lists as (\n\n    select *\n    from {{ var('contact_list') }}\n\n{% if fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_email_event_enabled']) %}\n\n), email_metrics as (\n\n    select *\n    from {{ ref('int_hubspot__email_metrics__by_contact_list') }}\n\n), joined as (\n\n    select \n        contact_lists.*,\n        {% for metric in var('email_metrics') %}\n        coalesce(email_metrics.total_{{ metric }}, 0) as total_{{ metric }},\n        coalesce(email_metrics.total_unique_{{ metric }}, 0) as total_unique_{{ metric }}\n        {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from contact_lists\n    left join email_metrics\n        using (contact_list_id)\n\n)\n\nselect *\nfrom joined\n\n{% else %}\n\n)\n\nselect *\nfrom contact_lists\n\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list", "model.hubspot.int_hubspot__email_metrics__by_contact_list"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "hubspot__contact_lists"], "unique_id": "model.hubspot.hubspot__contact_lists", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/hubspot__contact_lists.sql", "original_file_path": "models/marketing/hubspot__contact_lists.sql", "name": "hubspot__contact_lists", "alias": "hubspot__contact_lists", "checksum": {"name": "sha256", "checksum": "59f87858320cb1751167db880d178fa9a7e8b1e343bec6ad796c2ccbe3c4433e"}, "tags": [], "refs": [["stg_hubspot__contact_list"], ["int_hubspot__email_metrics__by_contact_list"]], "sources": [], "metrics": [], "description": "Each record represents a contact list in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_list_id": {"name": "contact_list_id", "description": "The ID of the contact list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_list_name": {"name": "contact_list_name", "description": "The name of the contact list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "A timestamp of the time the list was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deletable": {"name": "is_deletable", "description": "If this is false, this is a system list and cannot be deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_dynamic": {"name": "is_dynamic", "description": "Whether the contact list is dynamic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_error": {"name": "metadata_error", "description": "Any errors that happened the last time the list was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_last_processing_state_change_at": {"name": "metadata_last_processing_state_change_at", "description": "A timestamp of the last time that the processing state changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_last_size_change_at": {"name": "metadata_last_size_change_at", "description": "A timestamp of the last time that the size of the list changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_processing": {"name": "metadata_processing", "description": "One of DONE, REFRESHING, INITIALIZING, or PROCESSING. \nDONE indicates the list has finished processing, any other value indicates that list membership is being evaluated.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_size": {"name": "metadata_size", "description": "The approximate number of contacts in the list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_timestamp": {"name": "updated_timestamp", "description": "A timestamp of the time that the list was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_bounces": {"name": "total_bounces", "description": "The total number of bounce email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_clicks": {"name": "total_clicks", "description": "The total number of click email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_deferrals": {"name": "total_deferrals", "description": "The total number of deferral email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_deliveries": {"name": "total_deliveries", "description": "The total number of delivery email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_drops": {"name": "total_drops", "description": "The total number of drop email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_forwards": {"name": "total_forwards", "description": "The total number of forward email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_opens": {"name": "total_opens", "description": "The total number of open email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_prints": {"name": "total_prints", "description": "The total number of print email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_spam_reports": {"name": "total_spam_reports", "description": "The total number of spam report email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unsubscribes": {"name": "total_unsubscribes", "description": "The total number of unsubscribe email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_bounces": {"name": "total_unique_bounces", "description": "The total number of unique email sends with a bounce email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_clicks": {"name": "total_unique_clicks", "description": "The total number of unique email sends with a click email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_deferrals": {"name": "total_unique_deferrals", "description": "The total number of unique email sends with a deferral email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_deliveries": {"name": "total_unique_deliveries", "description": "The total number of unique email sends with a delivery email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_drops": {"name": "total_unique_drops", "description": "The total number of unique email sends with a drop email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_forwards": {"name": "total_unique_forwards", "description": "The total number of unique email sends with a forward email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_opens": {"name": "total_unique_opens", "description": "The total number of unique email sends with a opens email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_prints": {"name": "total_unique_prints", "description": "The total number of unique email sends with a print email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_spam_reports": {"name": "total_unique_spam_reports", "description": "The total number of unique email sends with a spam report email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_unsubscribes": {"name": "total_unique_unsubscribes", "description": "The total number of unique email sends with a unsubscribe email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/marketing.yml", "compiled_path": "target/compiled/hubspot/models/marketing/hubspot__contact_lists.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.991942, "compiled_sql": "\n\nwith contact_lists as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__contact_list\n\n\n\n), email_metrics as (\n\n    select *\n    from prod_analytics.hubspot.int_hubspot__email_metrics__by_contact_list\n\n), joined as (\n\n    select \n        contact_lists.*,\n        \n        coalesce(email_metrics.total_bounces, 0) as total_bounces,\n        coalesce(email_metrics.total_unique_bounces, 0) as total_unique_bounces\n        ,\n        \n        coalesce(email_metrics.total_clicks, 0) as total_clicks,\n        coalesce(email_metrics.total_unique_clicks, 0) as total_unique_clicks\n        ,\n        \n        coalesce(email_metrics.total_deferrals, 0) as total_deferrals,\n        coalesce(email_metrics.total_unique_deferrals, 0) as total_unique_deferrals\n        ,\n        \n        coalesce(email_metrics.total_deliveries, 0) as total_deliveries,\n        coalesce(email_metrics.total_unique_deliveries, 0) as total_unique_deliveries\n        ,\n        \n        coalesce(email_metrics.total_drops, 0) as total_drops,\n        coalesce(email_metrics.total_unique_drops, 0) as total_unique_drops\n        ,\n        \n        coalesce(email_metrics.total_forwards, 0) as total_forwards,\n        coalesce(email_metrics.total_unique_forwards, 0) as total_unique_forwards\n        ,\n        \n        coalesce(email_metrics.total_opens, 0) as total_opens,\n        coalesce(email_metrics.total_unique_opens, 0) as total_unique_opens\n        ,\n        \n        coalesce(email_metrics.total_prints, 0) as total_prints,\n        coalesce(email_metrics.total_unique_prints, 0) as total_unique_prints\n        ,\n        \n        coalesce(email_metrics.total_spam_reports, 0) as total_spam_reports,\n        coalesce(email_metrics.total_unique_spam_reports, 0) as total_unique_spam_reports\n        ,\n        \n        coalesce(email_metrics.total_unsubscribes, 0) as total_unsubscribes,\n        coalesce(email_metrics.total_unique_unsubscribes, 0) as total_unique_unsubscribes\n        \n        \n    from contact_lists\n    left join email_metrics\n        using (contact_list_id)\n\n)\n\nselect *\nfrom joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__contact_lists"}, "model.hubspot.hubspot__contacts": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_enabled'])) }}\n{% set emails_enabled = fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_email_event_enabled']) %}\n{% set engagements_enabled = fivetran_utils.enabled_vars(['hubspot_sales_enabled', 'hubspot_engagement_enabled']) %}\n\nwith contacts as (\n\n    select *\n    from {% if var('hubspot_contact_merge_audit_enabled', false) %} \n            {{ ref('int_hubspot__contact_merge_adjust') }} \n        {% else %} \n            {{ var('contact') }} \n        {% endif %}\n\n{% if emails_enabled %}\n\n), email_sends as (\n\n    select *\n    from {{ ref('hubspot__email_sends') }}\n\n), email_metrics as (\n\n    select \n        recipient_email_address,\n        {% for metric in var('email_metrics') %}\n        sum({{ metric }}) as total_{{ metric }},\n        count(distinct case when {{ metric }} > 0 then email_send_id end) as total_unique_{{ metric }}\n        {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from email_sends\n    group by 1\n\n), email_joined as (\n\n    select \n        contacts.*,\n        {% for metric in var('email_metrics') %}\n        coalesce(email_metrics.total_{{ metric }}, 0) as total_{{ metric }},\n        coalesce(email_metrics.total_unique_{{ metric }}, 0) as total_unique_{{ metric }}\n        {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from contacts\n    left join email_metrics\n        on contacts.email = email_metrics.recipient_email_address\n\n{% endif %}\n\n{% if engagements_enabled %}\n\n{% set cte_ref = 'email_joined' if emails_enabled else 'contacts' %}\n\n), engagements as (\n\n    select *\n    from {{ ref('int_hubspot__engagement_metrics__by_contact') }}\n\n), engagements_joined as (\n\n    select \n        {{ cte_ref }}.*,\n        {% for metric in engagement_metrics() %}\n        coalesce(engagements.{{ metric }},0) as {{ metric }} {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from {{ cte_ref }}\n    left join engagements\n        using (contact_id)\n\n)\n\nselect *\nfrom engagements_joined\n\n{% elif emails_enabled %}\n\n)\n\nselect *\nfrom email_joined\n\n{% else %}\n\n)\n\nselect *\nfrom contacts\n\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagement_metrics"], "nodes": ["model.hubspot_source.stg_hubspot__contact", "model.hubspot.hubspot__email_sends", "model.hubspot.int_hubspot__engagement_metrics__by_contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "hubspot__contacts"], "unique_id": "model.hubspot.hubspot__contacts", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/hubspot__contacts.sql", "original_file_path": "models/marketing/hubspot__contacts.sql", "name": "hubspot__contacts", "alias": "hubspot__contacts", "checksum": {"name": "sha256", "checksum": "9b1ddd2424c5d3cbbb9944645aa73f1732f85611e178931081c20296e3b560bc"}, "tags": [], "refs": [["stg_hubspot__contact"], ["hubspot__email_sends"], ["int_hubspot__engagement_metrics__by_contact"]], "sources": [], "metrics": [], "description": "Each record represents a contact in Hubspot.", "columns": {"contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_bounces": {"name": "total_bounces", "description": "The total number of bounce email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_clicks": {"name": "total_clicks", "description": "The total number of click email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_deferrals": {"name": "total_deferrals", "description": "The total number of deferral email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_deliveries": {"name": "total_deliveries", "description": "The total number of delivery email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_drops": {"name": "total_drops", "description": "The total number of drop email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_forwards": {"name": "total_forwards", "description": "The total number of forward email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_opens": {"name": "total_opens", "description": "The total number of open email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_prints": {"name": "total_prints", "description": "The total number of print email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_spam_reports": {"name": "total_spam_reports", "description": "The total number of spam report email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unsubscribes": {"name": "total_unsubscribes", "description": "The total number of unsubscribe email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_bounces": {"name": "total_unique_bounces", "description": "The total number of unique email sends with a bounce email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_clicks": {"name": "total_unique_clicks", "description": "The total number of unique email sends with a click email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_deferrals": {"name": "total_unique_deferrals", "description": "The total number of unique email sends with a deferral email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_deliveries": {"name": "total_unique_deliveries", "description": "The total number of unique email sends with a delivery email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_drops": {"name": "total_unique_drops", "description": "The total number of unique email sends with a drop email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_forwards": {"name": "total_unique_forwards", "description": "The total number of unique email sends with a forward email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_opens": {"name": "total_unique_opens", "description": "The total number of unique email sends with a opens email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_prints": {"name": "total_unique_prints", "description": "The total number of unique email sends with a print email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_spam_reports": {"name": "total_unique_spam_reports", "description": "The total number of unique email sends with a spam report email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_unsubscribes": {"name": "total_unique_unsubscribes", "description": "The total number of unique email sends with a unsubscribe email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_notes": {"name": "count_engagement_notes", "description": "The total number of related note engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_tasks": {"name": "count_engagement_tasks", "description": "The total number of related task engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_calls": {"name": "count_engagement_calls", "description": "The total number of related call engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_meetings": {"name": "count_engagement_meetings", "description": "The total number of related meeting engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_emails": {"name": "count_engagement_emails", "description": "The total number of related email engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_incoming_emails": {"name": "count_engagement_incoming_emails", "description": "The total number of related incoming email engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_engagement_forwarded_emails": {"name": "count_engagement_forwarded_emails", "description": "The total number of related forwarded email engagements.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/marketing.yml", "compiled_path": "target/compiled/hubspot/models/marketing/hubspot__contacts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.987149, "compiled_sql": "\n\n\n\nwith  __dbt__cte__int_hubspot__engagement_metrics__by_contact as (\n\n\nwith engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), engagement_contacts as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_contact\n\n), engagement_contacts_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_contacts.contact_id\n    from engagements\n    inner join engagement_contacts\n        using (engagement_id)\n\n), engagement_contacts_agg as (\n\n    \n\n    select\n        contact_id,\n        count(case when engagement_type = 'NOTE' then contact_id end) as count_engagement_notes,\n        count(case when engagement_type = 'TASK' then contact_id end) as count_engagement_tasks,\n        count(case when engagement_type = 'CALL' then contact_id end) as count_engagement_calls,\n        count(case when engagement_type = 'MEETING' then contact_id end) as count_engagement_meetings,\n        count(case when engagement_type = 'EMAIL' then contact_id end) as count_engagement_emails,\n        count(case when engagement_type = 'INCOMING_EMAIL' then contact_id end) as count_engagement_incoming_emails,\n        count(case when engagement_type = 'FORWARDED_EMAIL' then contact_id end) as count_engagement_forwarded_emails\n    from engagement_contacts_joined\n    group by 1\n\n\n\n)\n\nselect *\nfrom engagement_contacts_agg\n),contacts as (\n\n    select *\n    from  \n            prod_analytics.hubspot_source.stg_hubspot__contact \n        \n\n\n\n), email_sends as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__email_sends\n\n), email_metrics as (\n\n    select \n        recipient_email_address,\n        \n        sum(bounces) as total_bounces,\n        count(distinct case when bounces > 0 then email_send_id end) as total_unique_bounces\n        ,\n        \n        sum(clicks) as total_clicks,\n        count(distinct case when clicks > 0 then email_send_id end) as total_unique_clicks\n        ,\n        \n        sum(deferrals) as total_deferrals,\n        count(distinct case when deferrals > 0 then email_send_id end) as total_unique_deferrals\n        ,\n        \n        sum(deliveries) as total_deliveries,\n        count(distinct case when deliveries > 0 then email_send_id end) as total_unique_deliveries\n        ,\n        \n        sum(drops) as total_drops,\n        count(distinct case when drops > 0 then email_send_id end) as total_unique_drops\n        ,\n        \n        sum(forwards) as total_forwards,\n        count(distinct case when forwards > 0 then email_send_id end) as total_unique_forwards\n        ,\n        \n        sum(opens) as total_opens,\n        count(distinct case when opens > 0 then email_send_id end) as total_unique_opens\n        ,\n        \n        sum(prints) as total_prints,\n        count(distinct case when prints > 0 then email_send_id end) as total_unique_prints\n        ,\n        \n        sum(spam_reports) as total_spam_reports,\n        count(distinct case when spam_reports > 0 then email_send_id end) as total_unique_spam_reports\n        ,\n        \n        sum(unsubscribes) as total_unsubscribes,\n        count(distinct case when unsubscribes > 0 then email_send_id end) as total_unique_unsubscribes\n        \n        \n    from email_sends\n    group by 1\n\n), email_joined as (\n\n    select \n        contacts.*,\n        \n        coalesce(email_metrics.total_bounces, 0) as total_bounces,\n        coalesce(email_metrics.total_unique_bounces, 0) as total_unique_bounces\n        ,\n        \n        coalesce(email_metrics.total_clicks, 0) as total_clicks,\n        coalesce(email_metrics.total_unique_clicks, 0) as total_unique_clicks\n        ,\n        \n        coalesce(email_metrics.total_deferrals, 0) as total_deferrals,\n        coalesce(email_metrics.total_unique_deferrals, 0) as total_unique_deferrals\n        ,\n        \n        coalesce(email_metrics.total_deliveries, 0) as total_deliveries,\n        coalesce(email_metrics.total_unique_deliveries, 0) as total_unique_deliveries\n        ,\n        \n        coalesce(email_metrics.total_drops, 0) as total_drops,\n        coalesce(email_metrics.total_unique_drops, 0) as total_unique_drops\n        ,\n        \n        coalesce(email_metrics.total_forwards, 0) as total_forwards,\n        coalesce(email_metrics.total_unique_forwards, 0) as total_unique_forwards\n        ,\n        \n        coalesce(email_metrics.total_opens, 0) as total_opens,\n        coalesce(email_metrics.total_unique_opens, 0) as total_unique_opens\n        ,\n        \n        coalesce(email_metrics.total_prints, 0) as total_prints,\n        coalesce(email_metrics.total_unique_prints, 0) as total_unique_prints\n        ,\n        \n        coalesce(email_metrics.total_spam_reports, 0) as total_spam_reports,\n        coalesce(email_metrics.total_unique_spam_reports, 0) as total_unique_spam_reports\n        ,\n        \n        coalesce(email_metrics.total_unsubscribes, 0) as total_unsubscribes,\n        coalesce(email_metrics.total_unique_unsubscribes, 0) as total_unique_unsubscribes\n        \n        \n    from contacts\n    left join email_metrics\n        on contacts.email = email_metrics.recipient_email_address\n\n\n\n\n\n\n\n), engagements as (\n\n    select *\n    from __dbt__cte__int_hubspot__engagement_metrics__by_contact\n\n), engagements_joined as (\n\n    select \n        email_joined.*,\n        \n        coalesce(engagements.count_engagement_notes,0) as count_engagement_notes ,\n        \n        coalesce(engagements.count_engagement_tasks,0) as count_engagement_tasks ,\n        \n        coalesce(engagements.count_engagement_calls,0) as count_engagement_calls ,\n        \n        coalesce(engagements.count_engagement_meetings,0) as count_engagement_meetings ,\n        \n        coalesce(engagements.count_engagement_emails,0) as count_engagement_emails ,\n        \n        coalesce(engagements.count_engagement_incoming_emails,0) as count_engagement_incoming_emails ,\n        \n        coalesce(engagements.count_engagement_forwarded_emails,0) as count_engagement_forwarded_emails \n        \n    from email_joined\n    left join engagements\n        using (contact_id)\n\n)\n\nselect *\nfrom engagements_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.hubspot.int_hubspot__engagement_metrics__by_contact", "sql": " __dbt__cte__int_hubspot__engagement_metrics__by_contact as (\n\n\nwith engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), engagement_contacts as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_contact\n\n), engagement_contacts_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_contacts.contact_id\n    from engagements\n    inner join engagement_contacts\n        using (engagement_id)\n\n), engagement_contacts_agg as (\n\n    \n\n    select\n        contact_id,\n        count(case when engagement_type = 'NOTE' then contact_id end) as count_engagement_notes,\n        count(case when engagement_type = 'TASK' then contact_id end) as count_engagement_tasks,\n        count(case when engagement_type = 'CALL' then contact_id end) as count_engagement_calls,\n        count(case when engagement_type = 'MEETING' then contact_id end) as count_engagement_meetings,\n        count(case when engagement_type = 'EMAIL' then contact_id end) as count_engagement_emails,\n        count(case when engagement_type = 'INCOMING_EMAIL' then contact_id end) as count_engagement_incoming_emails,\n        count(case when engagement_type = 'FORWARDED_EMAIL' then contact_id end) as count_engagement_forwarded_emails\n    from engagement_contacts_joined\n    group by 1\n\n\n\n)\n\nselect *\nfrom engagement_contacts_agg\n)"}], "relation_name": "prod_analytics.hubspot.hubspot__contacts"}, "model.hubspot.hubspot__email_campaigns": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\n\nwith campaigns as (\n\n    select *\n    from {{ ref('stg_hubspot__email_campaign') }}\n\n), email_sends as (\n\n    select *\n    from {{ ref('hubspot__email_sends') }}\n\n), email_metrics as (\n\n    select \n        email_campaign_id,\n        {% for metric in var('email_metrics') %}\n        sum(email_sends.{{ metric }}) as total_{{ metric }},\n        count(distinct case when email_sends.{{ metric }} > 0 then email_send_id end) as total_unique_{{ metric }}\n        {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from email_sends\n    group by 1\n\n), joined as (\n\n    select \n        campaigns.*,\n        {% for metric in var('email_metrics') %}\n        coalesce(email_metrics.total_{{ metric }}, 0) as total_{{ metric }},\n        coalesce(email_metrics.total_unique_{{ metric }}, 0) as total_unique_{{ metric }}\n        {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from campaigns\n    left join email_metrics\n        on campaigns.email_campaign_id = email_metrics.email_campaign_id\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot_source.stg_hubspot__email_campaign", "model.hubspot.hubspot__email_sends"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "hubspot__email_campaigns"], "unique_id": "model.hubspot.hubspot__email_campaigns", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/hubspot__email_campaigns.sql", "original_file_path": "models/marketing/hubspot__email_campaigns.sql", "name": "hubspot__email_campaigns", "alias": "hubspot__email_campaigns", "checksum": {"name": "sha256", "checksum": "985050fe992f3a76c4fb5066042e8fe32fb1dfbc129e2ad37935ca26318b5b00"}, "tags": [], "refs": [["stg_hubspot__email_campaign"], ["hubspot__email_sends"]], "sources": [], "metrics": [], "description": "Each record represents an email campaign in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The app ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "The app name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "The ID of the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_name": {"name": "email_campaign_name", "description": "The name of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_sub_type": {"name": "email_campaign_sub_type", "description": "The email campaign sub-type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_subject": {"name": "email_campaign_subject", "description": "The subject of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_type": {"name": "email_campaign_type", "description": "The email campaign type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_included": {"name": "num_included", "description": "The number of messages included as part of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_queued": {"name": "num_queued", "description": "The number of messages queued as part of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_bounces": {"name": "total_bounces", "description": "The total number of bounce email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_clicks": {"name": "total_clicks", "description": "The total number of click email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_deferrals": {"name": "total_deferrals", "description": "The total number of deferral email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_deliveries": {"name": "total_deliveries", "description": "The total number of delivery email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_drops": {"name": "total_drops", "description": "The total number of drop email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_forwards": {"name": "total_forwards", "description": "The total number of forward email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_opens": {"name": "total_opens", "description": "The total number of open email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_prints": {"name": "total_prints", "description": "The total number of print email events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_spam_reports": {"name": "total_spam_reports", "description": "The total number of unique email sends with a spam report email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unsubscribes": {"name": "total_unsubscribes", "description": "The total number of unique email sends with a unsubscribe email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_bounces": {"name": "total_unique_bounces", "description": "The total number of unique email sends with a bounce email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_clicks": {"name": "total_unique_clicks", "description": "The total number of unique email sends with a click email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_deferrals": {"name": "total_unique_deferrals", "description": "The total number of unique email sends with a deferral email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_deliveries": {"name": "total_unique_deliveries", "description": "The total number of unique email sends with a delivery email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_drops": {"name": "total_unique_drops", "description": "The total number of unique email sends with a drop email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_forwards": {"name": "total_unique_forwards", "description": "The total number of unique email sends with a forward email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_opens": {"name": "total_unique_opens", "description": "The total number of unique email sends with a opens email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_unique_prints": {"name": "total_unique_prints", "description": "The total number of unique email sends with a print email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/marketing.yml", "compiled_path": "target/compiled/hubspot/models/marketing/hubspot__email_campaigns.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541349.98278, "compiled_sql": "\n\n\nwith campaigns as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_campaign\n\n), email_sends as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__email_sends\n\n), email_metrics as (\n\n    select \n        email_campaign_id,\n        \n        sum(email_sends.bounces) as total_bounces,\n        count(distinct case when email_sends.bounces > 0 then email_send_id end) as total_unique_bounces\n        ,\n        \n        sum(email_sends.clicks) as total_clicks,\n        count(distinct case when email_sends.clicks > 0 then email_send_id end) as total_unique_clicks\n        ,\n        \n        sum(email_sends.deferrals) as total_deferrals,\n        count(distinct case when email_sends.deferrals > 0 then email_send_id end) as total_unique_deferrals\n        ,\n        \n        sum(email_sends.deliveries) as total_deliveries,\n        count(distinct case when email_sends.deliveries > 0 then email_send_id end) as total_unique_deliveries\n        ,\n        \n        sum(email_sends.drops) as total_drops,\n        count(distinct case when email_sends.drops > 0 then email_send_id end) as total_unique_drops\n        ,\n        \n        sum(email_sends.forwards) as total_forwards,\n        count(distinct case when email_sends.forwards > 0 then email_send_id end) as total_unique_forwards\n        ,\n        \n        sum(email_sends.opens) as total_opens,\n        count(distinct case when email_sends.opens > 0 then email_send_id end) as total_unique_opens\n        ,\n        \n        sum(email_sends.prints) as total_prints,\n        count(distinct case when email_sends.prints > 0 then email_send_id end) as total_unique_prints\n        ,\n        \n        sum(email_sends.spam_reports) as total_spam_reports,\n        count(distinct case when email_sends.spam_reports > 0 then email_send_id end) as total_unique_spam_reports\n        ,\n        \n        sum(email_sends.unsubscribes) as total_unsubscribes,\n        count(distinct case when email_sends.unsubscribes > 0 then email_send_id end) as total_unique_unsubscribes\n        \n        \n    from email_sends\n    group by 1\n\n), joined as (\n\n    select \n        campaigns.*,\n        \n        coalesce(email_metrics.total_bounces, 0) as total_bounces,\n        coalesce(email_metrics.total_unique_bounces, 0) as total_unique_bounces\n        ,\n        \n        coalesce(email_metrics.total_clicks, 0) as total_clicks,\n        coalesce(email_metrics.total_unique_clicks, 0) as total_unique_clicks\n        ,\n        \n        coalesce(email_metrics.total_deferrals, 0) as total_deferrals,\n        coalesce(email_metrics.total_unique_deferrals, 0) as total_unique_deferrals\n        ,\n        \n        coalesce(email_metrics.total_deliveries, 0) as total_deliveries,\n        coalesce(email_metrics.total_unique_deliveries, 0) as total_unique_deliveries\n        ,\n        \n        coalesce(email_metrics.total_drops, 0) as total_drops,\n        coalesce(email_metrics.total_unique_drops, 0) as total_unique_drops\n        ,\n        \n        coalesce(email_metrics.total_forwards, 0) as total_forwards,\n        coalesce(email_metrics.total_unique_forwards, 0) as total_unique_forwards\n        ,\n        \n        coalesce(email_metrics.total_opens, 0) as total_opens,\n        coalesce(email_metrics.total_unique_opens, 0) as total_unique_opens\n        ,\n        \n        coalesce(email_metrics.total_prints, 0) as total_prints,\n        coalesce(email_metrics.total_unique_prints, 0) as total_unique_prints\n        ,\n        \n        coalesce(email_metrics.total_spam_reports, 0) as total_spam_reports,\n        coalesce(email_metrics.total_unique_spam_reports, 0) as total_unique_spam_reports\n        ,\n        \n        coalesce(email_metrics.total_unsubscribes, 0) as total_unsubscribes,\n        coalesce(email_metrics.total_unique_unsubscribes, 0) as total_unique_unsubscribes\n        \n        \n    from campaigns\n    left join email_metrics\n        on campaigns.email_campaign_id = email_metrics.email_campaign_id\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__email_campaigns"}, "model.hubspot.hubspot__email_event_dropped": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_dropped_enabled'])) }}\n\n{{ email_events_joined(var('email_event_dropped')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_dropped", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_dropped"], "unique_id": "model.hubspot.hubspot__email_event_dropped", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/email_events/hubspot__email_event_dropped.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_dropped.sql", "name": "hubspot__email_event_dropped", "alias": "hubspot__email_event_dropped", "checksum": {"name": "sha256", "checksum": "9db280fae885521922e3335072d40d3652dbce7de52ac8d53bb8849255b1a7bf"}, "tags": [], "refs": [["stg_hubspot__email_event_dropped"], ["stg_hubspot__email_event"], ["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "Each record represents a DROPPED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bcc_emails": {"name": "bcc_emails", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drop_message": {"name": "drop_message", "description": "The raw message describing why the email message was dropped. This will usually provide additional details beyond 'dropReason'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drop_reason": {"name": "drop_reason", "description": "The reason why the email message was dropped. See below for the possible values.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reply_to_email": {"name": "reply_to_email", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "compiled_path": "target/compiled/hubspot/models/marketing/email_events/hubspot__email_event_dropped.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.009228, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_dropped\n\n), events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), contacts as (\n\n    select *\n    from  \n            prod_analytics.hubspot_source.stg_hubspot__contact \n        \n\n), events_joined as (\n\n    select \n        base.*,\n        events.created_timestamp,\n        events.email_campaign_id,\n        events.recipient_email_address,\n        events.sent_timestamp as email_send_timestamp,\n        events.sent_by_event_id as email_send_id\n    from base\n    left join events\n        using (event_id)\n\n), contacts_joined as (\n\n    select \n        events_joined.*,\n        contacts.contact_id\n    from events_joined\n    left join contacts\n        on events_joined.recipient_email_address = contacts.email\n\n)\n\nselect *\nfrom contacts_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__email_event_dropped"}, "model.hubspot.hubspot__email_event_deferred": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_deferred_enabled'])) }}\n\n{{ email_events_joined(var('email_event_deferred')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_deferred", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_deferred"], "unique_id": "model.hubspot.hubspot__email_event_deferred", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/email_events/hubspot__email_event_deferred.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_deferred.sql", "name": "hubspot__email_event_deferred", "alias": "hubspot__email_event_deferred", "checksum": {"name": "sha256", "checksum": "21fed29e600a6ab8cf2ed92245ae1890edffd68c2609673addbfd37880f4f02b"}, "tags": [], "refs": [["stg_hubspot__email_event_deferred"], ["stg_hubspot__email_event"], ["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "Each record represents a DEFERRED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attempt_number": {"name": "attempt_number", "description": "The delivery attempt number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "compiled_path": "target/compiled/hubspot/models/marketing/email_events/hubspot__email_event_deferred.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.0053718, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_deferred\n\n), events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), contacts as (\n\n    select *\n    from  \n            prod_analytics.hubspot_source.stg_hubspot__contact \n        \n\n), events_joined as (\n\n    select \n        base.*,\n        events.created_timestamp,\n        events.email_campaign_id,\n        events.recipient_email_address,\n        events.sent_timestamp as email_send_timestamp,\n        events.sent_by_event_id as email_send_id\n    from base\n    left join events\n        using (event_id)\n\n), contacts_joined as (\n\n    select \n        events_joined.*,\n        contacts.contact_id\n    from events_joined\n    left join contacts\n        on events_joined.recipient_email_address = contacts.email\n\n)\n\nselect *\nfrom contacts_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__email_event_deferred"}, "model.hubspot.hubspot__email_event_opens": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_open_enabled'])) }}\n\n{{ email_events_joined(var('email_event_open')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_open", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_opens"], "unique_id": "model.hubspot.hubspot__email_event_opens", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/email_events/hubspot__email_event_opens.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_opens.sql", "name": "hubspot__email_event_opens", "alias": "hubspot__email_event_opens", "checksum": {"name": "sha256", "checksum": "aba80489d4916d6105413d9974c562b0289f0788b45806048634728a518f5063"}, "tags": [], "refs": [["stg_hubspot__email_event_open"], ["stg_hubspot__email_event"], ["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "Each record represents a OPEN email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_open": {"name": "duration_open", "description": "If provided and nonzero, the approximate number of milliseconds the user had opened the email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "compiled_path": "target/compiled/hubspot/models/marketing/email_events/hubspot__email_event_opens.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.0131881, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_open\n\n), events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), contacts as (\n\n    select *\n    from  \n            prod_analytics.hubspot_source.stg_hubspot__contact \n        \n\n), events_joined as (\n\n    select \n        base.*,\n        events.created_timestamp,\n        events.email_campaign_id,\n        events.recipient_email_address,\n        events.sent_timestamp as email_send_timestamp,\n        events.sent_by_event_id as email_send_id\n    from base\n    left join events\n        using (event_id)\n\n), contacts_joined as (\n\n    select \n        events_joined.*,\n        contacts.contact_id\n    from events_joined\n    left join contacts\n        on events_joined.recipient_email_address = contacts.email\n\n)\n\nselect *\nfrom contacts_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__email_event_opens"}, "model.hubspot.hubspot__email_event_delivered": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_delivered_enabled'])) }}\n\n{{ email_events_joined(var('email_event_delivered')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_delivered", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_delivered"], "unique_id": "model.hubspot.hubspot__email_event_delivered", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/email_events/hubspot__email_event_delivered.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_delivered.sql", "name": "hubspot__email_event_delivered", "alias": "hubspot__email_event_delivered", "checksum": {"name": "sha256", "checksum": "a0bf3a4ea55c05767c8e023e60bc7d5ada0bb60bf1425376a74c6af9d5610f80"}, "tags": [], "refs": [["stg_hubspot__email_event_delivered"], ["stg_hubspot__email_event"], ["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "Each record represents a DELIVERED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "smtp_id": {"name": "smtp_id", "description": "An ID attached to the message by HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "compiled_path": "target/compiled/hubspot/models/marketing/email_events/hubspot__email_event_delivered.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.006911, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_delivered\n\n), events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), contacts as (\n\n    select *\n    from  \n            prod_analytics.hubspot_source.stg_hubspot__contact \n        \n\n), events_joined as (\n\n    select \n        base.*,\n        events.created_timestamp,\n        events.email_campaign_id,\n        events.recipient_email_address,\n        events.sent_timestamp as email_send_timestamp,\n        events.sent_by_event_id as email_send_id\n    from base\n    left join events\n        using (event_id)\n\n), contacts_joined as (\n\n    select \n        events_joined.*,\n        contacts.contact_id\n    from events_joined\n    left join contacts\n        on events_joined.recipient_email_address = contacts.email\n\n)\n\nselect *\nfrom contacts_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__email_event_delivered"}, "model.hubspot.hubspot__email_event_status_change": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_status_change_enabled'])) }}\n\n{{ email_events_joined(var('email_event_status_change')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_status_change", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_status_change"], "unique_id": "model.hubspot.hubspot__email_event_status_change", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/email_events/hubspot__email_event_status_change.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_status_change.sql", "name": "hubspot__email_event_status_change", "alias": "hubspot__email_event_status_change", "checksum": {"name": "sha256", "checksum": "877fbfc520033497432cddf34df419233cce3b916eb27a3384837fb2b6077ad3"}, "tags": [], "refs": [["stg_hubspot__email_event_status_change"], ["stg_hubspot__email_event"], ["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "Each record represents a STATUS_CHANGE email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source of the subscription change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_bounced": {"name": "is_bounced", "description": "A HubSpot employee explicitly initiated the status change to block messages to the recipient. \n(Note this usage has been deprecated in favor of dropping messages with a 'dropReason' of BLOCKED_ADDRESS.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requested_by_email": {"name": "requested_by_email", "description": "The email address of the person requesting the change on behalf of the recipient. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_status": {"name": "subscription_status", "description": "The recipient's portal subscription status. \nNote that if this is 'UNSUBSCRIBED', the property 'subscriptions' is not necessarily an empty array, nor are all \nsubscriptions contained in it necessarily going to have their statuses set to 'UNSUBSCRIBED'.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscriptions": {"name": "subscriptions", "description": "An array of JSON objects representing the status of subscriptions for the recipient. \nEach JSON subscription object is comprised of the properties: 'id', 'status'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "compiled_path": "target/compiled/hubspot/models/marketing/email_events/hubspot__email_event_status_change.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.0208561, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_status_change\n\n), events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), contacts as (\n\n    select *\n    from  \n            prod_analytics.hubspot_source.stg_hubspot__contact \n        \n\n), events_joined as (\n\n    select \n        base.*,\n        events.created_timestamp,\n        events.email_campaign_id,\n        events.recipient_email_address,\n        events.sent_timestamp as email_send_timestamp,\n        events.sent_by_event_id as email_send_id\n    from base\n    left join events\n        using (event_id)\n\n), contacts_joined as (\n\n    select \n        events_joined.*,\n        contacts.contact_id\n    from events_joined\n    left join contacts\n        on events_joined.recipient_email_address = contacts.email\n\n)\n\nselect *\nfrom contacts_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__email_event_status_change"}, "model.hubspot.hubspot__email_event_sent": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_sent_enabled'])) }}\n\n{{ email_events_joined(var('email_event_sent')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_sent", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_sent"], "unique_id": "model.hubspot.hubspot__email_event_sent", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/email_events/hubspot__email_event_sent.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_sent.sql", "name": "hubspot__email_event_sent", "alias": "hubspot__email_event_sent", "checksum": {"name": "sha256", "checksum": "d1178a91839f9f32bd6d11ae880ffa99dd2ebbc3680ad949d028aea275f070e4"}, "tags": [], "refs": [["stg_hubspot__email_event_sent"], ["stg_hubspot__email_event"], ["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "Each record represents a SENT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bcc_emails": {"name": "bcc_emails", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cc_emails": {"name": "cc_emails", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subject": {"name": "email_subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reply_to_email": {"name": "reply_to_email", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "compiled_path": "target/compiled/hubspot/models/marketing/email_events/hubspot__email_event_sent.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.0172632, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_sent\n\n), events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), contacts as (\n\n    select *\n    from  \n            prod_analytics.hubspot_source.stg_hubspot__contact \n        \n\n), events_joined as (\n\n    select \n        base.*,\n        events.created_timestamp,\n        events.email_campaign_id,\n        events.recipient_email_address,\n        events.sent_timestamp as email_send_timestamp,\n        events.sent_by_event_id as email_send_id\n    from base\n    left join events\n        using (event_id)\n\n), contacts_joined as (\n\n    select \n        events_joined.*,\n        contacts.contact_id\n    from events_joined\n    left join contacts\n        on events_joined.recipient_email_address = contacts.email\n\n)\n\nselect *\nfrom contacts_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__email_event_sent"}, "model.hubspot.hubspot__email_event_clicks": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_click_enabled'])) }}\n\n{{ email_events_joined(var('email_event_click')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_click", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_clicks"], "unique_id": "model.hubspot.hubspot__email_event_clicks", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/email_events/hubspot__email_event_clicks.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_clicks.sql", "name": "hubspot__email_event_clicks", "alias": "hubspot__email_event_clicks", "checksum": {"name": "sha256", "checksum": "4bf574d2286d34210c35025fa04875d1d4f1e0ab43cfaea0387675cfbc1b39d6"}, "tags": [], "refs": [["stg_hubspot__email_event_click"], ["stg_hubspot__email_event"], ["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "Each record represents a CLICK email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_url": {"name": "click_url", "description": "The URL within the message that the recipient clicked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "geo_location": {"name": "geo_location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referer_url": {"name": "referer_url", "description": "The URL of the webpage that linked to the URL clicked. Whether this is provided, and what its value is, is determined by the recipient's email client.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "compiled_path": "target/compiled/hubspot/models/marketing/email_events/hubspot__email_event_clicks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.0037131, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_click\n\n), events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), contacts as (\n\n    select *\n    from  \n            prod_analytics.hubspot_source.stg_hubspot__contact \n        \n\n), events_joined as (\n\n    select \n        base.*,\n        events.created_timestamp,\n        events.email_campaign_id,\n        events.recipient_email_address,\n        events.sent_timestamp as email_send_timestamp,\n        events.sent_by_event_id as email_send_id\n    from base\n    left join events\n        using (event_id)\n\n), contacts_joined as (\n\n    select \n        events_joined.*,\n        contacts.contact_id\n    from events_joined\n    left join contacts\n        on events_joined.recipient_email_address = contacts.email\n\n)\n\nselect *\nfrom contacts_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__email_event_clicks"}, "model.hubspot.hubspot__email_event_bounce": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_bounce_enabled'])) }}\n\n{{ email_events_joined(var('email_event_bounce')) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_bounce", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_bounce"], "unique_id": "model.hubspot.hubspot__email_event_bounce", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/email_events/hubspot__email_event_bounce.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_bounce.sql", "name": "hubspot__email_event_bounce", "alias": "hubspot__email_event_bounce", "checksum": {"name": "sha256", "checksum": "994e1d2ef6b46304a20dfc45fd515fc0ee546b02502626d794aa525d1e51d709"}, "tags": [], "refs": [["stg_hubspot__email_event_bounce"], ["stg_hubspot__email_event"], ["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "Each record represents a BOUNCE email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bounce_category": {"name": "bounce_category", "description": "The best-guess of the type of bounce encountered. \nIf an appropriate category couldn't be determined, this property is omitted. See below for the possible values. \nNote that this is a derived value, and may be modified at any time to improve the accuracy of classification.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "returned_response": {"name": "returned_response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "returned_status": {"name": "returned_status", "description": "The status code returned from the recipient's email server.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient_email_address": {"name": "recipient_email_address", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_timestamp": {"name": "email_send_timestamp", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_id": {"name": "email_send_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "compiled_path": "target/compiled/hubspot/models/marketing/email_events/hubspot__email_event_bounce.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.001434, "compiled_sql": "\n\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event_bounce\n\n), events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), contacts as (\n\n    select *\n    from  \n            prod_analytics.hubspot_source.stg_hubspot__contact \n        \n\n), events_joined as (\n\n    select \n        base.*,\n        events.created_timestamp,\n        events.email_campaign_id,\n        events.recipient_email_address,\n        events.sent_timestamp as email_send_timestamp,\n        events.sent_by_event_id as email_send_id\n    from base\n    left join events\n        using (event_id)\n\n), contacts_joined as (\n\n    select \n        events_joined.*,\n        contacts.contact_id\n    from events_joined\n    left join contacts\n        on events_joined.recipient_email_address = contacts.email\n\n)\n\nselect *\nfrom contacts_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__email_event_bounce"}, "model.hubspot.hubspot__contact_history": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_property_enabled'])) }}\n\nwith history as (\n\n    select *\n    from {{ var('contact_property_history') }}\n\n), windows as (\n\n    select\n        contact_id,\n        field_name,\n        change_source,\n        change_source_id,\n        change_timestamp as valid_from,\n        new_value,\n        lead(change_timestamp) over (partition by contact_id, field_name order by change_timestamp) as valid_to\n    from history\n\n), surrogate as (\n\n    select \n        windows.*,\n        {{ dbt_utils.surrogate_key(['field_name','contact_id','valid_from']) }} as id\n    from windows\n\n)\n\nselect *\nfrom surrogate", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.dbt_utils.surrogate_key"], "nodes": ["model.hubspot_source.stg_hubspot__contact_property_history"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "history", "hubspot__contact_history"], "unique_id": "model.hubspot.hubspot__contact_history", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/history/hubspot__contact_history.sql", "original_file_path": "models/marketing/history/hubspot__contact_history.sql", "name": "hubspot__contact_history", "alias": "hubspot__contact_history", "checksum": {"name": "sha256", "checksum": "89c6d7ddfd1e53d8f77f3acd3cce63bad477dbd075b2ffd14b0f3a5dc5b53b76"}, "tags": [], "refs": [["stg_hubspot__contact_property_history"]], "sources": [], "metrics": [], "description": "Each record represents a change to contact record in Hubspot; the grain of this model is contact_id -> field_name -> valid_to.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source": {"name": "change_source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_source_id": {"name": "change_source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "The timestamp the change was valid from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "The timestamp the change was valid to. Null if still valid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_value": {"name": "new_value", "description": "The new value of the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/history/history.yml", "compiled_path": "target/compiled/hubspot/models/marketing/history/hubspot__contact_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.042816, "compiled_sql": "\n\nwith history as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__contact_property_history\n\n), windows as (\n\n    select\n        contact_id,\n        field_name,\n        change_source,\n        change_source_id,\n        change_timestamp as valid_from,\n        new_value,\n        lead(change_timestamp) over (partition by contact_id, field_name order by change_timestamp) as valid_to\n    from history\n\n), surrogate as (\n\n    select \n        windows.*,\n        md5(cast(coalesce(cast(field_name as \n    varchar\n), '') || '-' || coalesce(cast(contact_id as \n    varchar\n), '') || '-' || coalesce(cast(valid_from as \n    varchar\n), '') as \n    varchar\n)) as id\n    from windows\n\n)\n\nselect *\nfrom surrogate", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.hubspot__contact_history"}, "model.hubspot.int_hubspot__engagement_metrics__by_contact": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_sales_enabled','hubspot_engagement_enabled','hubspot_engagement_contact_enabled'])) }}\n\nwith engagements as (\n\n    select *\n    from {{ ref('hubspot__engagements') }}\n\n), engagement_contacts as (\n\n    select *\n    from {{ var('engagement_contact') }}\n\n), engagement_contacts_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_contacts.contact_id\n    from engagements\n    inner join engagement_contacts\n        using (engagement_id)\n\n), engagement_contacts_agg as (\n\n    {{ engagements_aggregated('engagement_contacts_joined', 'contact_id') }}\n\n)\n\nselect *\nfrom engagement_contacts_agg", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.engagements_aggregated"], "nodes": ["model.hubspot.hubspot__engagements", "model.hubspot_source.stg_hubspot__engagement_contact"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "intermediate", "int_hubspot__engagement_metrics__by_contact"], "unique_id": "model.hubspot.int_hubspot__engagement_metrics__by_contact", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/intermediate/int_hubspot__engagement_metrics__by_contact.sql", "original_file_path": "models/marketing/intermediate/int_hubspot__engagement_metrics__by_contact.sql", "name": "int_hubspot__engagement_metrics__by_contact", "alias": "int_hubspot__engagement_metrics__by_contact", "checksum": {"name": "sha256", "checksum": "83eba876405c4e286e4ac25814521432fed4bedb2cd0c2a3ece56692fbc5cb76"}, "tags": [], "refs": [["hubspot__engagements"], ["stg_hubspot__engagement_contact"]], "sources": [], "metrics": [], "description": "", "columns": {"contact_id": {"name": "contact_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/intermediate/intermediate.yml", "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/int_hubspot__engagement_metrics__by_contact.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.0495832, "compiled_sql": "\n\nwith engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), engagement_contacts as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_contact\n\n), engagement_contacts_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_contacts.contact_id\n    from engagements\n    inner join engagement_contacts\n        using (engagement_id)\n\n), engagement_contacts_agg as (\n\n    \n\n    select\n        contact_id,\n        count(case when engagement_type = 'NOTE' then contact_id end) as count_engagement_notes,\n        count(case when engagement_type = 'TASK' then contact_id end) as count_engagement_tasks,\n        count(case when engagement_type = 'CALL' then contact_id end) as count_engagement_calls,\n        count(case when engagement_type = 'MEETING' then contact_id end) as count_engagement_meetings,\n        count(case when engagement_type = 'EMAIL' then contact_id end) as count_engagement_emails,\n        count(case when engagement_type = 'INCOMING_EMAIL' then contact_id end) as count_engagement_incoming_emails,\n        count(case when engagement_type = 'FORWARDED_EMAIL' then contact_id end) as count_engagement_forwarded_emails\n    from engagement_contacts_joined\n    group by 1\n\n\n\n)\n\nselect *\nfrom engagement_contacts_agg", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.hubspot.int_hubspot__email_event_aggregates": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled'])) }}\n\nwith events as (\n\n    select *\n    from {{ var('email_event') }}\n\n), aggregates as (\n\n    select\n        sent_by_event_id as email_send_id,\n        count(case when event_type = 'OPEN' then sent_by_event_id end) as opens,\n        count(case when event_type = 'SENT' then sent_by_event_id end) as sends,\n        count(case when event_type = 'DELIVERED' then sent_by_event_id end) as deliveries,\n        count(case when event_type = 'DROPPED' then sent_by_event_id end) as drops,\n        count(case when event_type = 'CLICK' then sent_by_event_id end) as clicks,\n        count(case when event_type = 'FORWARD' then sent_by_event_id end) as forwards,\n        count(case when event_type = 'DEFERRED' then sent_by_event_id end) as deferrals,\n        count(case when event_type = 'BOUNCE' then sent_by_event_id end) as bounces,\n        count(case when event_type = 'SPAMREPORT' then sent_by_event_id end) as spam_reports,\n        count(case when event_type = 'PRINT' then sent_by_event_id end) as prints\n    from events\n    where sent_by_event_id is not null\n    group by 1\n\n)\n\nselect *\nfrom aggregates", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot_source.stg_hubspot__email_event"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "intermediate", "int_hubspot__email_event_aggregates"], "unique_id": "model.hubspot.int_hubspot__email_event_aggregates", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/intermediate/int_hubspot__email_event_aggregates.sql", "original_file_path": "models/marketing/intermediate/int_hubspot__email_event_aggregates.sql", "name": "int_hubspot__email_event_aggregates", "alias": "int_hubspot__email_event_aggregates", "checksum": {"name": "sha256", "checksum": "c0a91a82af153e1cef4c6056ef7dc9386dc907a3806fc053a47db4c600d7d5ef"}, "tags": [], "refs": [["stg_hubspot__email_event"]], "sources": [], "metrics": [], "description": "", "columns": {"email_send_id": {"name": "email_send_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/intermediate/intermediate.yml", "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/int_hubspot__email_event_aggregates.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.0491982, "compiled_sql": "\n\nwith events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), aggregates as (\n\n    select\n        sent_by_event_id as email_send_id,\n        count(case when event_type = 'OPEN' then sent_by_event_id end) as opens,\n        count(case when event_type = 'SENT' then sent_by_event_id end) as sends,\n        count(case when event_type = 'DELIVERED' then sent_by_event_id end) as deliveries,\n        count(case when event_type = 'DROPPED' then sent_by_event_id end) as drops,\n        count(case when event_type = 'CLICK' then sent_by_event_id end) as clicks,\n        count(case when event_type = 'FORWARD' then sent_by_event_id end) as forwards,\n        count(case when event_type = 'DEFERRED' then sent_by_event_id end) as deferrals,\n        count(case when event_type = 'BOUNCE' then sent_by_event_id end) as bounces,\n        count(case when event_type = 'SPAMREPORT' then sent_by_event_id end) as spam_reports,\n        count(case when event_type = 'PRINT' then sent_by_event_id end) as prints\n    from events\n    where sent_by_event_id is not null\n    group by 1\n\n)\n\nselect *\nfrom aggregates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.hubspot.int_hubspot__email_aggregate_status_change": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_status_change_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('hubspot__email_event_status_change') }}\n\n), aggregates as (\n\n    select\n        email_campaign_id,\n        email_send_id,\n        count(case when subscription_status = 'UNSUBSCRIBED' then 1 end) as unsubscribes\n    from base\n    where email_send_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregates", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot.hubspot__email_event_status_change"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "intermediate", "int_hubspot__email_aggregate_status_change"], "unique_id": "model.hubspot.int_hubspot__email_aggregate_status_change", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/intermediate/int_hubspot__email_aggregate_status_change.sql", "original_file_path": "models/marketing/intermediate/int_hubspot__email_aggregate_status_change.sql", "name": "int_hubspot__email_aggregate_status_change", "alias": "int_hubspot__email_aggregate_status_change", "checksum": {"name": "sha256", "checksum": "038d0982148b2999860d6d971cceca3a820a052270d4ac0d52d7884220dbd4dd"}, "tags": [], "refs": [["hubspot__email_event_status_change"]], "sources": [], "metrics": [], "description": "", "columns": {"email_send_id": {"name": "email_send_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/intermediate/intermediate.yml", "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/int_hubspot__email_aggregate_status_change.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.048416, "compiled_sql": "\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__email_event_status_change\n\n), aggregates as (\n\n    select\n        email_campaign_id,\n        email_send_id,\n        count(case when subscription_status = 'UNSUBSCRIBED' then 1 end) as unsubscribes\n    from base\n    where email_send_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.hubspot.int_hubspot__email_metrics__by_contact_list": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_contact_list_member_enabled']), materialized='table') }}\n\nwith email_sends as (\n\n    select *\n    from {{ ref('hubspot__email_sends') }}\n\n), contact_list_member as (\n\n    select *\n    from {{ var('contact_list_member') }}\n\n), joined as (\n\n    select\n        email_sends.*,\n        contact_list_member.contact_list_id\n    from email_sends\n    left join contact_list_member\n        using (contact_id)\n    where contact_list_member.contact_list_id is not null\n\n), email_metrics as (\n\n    select \n        contact_list_id,\n        {% for metric in var('email_metrics') %}\n        sum({{ metric }}) as total_{{ metric }},\n        count(distinct case when {{ metric }} > 0 then email_send_id end) as total_unique_{{ metric }}\n        {% if not loop.last %},{% endif %}\n        {% endfor %}\n    from joined\n    group by 1\n\n)\n\nselect *\nfrom email_metrics", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.hubspot.hubspot__email_sends", "model.hubspot_source.stg_hubspot__contact_list_member"]}, "config": {"enabled": true, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "intermediate", "int_hubspot__email_metrics__by_contact_list"], "unique_id": "model.hubspot.int_hubspot__email_metrics__by_contact_list", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/intermediate/int_hubspot__email_metrics__by_contact_list.sql", "original_file_path": "models/marketing/intermediate/int_hubspot__email_metrics__by_contact_list.sql", "name": "int_hubspot__email_metrics__by_contact_list", "alias": "int_hubspot__email_metrics__by_contact_list", "checksum": {"name": "sha256", "checksum": "e6cb79f4682e88074fc16e4cd576a1b505ccf8b65fdc8c0a5e9f678d43534c05"}, "tags": [], "refs": [["hubspot__email_sends"], ["stg_hubspot__contact_list_member"]], "sources": [], "metrics": [], "description": "", "columns": {"contact_list_id": {"name": "contact_list_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/intermediate/intermediate.yml", "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/int_hubspot__email_metrics__by_contact_list.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": true}, "created_at": 1661541350.0488162, "compiled_sql": "\n\nwith email_sends as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__email_sends\n\n), contact_list_member as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__contact_list_member\n\n), joined as (\n\n    select\n        email_sends.*,\n        contact_list_member.contact_list_id\n    from email_sends\n    left join contact_list_member\n        using (contact_id)\n    where contact_list_member.contact_list_id is not null\n\n), email_metrics as (\n\n    select \n        contact_list_id,\n        \n        sum(bounces) as total_bounces,\n        count(distinct case when bounces > 0 then email_send_id end) as total_unique_bounces\n        ,\n        \n        sum(clicks) as total_clicks,\n        count(distinct case when clicks > 0 then email_send_id end) as total_unique_clicks\n        ,\n        \n        sum(deferrals) as total_deferrals,\n        count(distinct case when deferrals > 0 then email_send_id end) as total_unique_deferrals\n        ,\n        \n        sum(deliveries) as total_deliveries,\n        count(distinct case when deliveries > 0 then email_send_id end) as total_unique_deliveries\n        ,\n        \n        sum(drops) as total_drops,\n        count(distinct case when drops > 0 then email_send_id end) as total_unique_drops\n        ,\n        \n        sum(forwards) as total_forwards,\n        count(distinct case when forwards > 0 then email_send_id end) as total_unique_forwards\n        ,\n        \n        sum(opens) as total_opens,\n        count(distinct case when opens > 0 then email_send_id end) as total_unique_opens\n        ,\n        \n        sum(prints) as total_prints,\n        count(distinct case when prints > 0 then email_send_id end) as total_unique_prints\n        ,\n        \n        sum(spam_reports) as total_spam_reports,\n        count(distinct case when spam_reports > 0 then email_send_id end) as total_unique_spam_reports\n        ,\n        \n        sum(unsubscribes) as total_unsubscribes,\n        count(distinct case when unsubscribes > 0 then email_send_id end) as total_unique_unsubscribes\n        \n        \n    from joined\n    group by 1\n\n)\n\nselect *\nfrom email_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.hubspot.int_hubspot__email_metrics__by_contact_list"}, "model.stripe_source.stg_stripe__invoice_line_item": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__invoice_line_item_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__invoice_line_item_tmp')),\n                staging_columns=get_invoice_line_item_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_line_item_id,\n        invoice_id,\n        amount,\n        currency,\n        description,\n        discountable as is_discountable,\n        plan_id,\n        proration,\n        quantity,\n        subscription_id,\n        subscription_item_id,\n        type,\n        unique_id,\n        period_start,\n        period_end\n    from fields\n\n    {% if var('using_invoice_line_sub_filter', true) %}\n    where id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n    {% endif %}\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_invoice_line_item_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__invoice_line_item_tmp", "model.stripe_source.stg_stripe__invoice_line_item_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__invoice_line_item"], "unique_id": "model.stripe_source.stg_stripe__invoice_line_item", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__invoice_line_item.sql", "original_file_path": "models/stg_stripe__invoice_line_item.sql", "name": "stg_stripe__invoice_line_item", "alias": "stg_stripe__invoice_line_item", "checksum": {"name": "sha256", "checksum": "2d5b7206d5e6902ff0d18a5f495af92512f0c0020278f77b8f7d71bb6541188a"}, "tags": [], "refs": [["stg_stripe__invoice_line_item_tmp"], ["stg_stripe__invoice_line_item_tmp"]], "sources": [], "metrics": [], "description": "The different items that an invoice contains", "columns": {"invoice_line_item_id": {"name": "invoice_line_item_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The ID of the invoice this item is a part of", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_discountable": {"name": "is_discountable", "description": "If true, discounts will apply to this line item. Always false for prorations.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID of the plan of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "proration": {"name": "proration", "description": "Whether this is a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The ID of the subscription that the invoice item pertains to, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_item_id": {"name": "subscription_item_id", "description": "The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "A string identifying the type of the source of this line item, either an invoice item or a subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_id": {"name": "unique_id", "description": "A unique id generated for old invoice ID's from a past version of the API", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__invoice_line_item.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source", "enabled": true}, "created_at": 1661541350.081693, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__invoice_line_item_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discountable\n    \n as \n    \n    discountable\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    proration\n    \n as \n    \n    proration\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    subscription_item_id\n    \n as \n    \n    subscription_item_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unique_id\n    \n as \n    \n    unique_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_line_item_id,\n        invoice_id,\n        amount,\n        currency,\n        description,\n        discountable as is_discountable,\n        plan_id,\n        proration,\n        quantity,\n        subscription_id,\n        subscription_item_id,\n        type,\n        unique_id,\n        period_start,\n        period_end\n    from fields\n\n    \n    where id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n    \n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__invoice_line_item"}, "model.stripe_source.stg_stripe__payment_intent": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__payment_intent_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__payment_intent_tmp')),\n                staging_columns=get_payment_intent_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_intent_id,\n        amount,\n        amount_capturable,\n        amount_received,\n        application,\n        application_fee_amount,\n        canceled_at,\n        cancellation_reason,\n        capture_method,\n        confirmation_method,\n        created as created_at,\n        currency,\n        customer_id,\n        description,\n        metadata,\n        payment_method_id,\n        receipt_email,\n        statement_descriptor,\n        status\n\n        {% if var('stripe__payment_intent_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__payment_intent_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_payment_intent_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__payment_intent_tmp", "model.stripe_source.stg_stripe__payment_intent_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__payment_intent"], "unique_id": "model.stripe_source.stg_stripe__payment_intent", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__payment_intent.sql", "original_file_path": "models/stg_stripe__payment_intent.sql", "name": "stg_stripe__payment_intent", "alias": "stg_stripe__payment_intent", "checksum": {"name": "sha256", "checksum": "e3b6323e9c978d72576a7c4e89e10e8e304b6eda9242f9bb602d503add644cd8"}, "tags": [], "refs": [["stg_stripe__payment_intent_tmp"], ["stg_stripe__payment_intent_tmp"]], "sources": [], "metrics": [], "description": "A Payment Intent guides you through the process of collecting a payment from your customer.", "columns": {"payment_intent_id": {"name": "payment_intent_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_capturable": {"name": "amount_capturable", "description": "Amount that can be captured from this PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_received": {"name": "amount_received", "description": "Amount that was collected by this PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that created the PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the resulting payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "Populated when status is canceled, this is the time at which the PaymentIntent was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancellation_reason": {"name": "cancellation_reason", "description": "Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "capture_method": {"name": "capture_method", "description": "Controls when the funds will be captured from the customer\u2019s account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "confirmation_method": {"name": "confirmation_method", "description": "Whether confirmed automatically or manually", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the Customer this PaymentIntent belongs to, if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method used in this PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "Email address that the receipt for the resulting payment will be sent to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "For non-card charges, you can use this value as the complete description that appears on your customers\u2019 statements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__payment_intent.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source"}, "created_at": 1661541350.074378, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__payment_intent_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_capturable\n    \n as \n    \n    amount_capturable\n    \n, \n    \n    \n    amount_received\n    \n as \n    \n    amount_received\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    capture_method\n    \n as \n    \n    capture_method\n    \n, \n    \n    \n    confirmation_method\n    \n as \n    \n    confirmation_method\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_payment_error_charge_id\n    \n as \n    \n    last_payment_error_charge_id\n    \n, \n    \n    \n    last_payment_error_code\n    \n as \n    \n    last_payment_error_code\n    \n, \n    \n    \n    last_payment_error_decline_code\n    \n as \n    \n    last_payment_error_decline_code\n    \n, \n    \n    \n    last_payment_error_doc_url\n    \n as \n    \n    last_payment_error_doc_url\n    \n, \n    \n    \n    last_payment_error_message\n    \n as \n    \n    last_payment_error_message\n    \n, \n    \n    \n    last_payment_error_param\n    \n as \n    \n    last_payment_error_param\n    \n, \n    \n    \n    last_payment_error_source_id\n    \n as \n    \n    last_payment_error_source_id\n    \n, \n    \n    \n    last_payment_error_type\n    \n as \n    \n    last_payment_error_type\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_intent_id,\n        amount,\n        amount_capturable,\n        amount_received,\n        application,\n        application_fee_amount,\n        canceled_at,\n        cancellation_reason,\n        capture_method,\n        confirmation_method,\n        created as created_at,\n        currency,\n        customer_id,\n        description,\n        metadata,\n        payment_method_id,\n        receipt_email,\n        statement_descriptor,\n        status\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__payment_intent"}, "model.stripe_source.stg_stripe__payment_method": {"raw_sql": "{{ config(enabled=var('using_payment_method', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__payment_method_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__payment_method_tmp')),\n                staging_columns=get_payment_method_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        created as created_at,\n        customer_id,\n        metadata,\n        type\n\n        {% if var('stripe__payment_method_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__payment_method_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_payment_method_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__payment_method_tmp", "model.stripe_source.stg_stripe__payment_method_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__payment_method"], "unique_id": "model.stripe_source.stg_stripe__payment_method", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__payment_method.sql", "original_file_path": "models/stg_stripe__payment_method.sql", "name": "stg_stripe__payment_method", "alias": "stg_stripe__payment_method", "checksum": {"name": "sha256", "checksum": "0f82026b01a94a317b2d256cb915f8d04e02f78d5bf2a7db268007716197f25a"}, "tags": [], "refs": [["stg_stripe__payment_method_tmp"], ["stg_stripe__payment_method_tmp"]], "sources": [], "metrics": [], "description": "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__payment_method.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source", "enabled": true}, "created_at": 1661541350.075907, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__payment_method_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    billing_detail_address_city\n    \n as \n    \n    billing_detail_address_city\n    \n, \n    \n    \n    billing_detail_address_country\n    \n as \n    \n    billing_detail_address_country\n    \n, \n    \n    \n    billing_detail_address_line_1\n    \n as \n    \n    billing_detail_address_line_1\n    \n, \n    \n    \n    billing_detail_address_line_2\n    \n as \n    \n    billing_detail_address_line_2\n    \n, \n    \n    \n    billing_detail_address_postal_code\n    \n as \n    \n    billing_detail_address_postal_code\n    \n, \n    \n    \n    billing_detail_address_state\n    \n as \n    \n    billing_detail_address_state\n    \n, \n    \n    \n    billing_detail_email\n    \n as \n    \n    billing_detail_email\n    \n, \n    \n    \n    billing_detail_name\n    \n as \n    \n    billing_detail_name\n    \n, \n    \n    \n    billing_detail_phone\n    \n as \n    \n    billing_detail_phone\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        created as created_at,\n        customer_id,\n        metadata,\n        type\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__payment_method"}, "model.stripe_source.stg_stripe__refund": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__refund_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__refund_tmp')),\n                staging_columns=get_refund_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        amount,\n        balance_transaction_id,\n        charge_id,\n        created as created_at,\n        currency,\n        description,\n        metadata,\n        reason,\n        receipt_number,\n        status\n\n        {% if var('stripe__refund_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__refund_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_refund_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__refund_tmp", "model.stripe_source.stg_stripe__refund_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__refund"], "unique_id": "model.stripe_source.stg_stripe__refund", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__refund.sql", "original_file_path": "models/stg_stripe__refund.sql", "name": "stg_stripe__refund", "alias": "stg_stripe__refund", "checksum": {"name": "sha256", "checksum": "a9cc45a05d4ac390a00e913f848477f57f29e9ec49e8c66180082a5117ddbb76"}, "tags": [], "refs": [["stg_stripe__refund_tmp"], ["stg_stripe__refund_tmp"]], "sources": [], "metrics": [], "description": "Details of transactions that have been refunded", "columns": {"refund_id": {"name": "refund_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID for the balance transaction that describes the impact on your account balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the charge that was refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__refund.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source"}, "created_at": 1661541350.079699, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__refund_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_reason\n    \n as \n    \n    failure_reason\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        amount,\n        balance_transaction_id,\n        charge_id,\n        created as created_at,\n        currency,\n        description,\n        metadata,\n        reason,\n        receipt_number,\n        status\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__refund"}, "model.stripe_source.stg_stripe__subscription": {"raw_sql": "{{ config(enabled=var('using_subscriptions', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__subscription_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__subscription_tmp')),\n                staging_columns=get_subscription_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_id,\n        status,\n        billing,\n        billing_cycle_anchor,\n        cancel_at,\n        cancel_at_period_end as is_cancel_at_period_end,\n        canceled_at,\n        created as created_at,\n        current_period_start,\n        current_period_end,\n        customer_id,\n        days_until_due,\n        metadata,\n        start_date,\n        ended_at\n\n        {% if var('stripe__subscription_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__subscription_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_subscription_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__subscription_tmp", "model.stripe_source.stg_stripe__subscription_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__subscription"], "unique_id": "model.stripe_source.stg_stripe__subscription", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__subscription.sql", "original_file_path": "models/stg_stripe__subscription.sql", "name": "stg_stripe__subscription", "alias": "stg_stripe__subscription", "checksum": {"name": "sha256", "checksum": "4b73e54027585529b75dc72c58bcbc933fb5cde75b72df729012582712e0e54c"}, "tags": [], "refs": [["stg_stripe__subscription_tmp"], ["stg_stripe__subscription_tmp"]], "sources": [], "metrics": [], "description": "Subscriptions allow you to charge a customer on a recurring basis.", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing": {"name": "billing", "description": "How the invoice is billed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_cancel_at_period_end": {"name": "is_cancel_at_period_end", "description": "Boolean indicating whether this subscription should cancel at the end of the current period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__subscription.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source", "enabled": true}, "created_at": 1661541350.08708, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__subscription_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_active\n    \n as \n    \n    _fivetran_active\n    \n, \n    \n    \n    application_fee_percent\n    \n as \n    \n    application_fee_percent\n    \n, \n    \n    \n    billing\n    \n as \n    \n    billing\n    \n, \n    \n    \n    billing_cycle_anchor\n    \n as \n    \n    billing_cycle_anchor\n    \n, \n    \n    \n    billing_threshold_amount_gte\n    \n as \n    \n    billing_threshold_amount_gte\n    \n, \n    \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n as \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n, \n    \n    \n    cancel_at\n    \n as \n    \n    cancel_at\n    \n, \n    \n    \n    cancel_at_period_end\n    \n as \n    \n    cancel_at_period_end\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    current_period_end\n    \n as \n    \n    current_period_end\n    \n, \n    \n    \n    current_period_start\n    \n as \n    \n    current_period_start\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    days_until_due\n    \n as \n    \n    days_until_due\n    \n, \n    \n    \n    default_source_id\n    \n as \n    \n    default_source_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tax_percent\n    \n as \n    \n    tax_percent\n    \n, \n    \n    \n    trial_end\n    \n as \n    \n    trial_end\n    \n, \n    \n    \n    trial_start\n    \n as \n    \n    trial_start\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_id,\n        status,\n        billing,\n        billing_cycle_anchor,\n        cancel_at,\n        cancel_at_period_end as is_cancel_at_period_end,\n        canceled_at,\n        created as created_at,\n        current_period_start,\n        current_period_end,\n        customer_id,\n        days_until_due,\n        metadata,\n        start_date,\n        ended_at\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__subscription"}, "model.stripe_source.stg_stripe__card": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__card_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__card_tmp')),\n                staging_columns=get_card_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as card_id,\n        brand,\n        country,\n        created as created_at,\n        customer_id,\n        name,\n        recipient,\n        funding\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_card_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__card_tmp", "model.stripe_source.stg_stripe__card_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__card"], "unique_id": "model.stripe_source.stg_stripe__card", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__card.sql", "original_file_path": "models/stg_stripe__card.sql", "name": "stg_stripe__card", "alias": "stg_stripe__card", "checksum": {"name": "sha256", "checksum": "94a155f1a56d123dceb05546ede287bb838c29e8aa03ca51a5cdd6f3dab3f8e1"}, "tags": [], "refs": [["stg_stripe__card_tmp"], ["stg_stripe__card_tmp"]], "sources": [], "metrics": [], "description": "Details of a credit card that has been saved to the system.", "columns": {"card_id": {"name": "card_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\u2019ve collected.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the entry for the card was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer that this card belongs to.  NULL if belongs to an account or recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Cardholder name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding": {"name": "funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__card.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source"}, "created_at": 1661541350.064429, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__card_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_1_check\n    \n as \n    \n    address_line_1_check\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    address_zip\n    \n as \n    \n    address_zip\n    \n, \n    \n    \n    address_zip_check\n    \n as \n    \n    address_zip_check\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    cvc_check\n    \n as \n    \n    cvc_check\n    \n, \n    \n    \n    dynamic_last_4\n    \n as \n    \n    dynamic_last_4\n    \n, \n    \n    \n    exp_month\n    \n as \n    \n    exp_month\n    \n, \n    \n    \n    exp_year\n    \n as \n    \n    exp_year\n    \n, \n    \n    \n    fingerprint\n    \n as \n    \n    fingerprint\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_4\n    \n as \n    \n    last_4\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    network\n    \n as \n    \n    network\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    tokenization_method\n    \n as \n    \n    tokenization_method\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as card_id,\n        brand,\n        country,\n        created as created_at,\n        customer_id,\n        name,\n        recipient,\n        funding\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__card"}, "model.stripe_source.stg_stripe__invoice": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__invoice_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__invoice_tmp')),\n                staging_columns=get_invoice_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        amount_due,\n        amount_paid,\n        amount_remaining,\n        attempt_count,\n        auto_advance,\n        billing_reason,\n        charge_id,\n        created as created_at,\n        currency,\n        customer_id,\n        description,\n        due_date,\n        metadata,\n        number,\n        paid as is_paid,\n        receipt_number,\n        status,\n        subtotal,\n        tax,\n        tax_percent,\n        total\n\n        {% if var('stripe__invoice_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__invoice_metadata')) }}\n        {% endif %}\n\n    from fields\n    where not coalesce(is_deleted, false)\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_invoice_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__invoice_tmp", "model.stripe_source.stg_stripe__invoice_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__invoice"], "unique_id": "model.stripe_source.stg_stripe__invoice", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__invoice.sql", "original_file_path": "models/stg_stripe__invoice.sql", "name": "stg_stripe__invoice", "alias": "stg_stripe__invoice", "checksum": {"name": "sha256", "checksum": "7253d6867d42d53fff1665c8aef06d33fe572d85772e50b75c9c1acdd8af0153"}, "tags": [], "refs": [["stg_stripe__invoice_tmp"], ["stg_stripe__invoice_tmp"]], "sources": [], "metrics": [], "description": "Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "Final amount due at this time for this invoice. If the invoice\u2019s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, in cents, that was paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount remaining, in cents, that is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_advance": {"name": "auto_advance", "description": "Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice\u2019s state will not automatically advance without an explicit action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_reason": {"name": "billing_reason", "description": "Indicates the reason why the invoice was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the latest charge generated for this invoice, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the customer who will be billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. Referenced as \u2018memo\u2019 in the Dashboard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date on which payment for this invoice is due. This value will be null for invoices where collection_method=charge_automatically.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_paid": {"name": "is_paid", "description": "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer\u2019s account balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_percent": {"name": "tax_percent", "description": "The percent used to calculate the tax amount.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total": {"name": "total", "description": "Total after discounts and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__invoice.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source", "enabled": true}, "created_at": 1661541350.084851, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__invoice_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount_due\n    \n as \n    \n    amount_due\n    \n, \n    \n    \n    amount_paid\n    \n as \n    \n    amount_paid\n    \n, \n    \n    \n    amount_remaining\n    \n as \n    \n    amount_remaining\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    attempt_count\n    \n as \n    \n    attempt_count\n    \n, \n    \n    \n    attempted\n    \n as \n    \n    attempted\n    \n, \n    \n    \n    auto_advance\n    \n as \n    \n    auto_advance\n    \n, \n    \n    \n    billing\n    \n as \n    \n    billing\n    \n, \n    \n    \n    billing_reason\n    \n as \n    \n    billing_reason\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    default_source_id\n    \n as \n    \n    default_source_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    ending_balance\n    \n as \n    \n    ending_balance\n    \n, \n    \n    \n    finalized_at\n    \n as \n    \n    finalized_at\n    \n, \n    \n    \n    footer\n    \n as \n    \n    footer\n    \n, \n    \n    \n    hosted_invoice_url\n    \n as \n    \n    hosted_invoice_url\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_pdf\n    \n as \n    \n    invoice_pdf\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    next_payment_attempt\n    \n as \n    \n    next_payment_attempt\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    starting_balance\n    \n as \n    \n    starting_balance\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    status_transitions_finalized_at\n    \n as \n    \n    status_transitions_finalized_at\n    \n, \n    \n    \n    status_transitions_marked_uncollectible_at\n    \n as \n    \n    status_transitions_marked_uncollectible_at\n    \n, \n    \n    \n    status_transitions_paid_at\n    \n as \n    \n    status_transitions_paid_at\n    \n, \n    \n    \n    status_transitions_voided_at\n    \n as \n    \n    status_transitions_voided_at\n    \n, \n    \n    \n    subscription_proration_date\n    \n as \n    \n    subscription_proration_date\n    \n, \n    \n    \n    subtotal\n    \n as \n    \n    subtotal\n    \n, \n    \n    \n    tax\n    \n as \n    \n    tax\n    \n, \n    \n    \n    tax_percent\n    \n as \n    \n    tax_percent\n    \n, \n    \n    \n    threshold_reason_amount_gte\n    \n as \n    \n    threshold_reason_amount_gte\n    \n, \n    \n    \n    total\n    \n as \n    \n    total\n    \n, \n    \n    \n    webhooks_delivered_at\n    \n as \n    \n    webhooks_delivered_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        amount_due,\n        amount_paid,\n        amount_remaining,\n        attempt_count,\n        auto_advance,\n        billing_reason,\n        charge_id,\n        created as created_at,\n        currency,\n        customer_id,\n        description,\n        due_date,\n        metadata,\n        number,\n        paid as is_paid,\n        receipt_number,\n        status,\n        subtotal,\n        tax,\n        tax_percent,\n        total\n\n        \n\n    from fields\n    where not coalesce(is_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__invoice"}, "model.stripe_source.stg_stripe__payout": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__payout_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__payout_tmp')),\n                staging_columns=get_payout_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payout_id,\n        amount,\n        arrival_date,\n        automatic as is_automatic,\n        balance_transaction_id,\n        created as created_at,\n        currency,\n        description,\n        metadata,\n        method,\n        source_type,\n        status,\n        type\n\n        {% if var('stripe__payout_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__payout_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_payout_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__payout_tmp", "model.stripe_source.stg_stripe__payout_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__payout"], "unique_id": "model.stripe_source.stg_stripe__payout", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__payout.sql", "original_file_path": "models/stg_stripe__payout.sql", "name": "stg_stripe__payout", "alias": "stg_stripe__payout", "checksum": {"name": "sha256", "checksum": "0ee2d2f8232e31a971099c76c17d6542063dc2b395c0dd5e61e1846a35012981"}, "tags": [], "refs": [["stg_stripe__payout_tmp"], ["stg_stripe__payout_tmp"]], "sources": [], "metrics": [], "description": "A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.", "columns": {"payout_id": {"name": "payout_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount (in cents) to be transferred to your bank account or debit card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "arrival_date": {"name": "arrival_date", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_automatic": {"name": "is_automatic", "description": "true if the payout was created by an automated payout schedule, and false if it was requested manually.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this payout on your account balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "method": {"name": "method", "description": "The method used to send this payout, which can be standard or instant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The source balance this payout came from. One of card, fpx, or bank_account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Can be bank_account or card.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__payout.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source"}, "created_at": 1661541350.0779321, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__payout_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    arrival_date\n    \n as \n    \n    arrival_date\n    \n, \n    \n    \n    automatic\n    \n as \n    \n    automatic\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination_bank_account_id\n    \n as \n    \n    destination_bank_account_id\n    \n, \n    \n    \n    destination_card_id\n    \n as \n    \n    destination_card_id\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    method\n    \n as \n    \n    method\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payout_id,\n        amount,\n        arrival_date,\n        automatic as is_automatic,\n        balance_transaction_id,\n        created as created_at,\n        currency,\n        description,\n        metadata,\n        method,\n        source_type,\n        status,\n        type\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__payout"}, "model.stripe_source.stg_stripe__charge": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__charge_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__charge_tmp')),\n                staging_columns=get_charge_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as charge_id, \n        amount,\n        amount_refunded,\n        application_fee_amount,\n        balance_transaction_id,\n        captured as is_captured,\n        card_id,\n        created as created_at,\n        customer_id,\n        currency,\n        description,\n        failure_code,\n        failure_message,\n        metadata,\n        paid as is_paid,\n        payment_intent_id,\n        receipt_email,\n        receipt_number,\n        refunded as is_refunded,\n        status,\n        invoice_id\n\n        {% if var('stripe__charge_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__charge_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_charge_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__charge_tmp", "model.stripe_source.stg_stripe__charge_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__charge"], "unique_id": "model.stripe_source.stg_stripe__charge", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__charge.sql", "original_file_path": "models/stg_stripe__charge.sql", "name": "stg_stripe__charge", "alias": "stg_stripe__charge", "checksum": {"name": "sha256", "checksum": "6a4fd28a989db89f62f0d124b71c930ea704a30da8870aec2a2a601d8a8e1af2"}, "tags": [], "refs": [["stg_stripe__charge_tmp"], ["stg_stripe__charge_tmp"]], "sources": [], "metrics": [], "description": "To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.", "columns": {"charge_id": {"name": "charge_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_refunded": {"name": "amount_refunded", "description": "The amount of the charge, if any, that has been refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_captured": {"name": "is_captured", "description": "If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_id": {"name": "card_id", "description": "ID of the card that was charged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the when the charge took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer this charge is for if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failure_code": {"name": "failure_code", "description": "Error code explaining reason for charge failure if available.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failure_message": {"name": "failure_message", "description": "Message to user further explaining reason for charge failure if available.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_paid": {"name": "is_paid", "description": "true if the charge succeeded, or was successfully authorized for later capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "ID of the PaymentIntent associated with this charge, if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "This is the email address that the receipt for this charge was sent to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_refunded": {"name": "is_refunded", "description": "Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the payment is either succeeded, pending, or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__charge.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source"}, "created_at": 1661541350.0674932, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__charge_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_refunded\n    \n as \n    \n    amount_refunded\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    calculated_statement_descriptor\n    \n as \n    \n    calculated_statement_descriptor\n    \n, \n    \n    \n    captured\n    \n as \n    \n    captured\n    \n, \n    \n    \n    card_id\n    \n as \n    \n    card_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    fraud_details_stripe_report\n    \n as \n    \n    fraud_details_stripe_report\n    \n, \n    \n    \n    fraud_details_user_report\n    \n as \n    \n    fraud_details_user_report\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    outcome_network_status\n    \n as \n    \n    outcome_network_status\n    \n, \n    \n    \n    outcome_reason\n    \n as \n    \n    outcome_reason\n    \n, \n    \n    \n    outcome_risk_level\n    \n as \n    \n    outcome_risk_level\n    \n, \n    \n    \n    outcome_risk_score\n    \n as \n    \n    outcome_risk_score\n    \n, \n    \n    \n    outcome_seller_message\n    \n as \n    \n    outcome_seller_message\n    \n, \n    \n    \n    outcome_type\n    \n as \n    \n    outcome_type\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    payment_intent_id\n    \n as \n    \n    payment_intent_id\n    \n, \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    receipt_url\n    \n as \n    \n    receipt_url\n    \n, \n    \n    \n    refunded\n    \n as \n    \n    refunded\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    source_transfer\n    \n as \n    \n    source_transfer\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as charge_id, \n        amount,\n        amount_refunded,\n        application_fee_amount,\n        balance_transaction_id,\n        captured as is_captured,\n        card_id,\n        created as created_at,\n        customer_id,\n        currency,\n        description,\n        failure_code,\n        failure_message,\n        metadata,\n        paid as is_paid,\n        payment_intent_id,\n        receipt_email,\n        receipt_number,\n        refunded as is_refunded,\n        status,\n        invoice_id\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__charge"}, "model.stripe_source.stg_stripe__balance_transaction": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__balance_transaction_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__balance_transaction_tmp')),\n                staging_columns=get_balance_transaction_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as balance_transaction_id,\n        amount,\n\n        -- ensure that these are timestamps without timezones on postgres + redshift\n        cast(available_on as {{ dbt_utils.type_timestamp() }}) as available_on,\n        cast(created as {{ dbt_utils.type_timestamp() }}) as created_at,\n\n        currency,\n        description,\n        exchange_rate,\n        fee,\n        net,\n        source,\n        status,\n        type\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_balance_transaction_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.stripe_source.stg_stripe__balance_transaction_tmp", "model.stripe_source.stg_stripe__balance_transaction_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__balance_transaction"], "unique_id": "model.stripe_source.stg_stripe__balance_transaction", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__balance_transaction.sql", "original_file_path": "models/stg_stripe__balance_transaction.sql", "name": "stg_stripe__balance_transaction", "alias": "stg_stripe__balance_transaction", "checksum": {"name": "sha256", "checksum": "f9edea92d5c3b70136948ccc8fbc40cbdf749033858afa6627647333f1ab6538"}, "tags": [], "refs": [["stg_stripe__balance_transaction_tmp"], ["stg_stripe__balance_transaction_tmp"]], "sources": [], "metrics": [], "description": "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the transaction was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the amount in currency A, times exchange_rate, would be the amount in currency B.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fee": {"name": "fee", "description": "fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "If the transaction\u2019s net funds are available in the Stripe balance yet. Either 'available' or 'pending'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "the type of transaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__balance_transaction.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source"}, "created_at": 1661541350.06301, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__balance_transaction_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    available_on\n    \n as \n    \n    available_on\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    fee\n    \n as \n    \n    fee\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    net\n    \n as \n    \n    net\n    \n, \n    \n    \n    payout_id\n    \n as \n    \n    payout_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as balance_transaction_id,\n        amount,\n\n        -- ensure that these are timestamps without timezones on postgres + redshift\n        cast(available_on as \n    timestamp_ntz\n) as available_on,\n        cast(created as \n    timestamp_ntz\n) as created_at,\n\n        currency,\n        description,\n        exchange_rate,\n        fee,\n        net,\n        source,\n        status,\n        type\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__balance_transaction"}, "model.stripe_source.stg_stripe__fee": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__fee_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__fee_tmp')),\n                staging_columns=get_fee_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        balance_transaction_id,\n        amount,\n        application,\n        currency,\n        description,\n        type\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_fee_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__fee_tmp", "model.stripe_source.stg_stripe__fee_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__fee"], "unique_id": "model.stripe_source.stg_stripe__fee", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__fee.sql", "original_file_path": "models/stg_stripe__fee.sql", "name": "stg_stripe__fee", "alias": "stg_stripe__fee", "checksum": {"name": "sha256", "checksum": "970f84ad0eb1ff04a03a02f8769faefaebf75dd191b619cb5336fd00e904e31b"}, "tags": [], "refs": [["stg_stripe__fee_tmp"], ["stg_stripe__fee_tmp"]], "sources": [], "metrics": [], "description": "The details of a fee associated with a balance_transation", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction entry the fee applies to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount of the fee, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that earned the fee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of the fee, can be application_fee, stripe_fee or tax.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__fee.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source"}, "created_at": 1661541350.071006, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__fee_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        balance_transaction_id,\n        amount,\n        application,\n        currency,\n        description,\n        type\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__fee"}, "model.stripe_source.stg_stripe__plan": {"raw_sql": "{{ config(enabled=var('using_subscriptions', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__plan_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__plan_tmp')),\n                staging_columns=get_plan_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as plan_id,\n        active as is_active,\n        amount,\n        currency,\n        {% if target.type == 'bigquery' %}\n            `interval` as plan_interval,\n        {% else %}\n            interval as plan_interval,\n        {% endif %}\n        interval_count,\n        metadata,\n        nickname,\n        product_id\n\n        {% if var('stripe__plan_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__plan_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_plan_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__plan_tmp", "model.stripe_source.stg_stripe__plan_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__plan"], "unique_id": "model.stripe_source.stg_stripe__plan", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__plan.sql", "original_file_path": "models/stg_stripe__plan.sql", "name": "stg_stripe__plan", "alias": "stg_stripe__plan", "checksum": {"name": "sha256", "checksum": "e95c2a6e541625fe831744377eb5cbcf80a19efb0582bfe7d5f1bd4ead3c4926"}, "tags": [], "refs": [["stg_stripe__plan_tmp"], ["stg_stripe__plan_tmp"]], "sources": [], "metrics": [], "description": "Plans define the base price, currency, and billing cycle for recurring purchases of products.", "columns": {"plan_id": {"name": "plan_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the plan can be used for new purchases.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The unit amount in cents to be charged, represented as a whole integer if possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_interval": {"name": "plan_interval", "description": "The frequency at which a subscription is billed. One of day, week, month or year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interval_count": {"name": "interval_count", "description": "The number of intervals between subscription billings. For example, interval_count=3 bills every 3 months.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nickname": {"name": "nickname", "description": "A brief description of the plan, hidden from customers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The id of the product whose pricing this plan determines.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__plan.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source", "enabled": true}, "created_at": 1661541350.088574, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__plan_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    aggregate_usage\n    \n as \n    \n    aggregate_usage\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    billing_scheme\n    \n as \n    \n    billing_scheme\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    interval_count\n    \n as \n    \n    interval_count\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    nickname\n    \n as \n    \n    nickname\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    tiers_mode\n    \n as \n    \n    tiers_mode\n    \n, \n    \n    \n    transform_usage_divide_by\n    \n as \n    \n    transform_usage_divide_by\n    \n, \n    \n    \n    transform_usage_round\n    \n as \n    \n    transform_usage_round\n    \n, \n    \n    \n    trial_period_days\n    \n as \n    \n    trial_period_days\n    \n, \n    \n    \n    usage_type\n    \n as \n    \n    usage_type\n    \n, \n    \n    \n    interval\n    \n as \n    \n    interval\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as plan_id,\n        active as is_active,\n        amount,\n        currency,\n        \n            interval as plan_interval,\n        \n        interval_count,\n        metadata,\n        nickname,\n        product_id\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__plan"}, "model.stripe_source.stg_stripe__payment_method_card": {"raw_sql": "{{ config(enabled=var('using_payment_method', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__payment_method_card_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__payment_method_card_tmp')),\n                staging_columns=get_payment_method_card_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        payment_method_id,\n        brand,\n        funding\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_payment_method_card_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__payment_method_card_tmp", "model.stripe_source.stg_stripe__payment_method_card_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__payment_method_card"], "unique_id": "model.stripe_source.stg_stripe__payment_method_card", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__payment_method_card.sql", "original_file_path": "models/stg_stripe__payment_method_card.sql", "name": "stg_stripe__payment_method_card", "alias": "stg_stripe__payment_method_card", "checksum": {"name": "sha256", "checksum": "7dea66719bd5ed74178ad247d3813737eb795c16a6fa469e9ae12fe661ecbebb"}, "tags": [], "refs": [["stg_stripe__payment_method_card_tmp"], ["stg_stripe__payment_method_card_tmp"]], "sources": [], "metrics": [], "description": "Table with the relationships between a payment methods and a card", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding": {"name": "funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__payment_method_card.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source", "enabled": true}, "created_at": 1661541350.075017, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__payment_method_card_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fingerprint\n    \n as \n    \n    fingerprint\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    wallet_type\n    \n as \n    \n    wallet_type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        payment_method_id,\n        brand,\n        funding\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__payment_method_card"}, "model.stripe_source.stg_stripe__customer": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__customer_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__customer_tmp')),\n                staging_columns=get_customer_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        account_balance,\n        created as created_at,\n        currency,\n        default_card_id,\n        delinquent as is_delinquent,\n        description,\n        email,\n        metadata,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_name,\n        shipping_phone\n        \n        {% if var('stripe__customer_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__customer_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_customer_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__customer_tmp", "model.stripe_source.stg_stripe__customer_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__customer"], "unique_id": "model.stripe_source.stg_stripe__customer", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__customer.sql", "original_file_path": "models/stg_stripe__customer.sql", "name": "stg_stripe__customer", "alias": "stg_stripe__customer", "checksum": {"name": "sha256", "checksum": "c5977be1ded0c266e28647ddb7365f3ae82871ae5c3177197dfe5c00924f3f73"}, "tags": [], "refs": [["stg_stripe__customer_tmp"], ["stg_stripe__customer_tmp"]], "sources": [], "metrics": [], "description": "Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer.", "columns": {"customer_id": {"name": "customer_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the customer entry was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID for the default card used by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_delinquent": {"name": "is_delinquent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The customer\u2019s email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__customer.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source"}, "created_at": 1661541350.0700219, "compiled_sql": "with base as (\n\n    select * \n    from prod_analytics.stripe_source.stg_stripe__customer_tmp\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_balance\n    \n as \n    \n    account_balance\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_postal_code\n    \n as \n    \n    address_postal_code\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    default_card_id\n    \n as \n    \n    default_card_id\n    \n, \n    \n    \n    delinquent\n    \n as \n    \n    delinquent\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_prefix\n    \n as \n    \n    invoice_prefix\n    \n, \n    \n    \n    invoice_settings_default_payment_method\n    \n as \n    \n    invoice_settings_default_payment_method\n    \n, \n    \n    \n    invoice_settings_footer\n    \n as \n    \n    invoice_settings_footer\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    tax_info_tax_id\n    \n as \n    \n    tax_info_tax_id\n    \n, \n    \n    \n    tax_info_type\n    \n as \n    \n    tax_info_type\n    \n, \n    \n    \n    tax_info_verification_status\n    \n as \n    \n    tax_info_verification_status\n    \n, \n    \n    \n    tax_info_verification_verified_name\n    \n as \n    \n    tax_info_verification_verified_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        account_balance,\n        created as created_at,\n        currency,\n        default_card_id,\n        delinquent as is_delinquent,\n        description,\n        email,\n        metadata,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_name,\n        shipping_phone\n        \n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__customer"}, "model.stripe_source.stg_stripe__payment_method_card_tmp": {"raw_sql": "{{ config(enabled=var('using_payment_method', True)) }}\n\nselect * \nfrom {{ var('payment_method_card') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.payment_method_card"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__payment_method_card_tmp"], "unique_id": "model.stripe_source.stg_stripe__payment_method_card_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__payment_method_card_tmp.sql", "original_file_path": "models/tmp/stg_stripe__payment_method_card_tmp.sql", "name": "stg_stripe__payment_method_card_tmp", "alias": "stg_stripe__payment_method_card_tmp", "checksum": {"name": "sha256", "checksum": "12f64917b7daae52d448d1463edbb732482b8525fb22a4899b19923f62df167c"}, "tags": [], "refs": [], "sources": [["stripe", "payment_method_card"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__payment_method_card_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source", "enabled": true}, "created_at": 1661541349.2904088, "compiled_sql": "\n\nselect * \nfrom raw.stripe.payment_method_card", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__payment_method_card_tmp"}, "model.stripe_source.stg_stripe__payment_method_tmp": {"raw_sql": "{{ config(enabled=var('using_payment_method', True)) }}\n\nselect * \nfrom {{ var('payment_method') }}\n\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.payment_method"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__payment_method_tmp"], "unique_id": "model.stripe_source.stg_stripe__payment_method_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__payment_method_tmp.sql", "original_file_path": "models/tmp/stg_stripe__payment_method_tmp.sql", "name": "stg_stripe__payment_method_tmp", "alias": "stg_stripe__payment_method_tmp", "checksum": {"name": "sha256", "checksum": "45b217ca6490f130b98fd82ea571349c8d71820ede6e020a166415b4a05920d5"}, "tags": [], "refs": [], "sources": [["stripe", "payment_method"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__payment_method_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source", "enabled": true}, "created_at": 1661541349.293333, "compiled_sql": "\n\nselect * \nfrom raw.stripe.payment_method\n\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__payment_method_tmp"}, "model.stripe_source.stg_stripe__refund_tmp": {"raw_sql": "select * \nfrom {{ var('refund') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.refund"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__refund_tmp"], "unique_id": "model.stripe_source.stg_stripe__refund_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__refund_tmp.sql", "original_file_path": "models/tmp/stg_stripe__refund_tmp.sql", "name": "stg_stripe__refund_tmp", "alias": "stg_stripe__refund_tmp", "checksum": {"name": "sha256", "checksum": "e85ff297dae4151635a5580b83e1f11160fe1cd3d6d0eb51fc4bc6f39a432c1d"}, "tags": [], "refs": [], "sources": [["stripe", "refund"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__refund_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source"}, "created_at": 1661541349.296451, "compiled_sql": "select * \nfrom raw.stripe.refund", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__refund_tmp"}, "model.stripe_source.stg_stripe__payout_tmp": {"raw_sql": "select * \nfrom {{ var('payout') }}\n\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.payout"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__payout_tmp"], "unique_id": "model.stripe_source.stg_stripe__payout_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__payout_tmp.sql", "original_file_path": "models/tmp/stg_stripe__payout_tmp.sql", "name": "stg_stripe__payout_tmp", "alias": "stg_stripe__payout_tmp", "checksum": {"name": "sha256", "checksum": "657c211514f6bffe3da4360b24aaf1d6a470d00852392fb5a59bfd71e02dc801"}, "tags": [], "refs": [], "sources": [["stripe", "payout"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__payout_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source"}, "created_at": 1661541349.302208, "compiled_sql": "select * \nfrom raw.stripe.payout\n\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__payout_tmp"}, "model.stripe_source.stg_stripe__invoice_tmp": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nselect * \nfrom {{ var('invoice') }}\n\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.invoice"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__invoice_tmp"], "unique_id": "model.stripe_source.stg_stripe__invoice_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__invoice_tmp.sql", "original_file_path": "models/tmp/stg_stripe__invoice_tmp.sql", "name": "stg_stripe__invoice_tmp", "alias": "stg_stripe__invoice_tmp", "checksum": {"name": "sha256", "checksum": "a46c6cde0f2646f1f5c8fb5a9b6c77cbfb5f0c38ccf74df3f9c19e95e98e2888"}, "tags": [], "refs": [], "sources": [["stripe", "invoice"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__invoice_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source", "enabled": true}, "created_at": 1661541349.306305, "compiled_sql": "\n\nselect * \nfrom raw.stripe.invoice\n\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__invoice_tmp"}, "model.stripe_source.stg_stripe__invoice_line_item_tmp": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nselect * \nfrom {{ var('invoice_line_item') }}\n\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.invoice_line_item"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__invoice_line_item_tmp"], "unique_id": "model.stripe_source.stg_stripe__invoice_line_item_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__invoice_line_item_tmp.sql", "original_file_path": "models/tmp/stg_stripe__invoice_line_item_tmp.sql", "name": "stg_stripe__invoice_line_item_tmp", "alias": "stg_stripe__invoice_line_item_tmp", "checksum": {"name": "sha256", "checksum": "4df9882fdf750fa75548df3fda3e5b53f90bf08ca430896b3723cef60eb818ac"}, "tags": [], "refs": [], "sources": [["stripe", "invoice_line_item"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__invoice_line_item_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source", "enabled": true}, "created_at": 1661541349.310115, "compiled_sql": "\n\nselect * \nfrom raw.stripe.invoice_line_item\n\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__invoice_line_item_tmp"}, "model.stripe_source.stg_stripe__charge_tmp": {"raw_sql": "select * \nfrom {{ var('charge') }}\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.charge"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__charge_tmp"], "unique_id": "model.stripe_source.stg_stripe__charge_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__charge_tmp.sql", "original_file_path": "models/tmp/stg_stripe__charge_tmp.sql", "name": "stg_stripe__charge_tmp", "alias": "stg_stripe__charge_tmp", "checksum": {"name": "sha256", "checksum": "99f6017697b1c4efd09e65c2917255c07521a4ca9c9cb111eed495504fdc314f"}, "tags": [], "refs": [], "sources": [["stripe", "charge"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__charge_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source"}, "created_at": 1661541349.313312, "compiled_sql": "select * \nfrom raw.stripe.charge\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__charge_tmp"}, "model.stripe_source.stg_stripe__fee_tmp": {"raw_sql": "select * \nfrom {{ var('fee') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.fee"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__fee_tmp"], "unique_id": "model.stripe_source.stg_stripe__fee_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__fee_tmp.sql", "original_file_path": "models/tmp/stg_stripe__fee_tmp.sql", "name": "stg_stripe__fee_tmp", "alias": "stg_stripe__fee_tmp", "checksum": {"name": "sha256", "checksum": "4b0836c1cdae8a9bb9a4f76e6269fb6c898c2b4ae6995605cf8486ebf71fe4f4"}, "tags": [], "refs": [], "sources": [["stripe", "fee"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__fee_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source"}, "created_at": 1661541349.317187, "compiled_sql": "select * \nfrom raw.stripe.fee", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__fee_tmp"}, "model.stripe_source.stg_stripe__payment_intent_tmp": {"raw_sql": "select * \nfrom {{ var('payment_intent') }}\n\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.payment_intent"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__payment_intent_tmp"], "unique_id": "model.stripe_source.stg_stripe__payment_intent_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__payment_intent_tmp.sql", "original_file_path": "models/tmp/stg_stripe__payment_intent_tmp.sql", "name": "stg_stripe__payment_intent_tmp", "alias": "stg_stripe__payment_intent_tmp", "checksum": {"name": "sha256", "checksum": "5a5295d664470e5fd86114eea3485e9543e784c785ef08339126e68af559f3a8"}, "tags": [], "refs": [], "sources": [["stripe", "payment_intent"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__payment_intent_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source"}, "created_at": 1661541349.3211489, "compiled_sql": "select * \nfrom raw.stripe.payment_intent\n\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__payment_intent_tmp"}, "model.stripe_source.stg_stripe__plan_tmp": {"raw_sql": "{{ config(enabled=var('using_subscriptions', True)) }}\n\nselect * \nfrom {{ var('plan') }}\n\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.plan"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__plan_tmp"], "unique_id": "model.stripe_source.stg_stripe__plan_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__plan_tmp.sql", "original_file_path": "models/tmp/stg_stripe__plan_tmp.sql", "name": "stg_stripe__plan_tmp", "alias": "stg_stripe__plan_tmp", "checksum": {"name": "sha256", "checksum": "733ec84639db817419efdf3b72dc1a205538bd10856555ec733e5362eaf873df"}, "tags": [], "refs": [], "sources": [["stripe", "plan"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__plan_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source", "enabled": true}, "created_at": 1661541349.324382, "compiled_sql": "\n\nselect * \nfrom raw.stripe.plan\n\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__plan_tmp"}, "model.stripe_source.stg_stripe__card_tmp": {"raw_sql": "select * \nfrom {{ var('card') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.card"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__card_tmp"], "unique_id": "model.stripe_source.stg_stripe__card_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__card_tmp.sql", "original_file_path": "models/tmp/stg_stripe__card_tmp.sql", "name": "stg_stripe__card_tmp", "alias": "stg_stripe__card_tmp", "checksum": {"name": "sha256", "checksum": "4b22bf217122d18f63100e7b26de32aaabac179648282bbe3340269dd2feadcd"}, "tags": [], "refs": [], "sources": [["stripe", "card"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__card_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source"}, "created_at": 1661541349.3285902, "compiled_sql": "select * \nfrom raw.stripe.card", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__card_tmp"}, "model.stripe_source.stg_stripe__balance_transaction_tmp": {"raw_sql": "select * \nfrom {{ var('balance_transaction') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.balance_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__balance_transaction_tmp"], "unique_id": "model.stripe_source.stg_stripe__balance_transaction_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__balance_transaction_tmp.sql", "original_file_path": "models/tmp/stg_stripe__balance_transaction_tmp.sql", "name": "stg_stripe__balance_transaction_tmp", "alias": "stg_stripe__balance_transaction_tmp", "checksum": {"name": "sha256", "checksum": "6abd3ec2f30221f2bb24cc9a45d911c904e196b9df477c6f8007c6626c91af9e"}, "tags": [], "refs": [], "sources": [["stripe", "balance_transaction"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__balance_transaction_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source"}, "created_at": 1661541349.331653, "compiled_sql": "select * \nfrom raw.stripe.balance_transaction", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__balance_transaction_tmp"}, "model.stripe_source.stg_stripe__customer_tmp": {"raw_sql": "select * \nfrom {{ var('customer') }}\n\n    {{ livemode_predicate() }}\n    and \n    not coalesce(is_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.customer"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__customer_tmp"], "unique_id": "model.stripe_source.stg_stripe__customer_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__customer_tmp.sql", "original_file_path": "models/tmp/stg_stripe__customer_tmp.sql", "name": "stg_stripe__customer_tmp", "alias": "stg_stripe__customer_tmp", "checksum": {"name": "sha256", "checksum": "d49ddcbbe4eac1bc78c0fa3b65c7e1db6151734ba7f7796a87ea2ccc0d99af18"}, "tags": [], "refs": [], "sources": [["stripe", "customer"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__customer_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source"}, "created_at": 1661541349.334837, "compiled_sql": "select * \nfrom raw.stripe.customer\n\n    \n\n    where livemode = True\n\n\n    and \n    not coalesce(is_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__customer_tmp"}, "model.stripe_source.stg_stripe__subscription_tmp": {"raw_sql": "{{ config(enabled=var('using_subscriptions', True)) }}\n\nselect * \nfrom {% if var('stripe__subscription_history', false) %}\n{{ var('subscription_history') }}\n{% else %}\n{{ var('subscription') }}\n{% endif %}\n\n{{ livemode_predicate() }}\n{% if var('stripe__subscription_history', false) %}\n    and coalesce(_fivetran_active, true)\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.subscription_history"]}, "config": {"enabled": true, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__subscription_tmp"], "unique_id": "model.stripe_source.stg_stripe__subscription_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__subscription_tmp.sql", "original_file_path": "models/tmp/stg_stripe__subscription_tmp.sql", "name": "stg_stripe__subscription_tmp", "alias": "stg_stripe__subscription_tmp", "checksum": {"name": "sha256", "checksum": "9603d4e3bfbccb66745354de7a9c76737e115987c94a516c9a82e058cecc9fac"}, "tags": [], "refs": [], "sources": [["stripe", "subscription_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__subscription_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source", "enabled": true}, "created_at": 1661541349.339232, "compiled_sql": "\n\nselect * \nfrom \nraw.stripe.subscription_history\n\n\n\n\n    where livemode = True\n\n\n\n    and coalesce(_fivetran_active, true)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe_source.stg_stripe__subscription_tmp"}, "model.dbt_project_evaluator.stg_nodes": {"raw_sql": "{{\n    dbt_project_evaluator.get_nodes()\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_nodes"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_nodes"], "unique_id": "model.dbt_project_evaluator.stg_nodes", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "staging/graph/stg_nodes.sql", "original_file_path": "models/staging/graph/stg_nodes.sql", "name": "stg_nodes", "alias": "stg_nodes", "checksum": {"name": "sha256", "checksum": "5daf8c4d9cb95d1e660014e615be882dc85e68fec9795fe3ed9e7029fdead5df"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_nodes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541349.3500302, "compiled_sql": "with cte as (\n\n            select * from ( \n                    values ('model.hubspot_source.stg_hubspot__engagement_task', \n'stg_hubspot__engagement_task', \n'model', \n'models/stg_hubspot__engagement_task.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_task', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_deal', \n'stg_hubspot__engagement_deal', \n'model', \n'models/stg_hubspot__engagement_deal.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_deal', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__company_property_history', \n'stg_hubspot__company_property_history', \n'model', \n'models/stg_hubspot__company_property_history.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__company_property_history', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_delivered', \n'stg_hubspot__email_event_delivered', \n'model', \n'models/stg_hubspot__email_event_delivered.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_delivered', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__owner', \n'stg_hubspot__owner', \n'model', \n'models/stg_hubspot__owner.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__owner', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event', \n'stg_hubspot__email_event', \n'model', \n'models/stg_hubspot__email_event.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_meeting', \n'stg_hubspot__engagement_meeting', \n'model', \n'models/stg_hubspot__engagement_meeting.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_meeting', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_email', \n'stg_hubspot__engagement_email', \n'model', \n'models/stg_hubspot__engagement_email.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_email', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_status_change', \n'stg_hubspot__email_event_status_change', \n'model', \n'models/stg_hubspot__email_event_status_change.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_status_change', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__contact_list_member', \n'stg_hubspot__contact_list_member', \n'model', \n'models/stg_hubspot__contact_list_member.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__contact_list_member', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__contact', \n'stg_hubspot__contact', \n'model', \n'models/stg_hubspot__contact.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__contact', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal', \n'stg_hubspot__deal', \n'model', \n'models/stg_hubspot__deal.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_pipeline', \n'stg_hubspot__deal_pipeline', \n'model', \n'models/stg_hubspot__deal_pipeline.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_pipeline', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_company', \n'stg_hubspot__deal_company', \n'model', \n'models/stg_hubspot__deal_company.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_company', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_note', \n'stg_hubspot__engagement_note', \n'model', \n'models/stg_hubspot__engagement_note.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_note', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_contact', \n'stg_hubspot__engagement_contact', \n'model', \n'models/stg_hubspot__engagement_contact.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_contact', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__contact_list', \n'stg_hubspot__contact_list', \n'model', \n'models/stg_hubspot__contact_list.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__contact_list', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_pipeline_stage', \n'stg_hubspot__deal_pipeline_stage', \n'model', \n'models/stg_hubspot__deal_pipeline_stage.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_pipeline_stage', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_dropped', \n'stg_hubspot__email_event_dropped', \n'model', \n'models/stg_hubspot__email_event_dropped.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_dropped', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_stage', \n'stg_hubspot__deal_stage', \n'model', \n'models/stg_hubspot__deal_stage.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_stage', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_property_history', \n'stg_hubspot__deal_property_history', \n'model', \n'models/stg_hubspot__deal_property_history.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_property_history', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_bounce', \n'stg_hubspot__email_event_bounce', \n'model', \n'models/stg_hubspot__email_event_bounce.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_bounce', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_company', \n'stg_hubspot__engagement_company', \n'model', \n'models/stg_hubspot__engagement_company.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_company', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_deferred', \n'stg_hubspot__email_event_deferred', \n'model', \n'models/stg_hubspot__email_event_deferred.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_deferred', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__company', \n'stg_hubspot__company', \n'model', \n'models/stg_hubspot__company.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__company', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_contact', \n'stg_hubspot__deal_contact', \n'model', \n'models/stg_hubspot__deal_contact.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_contact', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_click', \n'stg_hubspot__email_event_click', \n'model', \n'models/stg_hubspot__email_event_click.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_click', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_call', \n'stg_hubspot__engagement_call', \n'model', \n'models/stg_hubspot__engagement_call.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_call', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement', \n'stg_hubspot__engagement', \n'model', \n'models/stg_hubspot__engagement.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_campaign', \n'stg_hubspot__email_campaign', \n'model', \n'models/stg_hubspot__email_campaign.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_campaign', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__contact_property_history', \n'stg_hubspot__contact_property_history', \n'model', \n'models/stg_hubspot__contact_property_history.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__contact_property_history', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_open', \n'stg_hubspot__email_event_open', \n'model', \n'models/stg_hubspot__email_event_open.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_open', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_sent', \n'stg_hubspot__email_event_sent', \n'model', \n'models/stg_hubspot__email_event_sent.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_sent', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__contact_property_history_tmp', \n'stg_hubspot__contact_property_history_tmp', \n'model', \n'models/tmp/stg_hubspot__contact_property_history_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__contact_property_history_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_dropped_tmp', \n'stg_hubspot__email_event_dropped_tmp', \n'model', \n'models/tmp/stg_hubspot__email_event_dropped_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_dropped_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_sent_tmp', \n'stg_hubspot__email_event_sent_tmp', \n'model', \n'models/tmp/stg_hubspot__email_event_sent_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_sent_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_tmp', \n'stg_hubspot__deal_tmp', \n'model', \n'models/tmp/stg_hubspot__deal_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_contact_tmp', \n'stg_hubspot__deal_contact_tmp', \n'model', \n'models/tmp/stg_hubspot__deal_contact_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_contact_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__contact_list_member_tmp', \n'stg_hubspot__contact_list_member_tmp', \n'model', \n'models/tmp/stg_hubspot__contact_list_member_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__contact_list_member_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__owner_tmp', \n'stg_hubspot__owner_tmp', \n'model', \n'models/tmp/stg_hubspot__owner_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__owner_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_stage_tmp', \n'stg_hubspot__deal_stage_tmp', \n'model', \n'models/tmp/stg_hubspot__deal_stage_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_stage_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_pipeline_tmp', \n'stg_hubspot__deal_pipeline_tmp', \n'model', \n'models/tmp/stg_hubspot__deal_pipeline_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_pipeline_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_company_tmp', \n'stg_hubspot__engagement_company_tmp', \n'model', \n'models/tmp/stg_hubspot__engagement_company_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_company_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__contact_tmp', \n'stg_hubspot__contact_tmp', \n'model', \n'models/tmp/stg_hubspot__contact_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__contact_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_status_change_tmp', \n'stg_hubspot__email_event_status_change_tmp', \n'model', \n'models/tmp/stg_hubspot__email_event_status_change_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_status_change_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_note_tmp', \n'stg_hubspot__engagement_note_tmp', \n'model', \n'models/tmp/stg_hubspot__engagement_note_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_note_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_company_tmp', \n'stg_hubspot__deal_company_tmp', \n'model', \n'models/tmp/stg_hubspot__deal_company_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_company_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_deal_tmp', \n'stg_hubspot__engagement_deal_tmp', \n'model', \n'models/tmp/stg_hubspot__engagement_deal_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_deal_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__company_property_history_tmp', \n'stg_hubspot__company_property_history_tmp', \n'model', \n'models/tmp/stg_hubspot__company_property_history_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__company_property_history_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_tmp', \n'stg_hubspot__email_event_tmp', \n'model', \n'models/tmp/stg_hubspot__email_event_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__company_tmp', \n'stg_hubspot__company_tmp', \n'model', \n'models/tmp/stg_hubspot__company_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__company_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_click_tmp', \n'stg_hubspot__email_event_click_tmp', \n'model', \n'models/tmp/stg_hubspot__email_event_click_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_click_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_contact_tmp', \n'stg_hubspot__engagement_contact_tmp', \n'model', \n'models/tmp/stg_hubspot__engagement_contact_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_contact_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__contact_list_tmp', \n'stg_hubspot__contact_list_tmp', \n'model', \n'models/tmp/stg_hubspot__contact_list_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__contact_list_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_meeting_tmp', \n'stg_hubspot__engagement_meeting_tmp', \n'model', \n'models/tmp/stg_hubspot__engagement_meeting_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_meeting_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_tmp', \n'stg_hubspot__engagement_tmp', \n'model', \n'models/tmp/stg_hubspot__engagement_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_delivered_tmp', \n'stg_hubspot__email_event_delivered_tmp', \n'model', \n'models/tmp/stg_hubspot__email_event_delivered_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_delivered_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_email_tmp', \n'stg_hubspot__engagement_email_tmp', \n'model', \n'models/tmp/stg_hubspot__engagement_email_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_email_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_bounce_tmp', \n'stg_hubspot__email_event_bounce_tmp', \n'model', \n'models/tmp/stg_hubspot__email_event_bounce_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_bounce_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_call_tmp', \n'stg_hubspot__engagement_call_tmp', \n'model', \n'models/tmp/stg_hubspot__engagement_call_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_call_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp', \n'stg_hubspot__deal_pipeline_stage_tmp', \n'model', \n'models/tmp/stg_hubspot__deal_pipeline_stage_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_pipeline_stage_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__engagement_task_tmp', \n'stg_hubspot__engagement_task_tmp', \n'model', \n'models/tmp/stg_hubspot__engagement_task_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__engagement_task_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_open_tmp', \n'stg_hubspot__email_event_open_tmp', \n'model', \n'models/tmp/stg_hubspot__email_event_open_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_open_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__deal_property_history_tmp', \n'stg_hubspot__deal_property_history_tmp', \n'model', \n'models/tmp/stg_hubspot__deal_property_history_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__deal_property_history_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_event_deferred_tmp', \n'stg_hubspot__email_event_deferred_tmp', \n'model', \n'models/tmp/stg_hubspot__email_event_deferred_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_event_deferred_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot_source.stg_hubspot__email_campaign_tmp', \n'stg_hubspot__email_campaign_tmp', \n'model', \n'models/tmp/stg_hubspot__email_campaign_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'hubspot_source', \n'hubspot_source', \n'stg_hubspot__email_campaign_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages_source.stg_linkedin_pages__share_statistic', \n'stg_linkedin_pages__share_statistic', \n'model', \n'models/stg_linkedin_pages__share_statistic.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages_source', \n'linkedin_pages_source', \n'stg_linkedin_pages__share_statistic', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media', \n'stg_linkedin_pages__ugc_post_share_content_media', \n'model', \n'models/stg_linkedin_pages__ugc_post_share_content_media.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages_source', \n'linkedin_pages_source', \n'stg_linkedin_pages__ugc_post_share_content_media', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history', \n'stg_linkedin_pages__ugc_post_history', \n'model', \n'models/stg_linkedin_pages__ugc_post_history.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages_source', \n'linkedin_pages_source', \n'stg_linkedin_pages__ugc_post_history', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages_source.stg_linkedin_pages__organization', \n'stg_linkedin_pages__organization', \n'model', \n'models/stg_linkedin_pages__organization.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages_source', \n'linkedin_pages_source', \n'stg_linkedin_pages__organization', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic', \n'stg_linkedin_pages__ugc_post_share_statistic', \n'model', \n'models/stg_linkedin_pages__ugc_post_share_statistic.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages_source', \n'linkedin_pages_source', \n'stg_linkedin_pages__ugc_post_share_statistic', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post', \n'stg_linkedin_pages__organization_ugc_post', \n'model', \n'models/stg_linkedin_pages__organization_ugc_post.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages_source', \n'linkedin_pages_source', \n'stg_linkedin_pages__organization_ugc_post', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp', \n'stg_linkedin_pages__ugc_post_history_tmp', \n'model', \n'models/tmp/stg_linkedin_pages__ugc_post_history_tmp.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages_source', \n'linkedin_pages_source', \n'stg_linkedin_pages__ugc_post_history_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages_source.stg_linkedin_pages__organization_tmp', \n'stg_linkedin_pages__organization_tmp', \n'model', \n'models/tmp/stg_linkedin_pages__organization_tmp.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages_source', \n'linkedin_pages_source', \n'stg_linkedin_pages__organization_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp', \n'stg_linkedin_pages__organization_ugc_post_tmp', \n'model', \n'models/tmp/stg_linkedin_pages__organization_ugc_post_tmp.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages_source', \n'linkedin_pages_source', \n'stg_linkedin_pages__organization_ugc_post_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp', \n'stg_linkedin_pages__share_statistic_tmp', \n'model', \n'models/tmp/stg_linkedin_pages__share_statistic_tmp.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages_source', \n'linkedin_pages_source', \n'stg_linkedin_pages__share_statistic_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp', \n'stg_linkedin_pages__ugc_post_share_statistic_tmp', \n'model', \n'models/tmp/stg_linkedin_pages__ugc_post_share_statistic_tmp.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages_source', \n'linkedin_pages_source', \n'stg_linkedin_pages__ugc_post_share_statistic_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp', \n'stg_linkedin_pages__ugc_post_share_media_tmp', \n'model', \n'models/tmp/stg_linkedin_pages__ugc_post_share_media_tmp.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages_source', \n'linkedin_pages_source', \n'stg_linkedin_pages__ugc_post_share_media_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__companies', \n'hubspot__companies', \n'model', \n'models/sales/hubspot__companies.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__companies', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__deals', \n'hubspot__deals', \n'model', \n'models/sales/hubspot__deals.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__deals', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__deal_stages', \n'hubspot__deal_stages', \n'model', \n'models/sales/hubspot__deal_stages.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__deal_stages', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__engagements', \n'hubspot__engagements', \n'model', \n'models/sales/hubspot__engagements.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__engagements', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__deal_history', \n'hubspot__deal_history', \n'model', \n'models/sales/history/hubspot__deal_history.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__deal_history', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__company_history', \n'hubspot__company_history', \n'model', \n'models/sales/history/hubspot__company_history.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__company_history', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__engagement_tasks', \n'hubspot__engagement_tasks', \n'model', \n'models/sales/engagement_events/hubspot__engagement_tasks.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__engagement_tasks', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__engagement_notes', \n'hubspot__engagement_notes', \n'model', \n'models/sales/engagement_events/hubspot__engagement_notes.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__engagement_notes', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__engagement_calls', \n'hubspot__engagement_calls', \n'model', \n'models/sales/engagement_events/hubspot__engagement_calls.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__engagement_calls', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__engagement_emails', \n'hubspot__engagement_emails', \n'model', \n'models/sales/engagement_events/hubspot__engagement_emails.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__engagement_emails', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__engagement_meetings', \n'hubspot__engagement_meetings', \n'model', \n'models/sales/engagement_events/hubspot__engagement_meetings.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__engagement_meetings', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.int_hubspot__deals_enhanced', \n'int_hubspot__deals_enhanced', \n'model', \n'models/sales/intermediate/int_hubspot__deals_enhanced.sql', \ncast(True as boolean), \n'ephemeral', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'int_hubspot__deals_enhanced', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__email_sends', \n'hubspot__email_sends', \n'model', \n'models/marketing/hubspot__email_sends.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__email_sends', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__contact_lists', \n'hubspot__contact_lists', \n'model', \n'models/marketing/hubspot__contact_lists.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__contact_lists', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__contacts', \n'hubspot__contacts', \n'model', \n'models/marketing/hubspot__contacts.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__contacts', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__email_campaigns', \n'hubspot__email_campaigns', \n'model', \n'models/marketing/hubspot__email_campaigns.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__email_campaigns', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__email_event_dropped', \n'hubspot__email_event_dropped', \n'model', \n'models/marketing/email_events/hubspot__email_event_dropped.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__email_event_dropped', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__email_event_deferred', \n'hubspot__email_event_deferred', \n'model', \n'models/marketing/email_events/hubspot__email_event_deferred.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__email_event_deferred', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__email_event_opens', \n'hubspot__email_event_opens', \n'model', \n'models/marketing/email_events/hubspot__email_event_opens.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__email_event_opens', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__email_event_delivered', \n'hubspot__email_event_delivered', \n'model', \n'models/marketing/email_events/hubspot__email_event_delivered.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__email_event_delivered', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__email_event_status_change', \n'hubspot__email_event_status_change', \n'model', \n'models/marketing/email_events/hubspot__email_event_status_change.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__email_event_status_change', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__email_event_sent', \n'hubspot__email_event_sent', \n'model', \n'models/marketing/email_events/hubspot__email_event_sent.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__email_event_sent', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__email_event_clicks', \n'hubspot__email_event_clicks', \n'model', \n'models/marketing/email_events/hubspot__email_event_clicks.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__email_event_clicks', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__email_event_bounce', \n'hubspot__email_event_bounce', \n'model', \n'models/marketing/email_events/hubspot__email_event_bounce.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__email_event_bounce', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.hubspot__contact_history', \n'hubspot__contact_history', \n'model', \n'models/marketing/history/hubspot__contact_history.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'hubspot__contact_history', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.hubspot.int_hubspot__engagement_metrics__by_contact', \n'int_hubspot__engagement_metrics__by_contact', \n'model', \n'models/marketing/intermediate/int_hubspot__engagement_metrics__by_contact.sql', \ncast(True as boolean), \n'ephemeral', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'int_hubspot__engagement_metrics__by_contact', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot.int_hubspot__email_event_aggregates', \n'int_hubspot__email_event_aggregates', \n'model', \n'models/marketing/intermediate/int_hubspot__email_event_aggregates.sql', \ncast(True as boolean), \n'ephemeral', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'int_hubspot__email_event_aggregates', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot.int_hubspot__email_aggregate_status_change', \n'int_hubspot__email_aggregate_status_change', \n'model', \n'models/marketing/intermediate/int_hubspot__email_aggregate_status_change.sql', \ncast(True as boolean), \n'ephemeral', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'int_hubspot__email_aggregate_status_change', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.hubspot.int_hubspot__email_metrics__by_contact_list', \n'int_hubspot__email_metrics__by_contact_list', \n'model', \n'models/marketing/intermediate/int_hubspot__email_metrics__by_contact_list.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'hubspot', \n'hubspot', \n'int_hubspot__email_metrics__by_contact_list', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__invoice_line_item', \n'stg_stripe__invoice_line_item', \n'model', \n'models/stg_stripe__invoice_line_item.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__invoice_line_item', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__payment_intent', \n'stg_stripe__payment_intent', \n'model', \n'models/stg_stripe__payment_intent.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__payment_intent', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__payment_method', \n'stg_stripe__payment_method', \n'model', \n'models/stg_stripe__payment_method.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__payment_method', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__refund', \n'stg_stripe__refund', \n'model', \n'models/stg_stripe__refund.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__refund', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__subscription', \n'stg_stripe__subscription', \n'model', \n'models/stg_stripe__subscription.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__subscription', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__card', \n'stg_stripe__card', \n'model', \n'models/stg_stripe__card.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__card', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__invoice', \n'stg_stripe__invoice', \n'model', \n'models/stg_stripe__invoice.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__invoice', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__payout', \n'stg_stripe__payout', \n'model', \n'models/stg_stripe__payout.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__payout', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__charge', \n'stg_stripe__charge', \n'model', \n'models/stg_stripe__charge.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__charge', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__balance_transaction', \n'stg_stripe__balance_transaction', \n'model', \n'models/stg_stripe__balance_transaction.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__balance_transaction', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__fee', \n'stg_stripe__fee', \n'model', \n'models/stg_stripe__fee.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__fee', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__plan', \n'stg_stripe__plan', \n'model', \n'models/stg_stripe__plan.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__plan', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__payment_method_card', \n'stg_stripe__payment_method_card', \n'model', \n'models/stg_stripe__payment_method_card.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__payment_method_card', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__customer', \n'stg_stripe__customer', \n'model', \n'models/stg_stripe__customer.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__customer', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__payment_method_card_tmp', \n'stg_stripe__payment_method_card_tmp', \n'model', \n'models/tmp/stg_stripe__payment_method_card_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__payment_method_card_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__payment_method_tmp', \n'stg_stripe__payment_method_tmp', \n'model', \n'models/tmp/stg_stripe__payment_method_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__payment_method_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__refund_tmp', \n'stg_stripe__refund_tmp', \n'model', \n'models/tmp/stg_stripe__refund_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__refund_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__payout_tmp', \n'stg_stripe__payout_tmp', \n'model', \n'models/tmp/stg_stripe__payout_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__payout_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__invoice_tmp', \n'stg_stripe__invoice_tmp', \n'model', \n'models/tmp/stg_stripe__invoice_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__invoice_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__invoice_line_item_tmp', \n'stg_stripe__invoice_line_item_tmp', \n'model', \n'models/tmp/stg_stripe__invoice_line_item_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__invoice_line_item_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__charge_tmp', \n'stg_stripe__charge_tmp', \n'model', \n'models/tmp/stg_stripe__charge_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__charge_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__fee_tmp', \n'stg_stripe__fee_tmp', \n'model', \n'models/tmp/stg_stripe__fee_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__fee_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__payment_intent_tmp', \n'stg_stripe__payment_intent_tmp', \n'model', \n'models/tmp/stg_stripe__payment_intent_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__payment_intent_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__plan_tmp', \n'stg_stripe__plan_tmp', \n'model', \n'models/tmp/stg_stripe__plan_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__plan_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__card_tmp', \n'stg_stripe__card_tmp', \n'model', \n'models/tmp/stg_stripe__card_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__card_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__balance_transaction_tmp', \n'stg_stripe__balance_transaction_tmp', \n'model', \n'models/tmp/stg_stripe__balance_transaction_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__balance_transaction_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__customer_tmp', \n'stg_stripe__customer_tmp', \n'model', \n'models/tmp/stg_stripe__customer_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__customer_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe_source.stg_stripe__subscription_tmp', \n'stg_stripe__subscription_tmp', \n'model', \n'models/tmp/stg_stripe__subscription_tmp.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'stripe_source', \n'stripe_source', \n'stg_stripe__subscription_tmp', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.stg_nodes', \n'stg_nodes', \n'model', \n'models/staging/graph/stg_nodes.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'stg_nodes', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.stg_exposure_relationships', \n'stg_exposure_relationships', \n'model', \n'models/staging/graph/stg_exposure_relationships.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'stg_exposure_relationships', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.stg_node_relationships', \n'stg_node_relationships', \n'model', \n'models/staging/graph/stg_node_relationships.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'stg_node_relationships', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.stg_sources', \n'stg_sources', \n'model', \n'models/staging/graph/stg_sources.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'stg_sources', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.stg_exposures', \n'stg_exposures', \n'model', \n'models/staging/graph/stg_exposures.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'stg_exposures', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.stg_metric_relationships', \n'stg_metric_relationships', \n'model', \n'models/staging/graph/stg_metric_relationships.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'stg_metric_relationships', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.stg_metrics', \n'stg_metrics', \n'model', \n'models/staging/graph/stg_metrics.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'stg_metrics', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.stg_naming_convention_folders', \n'stg_naming_convention_folders', \n'model', \n'models/staging/variables/stg_naming_convention_folders.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'stg_naming_convention_folders', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.stg_naming_convention_prefixes', \n'stg_naming_convention_prefixes', \n'model', \n'models/staging/variables/stg_naming_convention_prefixes.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'stg_naming_convention_prefixes', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_undocumented_models', \n'fct_undocumented_models', \n'model', \n'models/marts/documentation/fct_undocumented_models.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_undocumented_models', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_documentation_coverage', \n'fct_documentation_coverage', \n'model', \n'models/marts/documentation/fct_documentation_coverage.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_documentation_coverage', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.int_direct_relationships', \n'int_direct_relationships', \n'model', \n'models/marts/core/int_direct_relationships.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'int_direct_relationships', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.int_all_dag_relationships', \n'int_all_dag_relationships', \n'model', \n'models/marts/core/int_all_dag_relationships.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'int_all_dag_relationships', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.int_all_graph_resources', \n'int_all_graph_resources', \n'model', \n'models/marts/core/int_all_graph_resources.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'int_all_graph_resources', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_multiple_sources_joined', \n'fct_multiple_sources_joined', \n'model', \n'models/marts/dag/fct_multiple_sources_joined.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_multiple_sources_joined', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_root_models', \n'fct_root_models', \n'model', \n'models/marts/dag/fct_root_models.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_root_models', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_model_fanout', \n'fct_model_fanout', \n'model', \n'models/marts/dag/fct_model_fanout.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_model_fanout', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_unused_sources', \n'fct_unused_sources', \n'model', \n'models/marts/dag/fct_unused_sources.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_unused_sources', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_source_fanout', \n'fct_source_fanout', \n'model', \n'models/marts/dag/fct_source_fanout.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_source_fanout', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_direct_join_to_source', \n'fct_direct_join_to_source', \n'model', \n'models/marts/dag/fct_direct_join_to_source.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_direct_join_to_source', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_staging_dependent_on_staging', \n'fct_staging_dependent_on_staging', \n'model', \n'models/marts/dag/fct_staging_dependent_on_staging.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_staging_dependent_on_staging', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate', \n'fct_staging_dependent_on_marts_or_intermediate', \n'model', \n'models/marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_staging_dependent_on_marts_or_intermediate', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source', \n'fct_marts_or_intermediate_dependent_on_source', \n'model', \n'models/marts/dag/fct_marts_or_intermediate_dependent_on_source.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_marts_or_intermediate_dependent_on_source', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts', \n'fct_rejoining_of_upstream_concepts', \n'model', \n'models/marts/dag/fct_rejoining_of_upstream_concepts.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_rejoining_of_upstream_concepts', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_missing_primary_key_tests', \n'fct_missing_primary_key_tests', \n'model', \n'models/marts/tests/fct_missing_primary_key_tests.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_missing_primary_key_tests', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_test_coverage', \n'fct_test_coverage', \n'model', \n'models/marts/tests/fct_test_coverage.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_test_coverage', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.int_model_test_summary', \n'int_model_test_summary', \n'model', \n'models/marts/tests/intermediate/int_model_test_summary.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'int_model_test_summary', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_exposure_parents_materializations', \n'fct_exposure_parents_materializations', \n'model', \n'models/marts/performance/fct_exposure_parents_materializations.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_exposure_parents_materializations', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_chained_views_dependencies', \n'fct_chained_views_dependencies', \n'model', \n'models/marts/performance/fct_chained_views_dependencies.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_chained_views_dependencies', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_source_directories', \n'fct_source_directories', \n'model', \n'models/marts/structure/fct_source_directories.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_source_directories', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_test_directories', \n'fct_test_directories', \n'model', \n'models/marts/structure/fct_test_directories.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_test_directories', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_model_naming_conventions', \n'fct_model_naming_conventions', \n'model', \n'models/marts/structure/fct_model_naming_conventions.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_model_naming_conventions', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.dbt_project_evaluator.fct_model_directories', \n'fct_model_directories', \n'model', \n'models/marts/structure/fct_model_directories.sql', \ncast(True as boolean), \n'view', \n'ignore', \n'prod_analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator', \n'fct_model_directories', \ncast(True as boolean), \n'', \n'{}'), \n\n('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions', \n'dbt_project_evaluator_exceptions', \n'seed', \n'seeds/dbt_project_evaluator_exceptions.csv', \ncast(True as boolean), \n'seed', \n'ignore', \n'prod_analytics', \n'analytics', \n'dbt_project_evaluator', \n'dbt_project_evaluator_exceptions', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages.linkedin_pages__posts', \n'linkedin_pages__posts', \n'model', \n'models/linkedin_pages__posts.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages', \n'linkedin_pages', \n'linkedin_pages__posts', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages.int_linkedin_pages__latest_post_history', \n'int_linkedin_pages__latest_post_history', \n'model', \n'models/intermediate/int_linkedin_pages__latest_post_history.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages', \n'linkedin_pages', \n'int_linkedin_pages__latest_post_history', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.linkedin_pages.int_linkedin_pages__latest_post', \n'int_linkedin_pages__latest_post', \n'model', \n'models/intermediate/int_linkedin_pages__latest_post.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'linkedin_pages', \n'linkedin_pages', \n'int_linkedin_pages__latest_post', \ncast(False as boolean), \n'', \n'{}'), \n\n('model.stripe.stripe__customer_overview', \n'stripe__customer_overview', \n'model', \n'models/stripe__customer_overview.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe', \n'stripe', \n'stripe__customer_overview', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe.stripe__balance_transactions', \n'stripe__balance_transactions', \n'model', \n'models/stripe__balance_transactions.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe', \n'stripe', \n'stripe__balance_transactions', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe.stripe__invoice_line_items', \n'stripe__invoice_line_items', \n'model', \n'models/stripe__invoice_line_items.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe', \n'stripe', \n'stripe__invoice_line_items', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe.stripe__subscription_details', \n'stripe__subscription_details', \n'model', \n'models/stripe__subscription_details.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe', \n'stripe', \n'stripe__subscription_details', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe.stripe__subscription_line_items', \n'stripe__subscription_line_items', \n'model', \n'models/stripe__subscription_line_items.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe', \n'stripe', \n'stripe__subscription_line_items', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe.stripe__monthly_overview', \n'stripe__monthly_overview', \n'model', \n'models/stripe__monthly_overview.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe', \n'stripe', \n'stripe__monthly_overview', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe.stripe__weekly_overview', \n'stripe__weekly_overview', \n'model', \n'models/stripe__weekly_overview.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe', \n'stripe', \n'stripe__weekly_overview', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe.stripe__quarterly_overview', \n'stripe__quarterly_overview', \n'model', \n'models/stripe__quarterly_overview.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe', \n'stripe', \n'stripe__quarterly_overview', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe.stripe__daily_overview', \n'stripe__daily_overview', \n'model', \n'models/stripe__daily_overview.sql', \ncast(True as boolean), \n'table', \n'ignore', \n'prod_analytics', \n'stripe', \n'stripe', \n'stripe__daily_overview', \ncast(True as boolean), \n'', \n'{}'), \n\n('model.stripe.int_stripe__incomplete_charges', \n'int_stripe__incomplete_charges', \n'model', \n'models/intermediate/int_stripe__incomplete_charges.sql', \ncast(True as boolean), \n'ephemeral', \n'ignore', \n'prod_analytics', \n'stripe', \n'stripe', \n'int_stripe__incomplete_charges', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113', \n'unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id', \n'test', \n'models/stg_hubspot__deal.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id', \ncast(False as boolean), \n'deal_pipeline_stage_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e', \n'not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id', \n'test', \n'models/stg_hubspot__deal.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b', \ncast(False as boolean), \n'deal_pipeline_stage_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403', \n'unique_stg_hubspot__deal_pipeline_deal_pipeline_id', \n'test', \n'models/stg_hubspot__deal.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__deal_pipeline_deal_pipeline_id', \ncast(False as boolean), \n'deal_pipeline_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3', \n'not_null_stg_hubspot__deal_pipeline_deal_pipeline_id', \n'test', \n'models/stg_hubspot__deal.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__deal_pipeline_deal_pipeline_id', \ncast(False as boolean), \n'deal_pipeline_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20', \n'not_null_stg_hubspot__deal_deal_id', \n'test', \n'models/stg_hubspot__deal.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__deal_deal_id', \ncast(False as boolean), \n'deal_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69', \n'unique_stg_hubspot__deal_deal_id', \n'test', \n'models/stg_hubspot__deal.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__deal_deal_id', \ncast(False as boolean), \n'deal_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0', \n'unique_stg_hubspot__contact_list_contact_list_id', \n'test', \n'models/stg_hubspot__contact.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__contact_list_contact_list_id', \ncast(False as boolean), \n'contact_list_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a', \n'not_null_stg_hubspot__contact_list_contact_list_id', \n'test', \n'models/stg_hubspot__contact.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__contact_list_contact_list_id', \ncast(False as boolean), \n'contact_list_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a', \n'unique_stg_hubspot__contact_contact_id', \n'test', \n'models/stg_hubspot__contact.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__contact_contact_id', \ncast(False as boolean), \n'contact_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944', \n'not_null_stg_hubspot__contact_contact_id', \n'test', \n'models/stg_hubspot__contact.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__contact_contact_id', \ncast(False as boolean), \n'contact_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9', \n'unique_stg_hubspot__email_event_bounce_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_event_bounce_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3', \n'not_null_stg_hubspot__email_event_bounce_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_event_bounce_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1', \n'unique_stg_hubspot__email_event_click_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_event_click_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5', \n'not_null_stg_hubspot__email_event_click_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_event_click_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912', \n'unique_stg_hubspot__email_event_deferred_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_event_deferred_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0', \n'not_null_stg_hubspot__email_event_deferred_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_event_deferred_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc', \n'unique_stg_hubspot__email_event_delivered_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_event_delivered_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20', \n'not_null_stg_hubspot__email_event_delivered_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_event_delivered_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71', \n'unique_stg_hubspot__email_event_dropped_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_event_dropped_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52', \n'not_null_stg_hubspot__email_event_dropped_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_event_dropped_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1', \n'unique_stg_hubspot__email_event_forward_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_event_forward_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3', \n'not_null_stg_hubspot__email_event_forward_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_event_forward_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1', \n'unique_stg_hubspot__email_event_open_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_event_open_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16', \n'not_null_stg_hubspot__email_event_open_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_event_open_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3', \n'unique_stg_hubspot__email_event_print_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_event_print_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b', \n'not_null_stg_hubspot__email_event_print_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_event_print_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272', \n'unique_stg_hubspot__email_event_sent_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_event_sent_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d', \n'not_null_stg_hubspot__email_event_sent_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_event_sent_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a', \n'unique_stg_hubspot__email_event_spam_report_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_event_spam_report_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f', \n'not_null_stg_hubspot__email_event_spam_report_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_event_spam_report_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0', \n'unique_stg_hubspot__email_event_status_change_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_event_status_change_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1', \n'not_null_stg_hubspot__email_event_status_change_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_event_status_change_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d', \n'unique_stg_hubspot__email_event_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_event_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531', \n'not_null_stg_hubspot__email_event_event_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_event_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e', \n'unique_stg_hubspot__email_campaign_email_campaign_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__email_campaign_email_campaign_id', \ncast(False as boolean), \n'email_campaign_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6', \n'not_null_stg_hubspot__email_campaign_email_campaign_id', \n'test', \n'models/stg_hubspot__email.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__email_campaign_email_campaign_id', \ncast(False as boolean), \n'email_campaign_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf', \n'not_null_stg_hubspot__engagement_call_engagement_id', \n'test', \n'models/stg_hubspot__engagement.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__engagement_call_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603', \n'unique_stg_hubspot__engagement_call_engagement_id', \n'test', \n'models/stg_hubspot__engagement.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__engagement_call_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca', \n'not_null_stg_hubspot__engagement_email_engagement_id', \n'test', \n'models/stg_hubspot__engagement.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__engagement_email_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc', \n'unique_stg_hubspot__engagement_email_engagement_id', \n'test', \n'models/stg_hubspot__engagement.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__engagement_email_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28', \n'not_null_stg_hubspot__engagement_meeting_engagement_id', \n'test', \n'models/stg_hubspot__engagement.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__engagement_meeting_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830', \n'unique_stg_hubspot__engagement_meeting_engagement_id', \n'test', \n'models/stg_hubspot__engagement.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__engagement_meeting_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e', \n'not_null_stg_hubspot__engagement_note_engagement_id', \n'test', \n'models/stg_hubspot__engagement.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__engagement_note_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e', \n'unique_stg_hubspot__engagement_note_engagement_id', \n'test', \n'models/stg_hubspot__engagement.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__engagement_note_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82', \n'not_null_stg_hubspot__engagement_task_engagement_id', \n'test', \n'models/stg_hubspot__engagement.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__engagement_task_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c', \n'unique_stg_hubspot__engagement_task_engagement_id', \n'test', \n'models/stg_hubspot__engagement.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__engagement_task_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f', \n'not_null_stg_hubspot__engagement_engagement_id', \n'test', \n'models/stg_hubspot__engagement.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__engagement_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0', \n'unique_stg_hubspot__engagement_engagement_id', \n'test', \n'models/stg_hubspot__engagement.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__engagement_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf', \n'unique_stg_hubspot__ticket_ticket_id', \n'test', \n'models/stg_hubspot__ticket.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__ticket_ticket_id', \ncast(False as boolean), \n'ticket_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53', \n'not_null_stg_hubspot__ticket_ticket_id', \n'test', \n'models/stg_hubspot__ticket.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__ticket_ticket_id', \ncast(False as boolean), \n'ticket_id', \n'{}'), \n\n('test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0', \n'unique_stg_hubspot__company_company_id', \n'test', \n'models/stg_hubspot__company.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'unique_stg_hubspot__company_company_id', \ncast(False as boolean), \n'company_id', \n'{}'), \n\n('test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43', \n'not_null_stg_hubspot__company_company_id', \n'test', \n'models/stg_hubspot__company.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot_source', \n'not_null_stg_hubspot__company_company_id', \ncast(False as boolean), \n'company_id', \n'{}'), \n\n('test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation.74490569e1', \n'dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation', \n'test', \n'models/stg_linkedin_pages.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'linkedin_pages_source', \n'dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation.edd32b54a1', \n'dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation', \n'test', \n'models/stg_linkedin_pages.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'linkedin_pages_source', \n'dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.linkedin_pages_source.not_null_stg_linkedin_pages__share_statistic_organization_entity_urn.150c878c76', \n'not_null_stg_linkedin_pages__share_statistic_organization_entity_urn', \n'test', \n'models/stg_linkedin_pages.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'linkedin_pages_source', \n'not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65', \ncast(False as boolean), \n'organization_entity_urn', \n'{}'), \n\n('test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation.452f64d50a', \n'dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation', \n'test', \n'models/stg_linkedin_pages.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'linkedin_pages_source', \n'dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation.8192e4952b', \n'dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation', \n'test', \n'models/stg_linkedin_pages.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'linkedin_pages_source', \n'dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation.f629d7cf4d', \n'dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation', \n'test', \n'models/stg_linkedin_pages.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'linkedin_pages_source', \n'dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation.10bd19bf37', \n'dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation', \n'test', \n'models/stg_linkedin_pages.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'linkedin_pages_source', \n'dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.hubspot.not_null_hubspot__deals_deal_id.bdbfe47fcd', \n'not_null_hubspot__deals_deal_id', \n'test', \n'models/sales/sales.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__deals_deal_id', \ncast(False as boolean), \n'deal_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__deals_deal_id.d728fe5f71', \n'unique_hubspot__deals_deal_id', \n'test', \n'models/sales/sales.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__deals_deal_id', \ncast(False as boolean), \n'deal_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__deal_stages_deal_stage_id.162d2d204b', \n'not_null_hubspot__deal_stages_deal_stage_id', \n'test', \n'models/sales/sales.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__deal_stages_deal_stage_id', \ncast(False as boolean), \n'deal_stage_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__deal_stages_deal_stage_id.7fd3732373', \n'unique_hubspot__deal_stages_deal_stage_id', \n'test', \n'models/sales/sales.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__deal_stages_deal_stage_id', \ncast(False as boolean), \n'deal_stage_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__companies_company_id.a58ceac3f2', \n'unique_hubspot__companies_company_id', \n'test', \n'models/sales/sales.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__companies_company_id', \ncast(False as boolean), \n'company_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__companies_company_id.687ec98e97', \n'not_null_hubspot__companies_company_id', \n'test', \n'models/sales/sales.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__companies_company_id', \ncast(False as boolean), \n'company_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__engagements_engagement_id.59b32bc0d7', \n'not_null_hubspot__engagements_engagement_id', \n'test', \n'models/sales/sales.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__engagements_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__engagements_engagement_id.01d5c3ee5d', \n'unique_hubspot__engagements_engagement_id', \n'test', \n'models/sales/sales.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__engagements_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__company_history_id.f1af964b1f', \n'unique_hubspot__company_history_id', \n'test', \n'models/sales/history/history.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__company_history_id', \ncast(False as boolean), \n'id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__company_history_id.33035793ff', \n'not_null_hubspot__company_history_id', \n'test', \n'models/sales/history/history.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__company_history_id', \ncast(False as boolean), \n'id', \n'{}'), \n\n('test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to.654ef778b1', \n'dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to', \n'test', \n'models/sales/history/history.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.hubspot.unique_hubspot__deal_history_id.1cb93fca79', \n'unique_hubspot__deal_history_id', \n'test', \n'models/sales/history/history.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__deal_history_id', \ncast(False as boolean), \n'id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__deal_history_id.a1c6cd6a75', \n'not_null_hubspot__deal_history_id', \n'test', \n'models/sales/history/history.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__deal_history_id', \ncast(False as boolean), \n'id', \n'{}'), \n\n('test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to.f55c724804', \n'dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to', \n'test', \n'models/sales/history/history.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.hubspot.not_null_hubspot__engagement_calls_engagement_id.00f8d8357f', \n'not_null_hubspot__engagement_calls_engagement_id', \n'test', \n'models/sales/engagement_events/engagement_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__engagement_calls_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__engagement_calls_engagement_id.972572ce6c', \n'unique_hubspot__engagement_calls_engagement_id', \n'test', \n'models/sales/engagement_events/engagement_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__engagement_calls_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__engagement_emails_engagement_id.13a39d1e09', \n'not_null_hubspot__engagement_emails_engagement_id', \n'test', \n'models/sales/engagement_events/engagement_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__engagement_emails_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__engagement_emails_engagement_id.b18e2acbde', \n'unique_hubspot__engagement_emails_engagement_id', \n'test', \n'models/sales/engagement_events/engagement_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__engagement_emails_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__engagement_meetings_engagement_id.83a791c3df', \n'not_null_hubspot__engagement_meetings_engagement_id', \n'test', \n'models/sales/engagement_events/engagement_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__engagement_meetings_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__engagement_meetings_engagement_id.3098aabcd1', \n'unique_hubspot__engagement_meetings_engagement_id', \n'test', \n'models/sales/engagement_events/engagement_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__engagement_meetings_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__engagement_notes_engagement_id.76434ac965', \n'not_null_hubspot__engagement_notes_engagement_id', \n'test', \n'models/sales/engagement_events/engagement_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__engagement_notes_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__engagement_notes_engagement_id.c9864b5001', \n'unique_hubspot__engagement_notes_engagement_id', \n'test', \n'models/sales/engagement_events/engagement_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__engagement_notes_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__engagement_tasks_engagement_id.67738794ae', \n'not_null_hubspot__engagement_tasks_engagement_id', \n'test', \n'models/sales/engagement_events/engagement_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__engagement_tasks_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__engagement_tasks_engagement_id.754d36b939', \n'unique_hubspot__engagement_tasks_engagement_id', \n'test', \n'models/sales/engagement_events/engagement_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__engagement_tasks_engagement_id', \ncast(False as boolean), \n'engagement_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_sends_event_id.b01306228f', \n'unique_hubspot__email_sends_event_id', \n'test', \n'models/marketing/marketing.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_sends_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_sends_event_id.9fc8a8bef3', \n'not_null_hubspot__email_sends_event_id', \n'test', \n'models/marketing/marketing.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_sends_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_campaigns_email_campaign_id.2470fabe62', \n'unique_hubspot__email_campaigns_email_campaign_id', \n'test', \n'models/marketing/marketing.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_campaigns_email_campaign_id', \ncast(False as boolean), \n'email_campaign_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_campaigns_email_campaign_id.6b2d6f43c0', \n'not_null_hubspot__email_campaigns_email_campaign_id', \n'test', \n'models/marketing/marketing.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_campaigns_email_campaign_id', \ncast(False as boolean), \n'email_campaign_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__contacts_contact_id.8f627121df', \n'unique_hubspot__contacts_contact_id', \n'test', \n'models/marketing/marketing.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__contacts_contact_id', \ncast(False as boolean), \n'contact_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__contacts_contact_id.e28e88dce3', \n'not_null_hubspot__contacts_contact_id', \n'test', \n'models/marketing/marketing.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__contacts_contact_id', \ncast(False as boolean), \n'contact_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__contact_lists_contact_list_id.ea9ef03bac', \n'unique_hubspot__contact_lists_contact_list_id', \n'test', \n'models/marketing/marketing.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__contact_lists_contact_list_id', \ncast(False as boolean), \n'contact_list_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__contact_lists_contact_list_id.3bde1bb891', \n'not_null_hubspot__contact_lists_contact_list_id', \n'test', \n'models/marketing/marketing.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__contact_lists_contact_list_id', \ncast(False as boolean), \n'contact_list_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_event_bounce_event_id.7a1c6704e1', \n'unique_hubspot__email_event_bounce_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_event_bounce_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_event_bounce_event_id.39d8daa6f5', \n'not_null_hubspot__email_event_bounce_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_event_bounce_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_event_clicks_event_id.60d3912846', \n'unique_hubspot__email_event_clicks_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_event_clicks_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_event_clicks_event_id.f603501ca0', \n'not_null_hubspot__email_event_clicks_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_event_clicks_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_event_deferred_event_id.bb75dcb83a', \n'unique_hubspot__email_event_deferred_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_event_deferred_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_event_deferred_event_id.2c6decaa91', \n'not_null_hubspot__email_event_deferred_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_event_deferred_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_event_delivered_event_id.242e838cce', \n'unique_hubspot__email_event_delivered_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_event_delivered_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_event_delivered_event_id.0609870be3', \n'not_null_hubspot__email_event_delivered_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_event_delivered_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_event_dropped_event_id.093040860b', \n'unique_hubspot__email_event_dropped_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_event_dropped_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_event_dropped_event_id.5cfe4eeb95', \n'not_null_hubspot__email_event_dropped_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_event_dropped_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_event_forward_event_id.064956aaa7', \n'unique_hubspot__email_event_forward_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_event_forward_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_event_forward_event_id.417a73da08', \n'not_null_hubspot__email_event_forward_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_event_forward_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_event_opens_event_id.d7963f4eb0', \n'unique_hubspot__email_event_opens_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_event_opens_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_event_opens_event_id.a9fe279ee1', \n'not_null_hubspot__email_event_opens_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_event_opens_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_event_print_event_id.548f6cece7', \n'unique_hubspot__email_event_print_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_event_print_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_event_print_event_id.9dac8a147e', \n'not_null_hubspot__email_event_print_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_event_print_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_event_sent_event_id.68076270f8', \n'unique_hubspot__email_event_sent_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_event_sent_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_event_sent_event_id.5507dcc5b9', \n'not_null_hubspot__email_event_sent_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_event_sent_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_event_spam_report_event_id.20aab81ec6', \n'unique_hubspot__email_event_spam_report_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_event_spam_report_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_event_spam_report_event_id.5ddca8771a', \n'not_null_hubspot__email_event_spam_report_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_event_spam_report_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__email_event_status_change_event_id.2e5b2b72e2', \n'unique_hubspot__email_event_status_change_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__email_event_status_change_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__email_event_status_change_event_id.a1737e44b3', \n'not_null_hubspot__email_event_status_change_event_id', \n'test', \n'models/marketing/email_events/email_events.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__email_event_status_change_event_id', \ncast(False as boolean), \n'event_id', \n'{}'), \n\n('test.hubspot.unique_hubspot__contact_history_id.aef69ae1ec', \n'unique_hubspot__contact_history_id', \n'test', \n'models/marketing/history/history.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_hubspot__contact_history_id', \ncast(False as boolean), \n'id', \n'{}'), \n\n('test.hubspot.not_null_hubspot__contact_history_id.eaae22e088', \n'not_null_hubspot__contact_history_id', \n'test', \n'models/marketing/history/history.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_hubspot__contact_history_id', \ncast(False as boolean), \n'id', \n'{}'), \n\n('test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to.42ccfb8329', \n'dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to', \n'test', \n'models/marketing/history/history.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.hubspot.unique_int_hubspot__email_aggregate_status_change_email_send_id.7c03e87c05', \n'unique_int_hubspot__email_aggregate_status_change_email_send_id', \n'test', \n'models/marketing/intermediate/intermediate.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_int_hubspot__email_aggregate_status_change_email_send_id', \ncast(False as boolean), \n'email_send_id', \n'{}'), \n\n('test.hubspot.not_null_int_hubspot__email_aggregate_status_change_email_send_id.16bf74a3bc', \n'not_null_int_hubspot__email_aggregate_status_change_email_send_id', \n'test', \n'models/marketing/intermediate/intermediate.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_int_hubspot__email_ag_072a8e51e30dd12183bb92703b55e189', \ncast(False as boolean), \n'email_send_id', \n'{}'), \n\n('test.hubspot.unique_int_hubspot__email_metrics__by_contact_list_contact_list_id.095d72d5b8', \n'unique_int_hubspot__email_metrics__by_contact_list_contact_list_id', \n'test', \n'models/marketing/intermediate/intermediate.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_int_hubspot__email_metr_ee44515cad61aa59cf03c59614b376f2', \ncast(False as boolean), \n'contact_list_id', \n'{}'), \n\n('test.hubspot.not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id.1d3cf4caf2', \n'not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id', \n'test', \n'models/marketing/intermediate/intermediate.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_int_hubspot__email_me_a72a3c877d9529cf35305d2d29199a33', \ncast(False as boolean), \n'contact_list_id', \n'{}'), \n\n('test.hubspot.unique_int_hubspot__email_event_aggregates_email_send_id.4deec238f9', \n'unique_int_hubspot__email_event_aggregates_email_send_id', \n'test', \n'models/marketing/intermediate/intermediate.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_int_hubspot__email_event_aggregates_email_send_id', \ncast(False as boolean), \n'email_send_id', \n'{}'), \n\n('test.hubspot.not_null_int_hubspot__email_event_aggregates_email_send_id.ac29e6997a', \n'not_null_int_hubspot__email_event_aggregates_email_send_id', \n'test', \n'models/marketing/intermediate/intermediate.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_int_hubspot__email_event_aggregates_email_send_id', \ncast(False as boolean), \n'email_send_id', \n'{}'), \n\n('test.hubspot.unique_int_hubspot__engagement_metrics__by_contact_contact_id.1c156b64ed', \n'unique_int_hubspot__engagement_metrics__by_contact_contact_id', \n'test', \n'models/marketing/intermediate/intermediate.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'unique_int_hubspot__engagement_metrics__by_contact_contact_id', \ncast(False as boolean), \n'contact_id', \n'{}'), \n\n('test.hubspot.not_null_int_hubspot__engagement_metrics__by_contact_contact_id.4a800df06b', \n'not_null_int_hubspot__engagement_metrics__by_contact_contact_id', \n'test', \n'models/marketing/intermediate/intermediate.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'hubspot', \n'not_null_int_hubspot__engagement_metrics__by_contact_contact_id', \ncast(False as boolean), \n'contact_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__balance_transaction_balance_transaction_id.2f29c783d0', \n'unique_stg_stripe__balance_transaction_balance_transaction_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__balance_transaction_balance_transaction_id', \ncast(False as boolean), \n'balance_transaction_id', \n'{}'), \n\n('test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f', \n'not_null_stg_stripe__balance_transaction_balance_transaction_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'not_null_stg_stripe__balance_transaction_balance_transaction_id', \ncast(False as boolean), \n'balance_transaction_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__card_card_id.000d85b677', \n'unique_stg_stripe__card_card_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__card_card_id', \ncast(False as boolean), \n'card_id', \n'{}'), \n\n('test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a', \n'not_null_stg_stripe__card_card_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'not_null_stg_stripe__card_card_id', \ncast(False as boolean), \n'card_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__charge_charge_id.04b21ec6e0', \n'unique_stg_stripe__charge_charge_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__charge_charge_id', \ncast(False as boolean), \n'charge_id', \n'{}'), \n\n('test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a', \n'not_null_stg_stripe__charge_charge_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'not_null_stg_stripe__charge_charge_id', \ncast(False as boolean), \n'charge_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__customer_customer_id.a06a928db2', \n'unique_stg_stripe__customer_customer_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__customer_customer_id', \ncast(False as boolean), \n'customer_id', \n'{}'), \n\n('test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0', \n'not_null_stg_stripe__customer_customer_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'not_null_stg_stripe__customer_customer_id', \ncast(False as boolean), \n'customer_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__payment_intent_payment_intent_id.02430feefd', \n'unique_stg_stripe__payment_intent_payment_intent_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__payment_intent_payment_intent_id', \ncast(False as boolean), \n'payment_intent_id', \n'{}'), \n\n('test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb', \n'not_null_stg_stripe__payment_intent_payment_intent_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'not_null_stg_stripe__payment_intent_payment_intent_id', \ncast(False as boolean), \n'payment_intent_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__payment_method_payment_method_id.b12d5fcf1b', \n'unique_stg_stripe__payment_method_payment_method_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__payment_method_payment_method_id', \ncast(False as boolean), \n'payment_method_id', \n'{}'), \n\n('test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471', \n'not_null_stg_stripe__payment_method_payment_method_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'not_null_stg_stripe__payment_method_payment_method_id', \ncast(False as boolean), \n'payment_method_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__payout_payout_id.9d9065d2c5', \n'unique_stg_stripe__payout_payout_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__payout_payout_id', \ncast(False as boolean), \n'payout_id', \n'{}'), \n\n('test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc', \n'not_null_stg_stripe__payout_payout_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'not_null_stg_stripe__payout_payout_id', \ncast(False as boolean), \n'payout_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__refund_refund_id.0b7c337204', \n'unique_stg_stripe__refund_refund_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__refund_refund_id', \ncast(False as boolean), \n'refund_id', \n'{}'), \n\n('test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0', \n'not_null_stg_stripe__refund_refund_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'not_null_stg_stripe__refund_refund_id', \ncast(False as boolean), \n'refund_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__invoice_line_item_unique_id.e8805346de', \n'unique_stg_stripe__invoice_line_item_unique_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__invoice_line_item_unique_id', \ncast(False as boolean), \n'unique_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__invoice_invoice_id.63b5714c58', \n'unique_stg_stripe__invoice_invoice_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__invoice_invoice_id', \ncast(False as boolean), \n'invoice_id', \n'{}'), \n\n('test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095', \n'not_null_stg_stripe__invoice_invoice_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'not_null_stg_stripe__invoice_invoice_id', \ncast(False as boolean), \n'invoice_id', \n'{}'), \n\n('test.stripe_source.not_null_stg_stripe__plan_plan_id.f59445523e', \n'not_null_stg_stripe__plan_plan_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'not_null_stg_stripe__plan_plan_id', \ncast(False as boolean), \n'plan_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__plan_plan_id.b21f08031c', \n'unique_stg_stripe__plan_plan_id', \n'test', \n'models/stg_stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__plan_plan_id', \ncast(False as boolean), \n'plan_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__credit_note_credit_note_id.135c7cd4a0', \n'unique_stg_stripe__credit_note_credit_note_id', \n'test', \n'models/stg_stripe.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__credit_note_credit_note_id', \ncast(False as boolean), \n'credit_note_id', \n'{}'), \n\n('test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd', \n'not_null_stg_stripe__credit_note_credit_note_id', \n'test', \n'models/stg_stripe.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'not_null_stg_stripe__credit_note_credit_note_id', \ncast(False as boolean), \n'credit_note_id', \n'{}'), \n\n('test.stripe_source.unique_stg_stripe__credit_note_line_item_credit_note_line_item_id.3972a0829e', \n'unique_stg_stripe__credit_note_line_item_credit_note_line_item_id', \n'test', \n'models/stg_stripe.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'unique_stg_stripe__credit_note_bca3c96841994776de40078a094584d4', \ncast(False as boolean), \n'credit_note_line_item_id', \n'{}'), \n\n('test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7', \n'not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id', \n'test', \n'models/stg_stripe.yml', \ncast(False as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe_source', \n'not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d', \ncast(False as boolean), \n'credit_note_line_item_id', \n'{}'), \n\n('test.dbt_project_evaluator.dbt_utils_accepted_range_fct_documentation_coverage_documentation_coverage_pct___var_documentation_coverage_target_.31ca75dbaa', \n'dbt_utils_accepted_range_fct_documentation_coverage_documentation_coverage_pct___var_documentation_coverage_target_', \n'test', \n'models/marts/documentation/documentation.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'dbt_utils_accepted_range_fct_d_60fa1e42bcaed7ea1fca15068fe7952f', \ncast(False as boolean), \n'documentation_coverage_pct', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c', \n'is_empty_fct_undocumented_models_', \n'test', \n'models/marts/documentation/documentation.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_undocumented_models_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028', \n'is_empty_fct_direct_join_to_source_', \n'test', \n'models/marts/dag/dag.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_direct_join_to_source_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f', \n'is_empty_fct_marts_or_intermediate_dependent_on_source_', \n'test', \n'models/marts/dag/dag.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_marts_or_intermediate_dependent_on_source_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95', \n'is_empty_fct_model_fanout_', \n'test', \n'models/marts/dag/dag.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_model_fanout_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817', \n'is_empty_fct_multiple_sources_joined_', \n'test', \n'models/marts/dag/dag.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_multiple_sources_joined_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d', \n'is_empty_fct_rejoining_of_upstream_concepts_', \n'test', \n'models/marts/dag/dag.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_rejoining_of_upstream_concepts_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1', \n'is_empty_fct_root_models_', \n'test', \n'models/marts/dag/dag.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_root_models_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722', \n'is_empty_fct_source_fanout_', \n'test', \n'models/marts/dag/dag.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_source_fanout_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f', \n'is_empty_fct_staging_dependent_on_marts_or_intermediate_', \n'test', \n'models/marts/dag/dag.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_staging_dependent_on_marts_or_intermediate_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca', \n'is_empty_fct_staging_dependent_on_staging_', \n'test', \n'models/marts/dag/dag.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_staging_dependent_on_staging_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8', \n'is_empty_fct_unused_sources_', \n'test', \n'models/marts/dag/dag.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_unused_sources_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422', \n'is_empty_fct_exposure_parents_materializations_', \n'test', \n'models/marts/dag/dag.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_exposure_parents_materializations_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.dbt_utils_accepted_range_fct_test_coverage_test_coverage_pct___var_test_coverage_target_.09c9579c9e', \n'dbt_utils_accepted_range_fct_test_coverage_test_coverage_pct___var_test_coverage_target_', \n'test', \n'models/marts/tests/testing.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'dbt_utils_accepted_range_fct_t_2fb17cd478c8bb66913b01eb1c42e454', \ncast(False as boolean), \n'test_coverage_pct', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0', \n'is_empty_fct_missing_primary_key_tests_', \n'test', \n'models/marts/tests/testing.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_missing_primary_key_tests_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.dbt_utils_accepted_range_fct_chained_views_dependencies_distance__False___var_chained_views_threshold_.f54ef16663', \n'dbt_utils_accepted_range_fct_chained_views_dependencies_distance__False___var_chained_views_threshold_', \n'test', \n'models/marts/performance/performance.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'dbt_utils_accepted_range_fct_c_f4e4ed7d4720ea1b89a90d20835948ae', \ncast(False as boolean), \n'distance', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db', \n'is_empty_fct_model_directories_', \n'test', \n'models/marts/structure/structure.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_model_directories_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2', \n'is_empty_fct_model_naming_conventions_', \n'test', \n'models/marts/structure/structure.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_model_naming_conventions_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c', \n'is_empty_fct_source_directories_', \n'test', \n'models/marts/structure/structure.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_source_directories_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433', \n'is_empty_fct_test_directories_', \n'test', \n'models/marts/structure/structure.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'dbt_project_evaluator', \n'is_empty_fct_test_directories_', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.linkedin_pages.dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation.d7c3d11ad1', \n'dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation', \n'test', \n'models/linkedin_pages.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'linkedin_pages', \n'dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6', \ncast(False as boolean), \n'', \n'{}'), \n\n('test.stripe.unique_stripe__balance_transactions_balance_transaction_id.313ec591b5', \n'unique_stripe__balance_transactions_balance_transaction_id', \n'test', \n'models/stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe', \n'unique_stripe__balance_transactions_balance_transaction_id', \ncast(False as boolean), \n'balance_transaction_id', \n'{}'), \n\n('test.stripe.unique_stripe__invoice_line_items_invoice_line_item_id.6d4544857c', \n'unique_stripe__invoice_line_items_invoice_line_item_id', \n'test', \n'models/stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe', \n'unique_stripe__invoice_line_items_invoice_line_item_id', \ncast(False as boolean), \n'invoice_line_item_id', \n'{}'), \n\n('test.stripe.unique_stripe__subscription_line_items_invoice_line_item_id.a4a7f94547', \n'unique_stripe__subscription_line_items_invoice_line_item_id', \n'test', \n'models/stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe', \n'unique_stripe__subscription_line_items_invoice_line_item_id', \ncast(False as boolean), \n'invoice_line_item_id', \n'{}'), \n\n('test.stripe.unique_stripe__subscription_details_subscription_id.8c3bcf1f61', \n'unique_stripe__subscription_details_subscription_id', \n'test', \n'models/stripe.yml', \ncast(True as boolean), \n'test', \n'', \n'prod_analytics', \n'dbt_test__audit', \n'stripe', \n'unique_stripe__subscription_details_subscription_id', \ncast(False as boolean), \n'subscription_id', \n'{}') \n                ) as t (unique_id, \nname, \nresource_type, \nfile_path, \nis_enabled, \nmaterialized, \non_schema_change, \ndatabase, \nschema, \npackage_name, \nalias, \nis_described, \ncolumn_name, \nmeta)\n\n        )\n\n        select * from cte\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.stg_nodes"}, "model.dbt_project_evaluator.stg_exposure_relationships": {"raw_sql": "with relationships as (\n\n    {{\n        dbt_project_evaluator.get_relationships(\"exposures\")\n    }}\n\n),\n\n\nfinal as (\n    select \n        {{ dbt_utils.surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from relationships\n)\n\nselect distinct * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_relationships", "macro.dbt_utils.surrogate_key"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_exposure_relationships"], "unique_id": "model.dbt_project_evaluator.stg_exposure_relationships", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "staging/graph/stg_exposure_relationships.sql", "original_file_path": "models/staging/graph/stg_exposure_relationships.sql", "name": "stg_exposure_relationships", "alias": "stg_exposure_relationships", "checksum": {"name": "sha256", "checksum": "832101ddef5625aa1722f51e62162234622d4ac05eb6589ee4205a384508a24c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_exposure_relationships.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541349.362751, "compiled_sql": "with relationships as (\n\n    with cte as (\n\n            select * from ( \n                    values (cast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar )) \n                ) as t (resource_id, \ndirect_parent_id, \nis_primary_relationship)\n\n        )\n\n        select * from cte\n\nwhere resource_id is not null\n\n),\n\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as \n    varchar\n), '') || '-' || coalesce(cast(direct_parent_id as \n    varchar\n), '') as \n    varchar\n)) as unique_id, \n        *\n    from relationships\n)\n\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.stg_exposure_relationships"}, "model.dbt_project_evaluator.stg_node_relationships": {"raw_sql": "with relationships as (\n\n    {{\n        dbt_project_evaluator.get_relationships(\"nodes\")\n    }}\n\n),\n\n\nfinal as (\n    select \n        {{ dbt_utils.surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from relationships\n)\n\nselect distinct * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_relationships", "macro.dbt_utils.surrogate_key"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_node_relationships"], "unique_id": "model.dbt_project_evaluator.stg_node_relationships", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "staging/graph/stg_node_relationships.sql", "original_file_path": "models/staging/graph/stg_node_relationships.sql", "name": "stg_node_relationships", "alias": "stg_node_relationships", "checksum": {"name": "sha256", "checksum": "3357384defa4814714f95c2af1c7822fe62af80ea49ab605184995377287f1c2"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_node_relationships.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541349.371864, "compiled_sql": "with relationships as (\n\n    with cte as (\n\n            select * from ( \n                    values (cast('model.hubspot_source.stg_hubspot__engagement_task' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_task_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_task' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_task_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_deal' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_deal_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_deal' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_deal_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__company_property_history' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__company_property_history_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__company_property_history' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__company_property_history_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_delivered' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_delivered_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_delivered' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_delivered_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__owner' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__owner_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__owner' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__owner_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_meeting' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_meeting_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_meeting' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_meeting_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_email' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_email_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_email' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_email_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_status_change' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_status_change_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_status_change' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_status_change_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__contact_list_member' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_list_member_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__contact_list_member' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_list_member_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__deal' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_pipeline' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_pipeline_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__deal_pipeline' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_pipeline_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_company' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_company_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__deal_company' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_company_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_note' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_note_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_note' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_note_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_contact' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_contact_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_contact' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_contact_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__contact_list' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_list_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__contact_list' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_list_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_pipeline_stage' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__deal_pipeline_stage' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_dropped' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_dropped_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_dropped' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_dropped_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_stage' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_stage_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__deal_stage' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_stage_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_property_history' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_property_history_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__deal_property_history' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_property_history_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_bounce' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_bounce_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_bounce' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_bounce_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_company' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_company_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_company' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_company_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_deferred' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_deferred_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_deferred' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_deferred_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__company' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__company_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__company' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__company_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_contact' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_contact_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__deal_contact' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_contact_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_click' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_click_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_click' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_click_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_call' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_call_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_call' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_call_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__engagement' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_campaign' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_campaign_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__email_campaign' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_campaign_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__contact_property_history' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_property_history_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__contact_property_history' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_property_history_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_open' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_open_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_open' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_open_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_sent' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_sent_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_sent' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_sent_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__contact_property_history_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.contact_property_history' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_dropped_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.email_event_dropped' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_sent_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.email_event_sent' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.deal' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_contact_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.deal_contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__contact_list_member_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.contact_list_member' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__owner_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.owner' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_stage_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.deal_stage' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_pipeline_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.deal_pipeline' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_company_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.engagement_company' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__contact_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_status_change_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.email_event_status_change' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_note_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.engagement_note' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_company_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.deal_company' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_deal_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.engagement_deal' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__company_property_history_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.company_property_history' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.email_event' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__company_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.company' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_click_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.email_event_click' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_contact_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.engagement_contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__contact_list_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.contact_list' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_meeting_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.engagement_meeting' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.engagement' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_delivered_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.email_event_delivered' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_email_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.engagement_email' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_bounce_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.email_event_bounce' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_call_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.engagement_call' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.deal_pipeline_stage' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__engagement_task_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.engagement_task' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_open_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.email_event_open' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__deal_property_history_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.deal_property_history' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_event_deferred_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.email_event_deferred' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot_source.stg_hubspot__email_campaign_tmp' as \n    varchar\n), \ncast('source.hubspot_source.hubspot.email_campaign' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__share_statistic' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__share_statistic' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__organization' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__organization_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__organization' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__organization_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp' as \n    varchar\n), \ncast('source.linkedin_pages_source.linkedin_pages.ugc_post_history' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__organization_tmp' as \n    varchar\n), \ncast('source.linkedin_pages_source.linkedin_pages.organization' as \n    varchar\n), \nFalse), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__organization_tmp' as \n    varchar\n), \ncast('source.linkedin_pages_source.linkedin_pages.organization' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp' as \n    varchar\n), \ncast('source.linkedin_pages_source.linkedin_pages.organization_ugc_post' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp' as \n    varchar\n), \ncast('source.linkedin_pages_source.linkedin_pages.share_statistic' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp' as \n    varchar\n), \ncast('source.linkedin_pages_source.linkedin_pages.ugc_post_share_statistic' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp' as \n    varchar\n), \ncast('source.linkedin_pages_source.linkedin_pages.ugc_post_share_content_media' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__companies' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__company' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__companies' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagements' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__companies' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_company' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__deals' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__deals_enhanced' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__deals' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagements' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__deals' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_deal' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__deal_stages' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__deals_enhanced' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__deal_stages' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_stage' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__engagements' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__engagements' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_contact' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__engagements' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_deal' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__engagements' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_company' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__deal_history' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_property_history' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__company_history' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__company_property_history' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__engagement_tasks' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_task' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__engagement_tasks' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagements' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__engagement_notes' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_note' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__engagement_notes' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagements' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__engagement_calls' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_call' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__engagement_calls' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagements' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__engagement_emails' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_email' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__engagement_emails' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagements' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__engagement_meetings' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_meeting' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__engagement_meetings' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagements' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.int_hubspot__deals_enhanced' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.int_hubspot__deals_enhanced' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_pipeline' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.int_hubspot__deals_enhanced' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_pipeline_stage' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.int_hubspot__deals_enhanced' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__owner' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__email_sends' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_sent' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_sends' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__email_event_aggregates' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_sends' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__email_aggregate_status_change' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__contact_lists' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_list' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__contact_lists' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__email_metrics__by_contact_list' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__contacts' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__contacts' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_sends' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__contacts' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__engagement_metrics__by_contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__email_campaigns' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_campaign' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_campaigns' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_sends' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__email_event_dropped' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_dropped' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_dropped' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_dropped' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__email_event_deferred' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_deferred' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_deferred' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_deferred' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__email_event_opens' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_open' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_opens' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_opens' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__email_event_delivered' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_delivered' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_delivered' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_delivered' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__email_event_status_change' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_status_change' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_status_change' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_status_change' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__email_event_sent' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_sent' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_sent' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_sent' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__email_event_clicks' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_click' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_clicks' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_clicks' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__email_event_bounce' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_bounce' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_bounce' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.hubspot__email_event_bounce' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.hubspot__contact_history' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_property_history' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.int_hubspot__engagement_metrics__by_contact' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagements' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.int_hubspot__engagement_metrics__by_contact' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_contact' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.int_hubspot__email_event_aggregates' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.int_hubspot__email_aggregate_status_change' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_status_change' as \n    varchar\n), \nTrue), \n\n(cast('model.hubspot.int_hubspot__email_metrics__by_contact_list' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_sends' as \n    varchar\n), \nFalse), \n\n(cast('model.hubspot.int_hubspot__email_metrics__by_contact_list' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_list_member' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__invoice_line_item' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__invoice_line_item_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__invoice_line_item' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__invoice_line_item_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__payment_intent' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_intent_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__payment_intent' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_intent_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__payment_method' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_method_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__payment_method' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_method_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__refund' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__refund_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__refund' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__refund_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__subscription' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__subscription_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__subscription' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__subscription_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__card' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__card_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__card' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__card_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__invoice' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__invoice_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__invoice' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__invoice_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__payout' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payout_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__payout' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payout_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__charge' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__charge_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__charge' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__charge_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__balance_transaction' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__balance_transaction_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__balance_transaction' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__balance_transaction_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__fee' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__fee_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__fee' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__fee_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__plan' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__plan_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__plan' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__plan_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__payment_method_card' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_method_card_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__payment_method_card' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_method_card_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__customer' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__customer_tmp' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe_source.stg_stripe__customer' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__customer_tmp' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__payment_method_card_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.payment_method_card' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__payment_method_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.payment_method' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__refund_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.refund' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__payout_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.payout' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__invoice_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.invoice' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__invoice_line_item_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.invoice_line_item' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__charge_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.charge' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__fee_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.fee' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__payment_intent_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.payment_intent' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__plan_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.plan' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__card_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.card' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__balance_transaction_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.balance_transaction' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__customer_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.customer' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe_source.stg_stripe__subscription_tmp' as \n    varchar\n), \ncast('source.stripe_source.stripe.subscription_history' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.stg_nodes' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('model.dbt_project_evaluator.stg_exposure_relationships' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('model.dbt_project_evaluator.stg_node_relationships' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('model.dbt_project_evaluator.stg_sources' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('model.dbt_project_evaluator.stg_exposures' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('model.dbt_project_evaluator.stg_metric_relationships' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('model.dbt_project_evaluator.stg_metrics' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('model.dbt_project_evaluator.stg_naming_convention_folders' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('model.dbt_project_evaluator.stg_naming_convention_prefixes' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('model.dbt_project_evaluator.fct_undocumented_models' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_undocumented_models' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_documentation_coverage' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.int_direct_relationships' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.int_direct_relationships' as \n    varchar\n), \ncast('model.dbt_project_evaluator.stg_node_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.int_direct_relationships' as \n    varchar\n), \ncast('model.dbt_project_evaluator.stg_exposure_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.int_direct_relationships' as \n    varchar\n), \ncast('model.dbt_project_evaluator.stg_metric_relationships' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_direct_relationships' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \ncast('model.dbt_project_evaluator.stg_nodes' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \ncast('model.dbt_project_evaluator.stg_exposures' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \ncast('model.dbt_project_evaluator.stg_metrics' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \ncast('model.dbt_project_evaluator.stg_sources' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \ncast('model.dbt_project_evaluator.stg_naming_convention_prefixes' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \ncast('model.dbt_project_evaluator.stg_naming_convention_folders' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_multiple_sources_joined' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_multiple_sources_joined' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_root_models' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_root_models' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_model_fanout' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_model_fanout' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_unused_sources' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_unused_sources' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_source_fanout' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_source_fanout' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_direct_join_to_source' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_direct_join_to_source' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_staging_dependent_on_staging' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_staging_dependent_on_staging' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_missing_primary_key_tests' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_model_test_summary' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_missing_primary_key_tests' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_test_coverage' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_model_test_summary' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.int_model_test_summary' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.int_model_test_summary' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_direct_relationships' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_exposure_parents_materializations' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_exposure_parents_materializations' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_chained_views_dependencies' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_chained_views_dependencies' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_source_directories' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_source_directories' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_test_directories' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_test_directories' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_direct_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_test_directories' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_model_naming_conventions' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_model_naming_conventions' as \n    varchar\n), \ncast('model.dbt_project_evaluator.stg_naming_convention_prefixes' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_model_naming_conventions' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('model.dbt_project_evaluator.fct_model_directories' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_graph_resources' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_model_directories' as \n    varchar\n), \ncast('model.dbt_project_evaluator.stg_naming_convention_folders' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_model_directories' as \n    varchar\n), \ncast('model.dbt_project_evaluator.int_all_dag_relationships' as \n    varchar\n), \nFalse), \n\n(cast('model.dbt_project_evaluator.fct_model_directories' as \n    varchar\n), \ncast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \nTrue), \n\n(cast('seed.dbt_project_evaluator.dbt_project_evaluator_exceptions' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('model.linkedin_pages.linkedin_pages__posts' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__share_statistic' as \n    varchar\n), \nFalse), \n\n(cast('model.linkedin_pages.linkedin_pages__posts' as \n    varchar\n), \ncast('model.linkedin_pages.int_linkedin_pages__latest_post' as \n    varchar\n), \nFalse), \n\n(cast('model.linkedin_pages.linkedin_pages__posts' as \n    varchar\n), \ncast('model.linkedin_pages.int_linkedin_pages__latest_post_history' as \n    varchar\n), \nFalse), \n\n(cast('model.linkedin_pages.linkedin_pages__posts' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media' as \n    varchar\n), \nFalse), \n\n(cast('model.linkedin_pages.linkedin_pages__posts' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__organization' as \n    varchar\n), \nFalse), \n\n(cast('model.linkedin_pages.linkedin_pages__posts' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages.int_linkedin_pages__latest_post_history' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history' as \n    varchar\n), \nTrue), \n\n(cast('model.linkedin_pages.int_linkedin_pages__latest_post' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe.stripe__customer_overview' as \n    varchar\n), \ncast('model.stripe.stripe__balance_transactions' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__customer_overview' as \n    varchar\n), \ncast('model.stripe.int_stripe__incomplete_charges' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__customer_overview' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__customer' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe.stripe__balance_transactions' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__balance_transaction' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__balance_transactions' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__charge' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__balance_transactions' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_intent' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__balance_transactions' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__card' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__balance_transactions' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payout' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__balance_transactions' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__customer' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__balance_transactions' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_method' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__balance_transactions' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_method_card' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__balance_transactions' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__refund' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe.stripe__invoice_line_items' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__invoice' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__invoice_line_items' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__charge' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__invoice_line_items' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__invoice_line_item' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__invoice_line_items' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__customer' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__invoice_line_items' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__subscription' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__invoice_line_items' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__plan' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe.stripe__subscription_details' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__invoice' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__subscription_details' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__charge' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__subscription_details' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__invoice_line_item' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__subscription_details' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__subscription' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__subscription_details' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__customer' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe.stripe__subscription_line_items' as \n    varchar\n), \ncast('model.stripe.stripe__invoice_line_items' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe.stripe__monthly_overview' as \n    varchar\n), \ncast('model.stripe.stripe__daily_overview' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe.stripe__weekly_overview' as \n    varchar\n), \ncast('model.stripe.stripe__daily_overview' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe.stripe__quarterly_overview' as \n    varchar\n), \ncast('model.stripe.stripe__daily_overview' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe.stripe__daily_overview' as \n    varchar\n), \ncast('model.stripe.stripe__balance_transactions' as \n    varchar\n), \nFalse), \n\n(cast('model.stripe.stripe__daily_overview' as \n    varchar\n), \ncast('model.stripe.int_stripe__incomplete_charges' as \n    varchar\n), \nTrue), \n\n(cast('model.stripe.int_stripe__incomplete_charges' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__charge' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_pipeline_stage' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_pipeline_stage' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_pipeline' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal_pipeline' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__deal' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_list' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact_list' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__contact' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_bounce' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_bounce' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_click' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_click' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_deferred' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_deferred' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_delivered' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_delivered' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_dropped' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_dropped' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_open' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_open' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_sent' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_sent' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_status_change' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event_status_change' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_event' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_campaign' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__email_campaign' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_call' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_call' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_email' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_email' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_meeting' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_meeting' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_note' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_note' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_task' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement_task' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__engagement' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__company' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43' as \n    varchar\n), \ncast('model.hubspot_source.stg_hubspot__company' as \n    varchar\n), \nTrue), \n\n(cast('test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation.74490569e1' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post' as \n    varchar\n), \nTrue), \n\n(cast('test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation.edd32b54a1' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__organization' as \n    varchar\n), \nTrue), \n\n(cast('test.linkedin_pages_source.not_null_stg_linkedin_pages__share_statistic_organization_entity_urn.150c878c76' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__share_statistic' as \n    varchar\n), \nTrue), \n\n(cast('test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation.452f64d50a' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__share_statistic' as \n    varchar\n), \nTrue), \n\n(cast('test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation.8192e4952b' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history' as \n    varchar\n), \nTrue), \n\n(cast('test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation.f629d7cf4d' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media' as \n    varchar\n), \nTrue), \n\n(cast('test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation.10bd19bf37' as \n    varchar\n), \ncast('model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__deals_deal_id.bdbfe47fcd' as \n    varchar\n), \ncast('model.hubspot.hubspot__deals' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__deals_deal_id.d728fe5f71' as \n    varchar\n), \ncast('model.hubspot.hubspot__deals' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__deal_stages_deal_stage_id.162d2d204b' as \n    varchar\n), \ncast('model.hubspot.hubspot__deal_stages' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__deal_stages_deal_stage_id.7fd3732373' as \n    varchar\n), \ncast('model.hubspot.hubspot__deal_stages' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__companies_company_id.a58ceac3f2' as \n    varchar\n), \ncast('model.hubspot.hubspot__companies' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__companies_company_id.687ec98e97' as \n    varchar\n), \ncast('model.hubspot.hubspot__companies' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__engagements_engagement_id.59b32bc0d7' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagements' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__engagements_engagement_id.01d5c3ee5d' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagements' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__company_history_id.f1af964b1f' as \n    varchar\n), \ncast('model.hubspot.hubspot__company_history' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__company_history_id.33035793ff' as \n    varchar\n), \ncast('model.hubspot.hubspot__company_history' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to.654ef778b1' as \n    varchar\n), \ncast('model.hubspot.hubspot__company_history' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__deal_history_id.1cb93fca79' as \n    varchar\n), \ncast('model.hubspot.hubspot__deal_history' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__deal_history_id.a1c6cd6a75' as \n    varchar\n), \ncast('model.hubspot.hubspot__deal_history' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to.f55c724804' as \n    varchar\n), \ncast('model.hubspot.hubspot__deal_history' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__engagement_calls_engagement_id.00f8d8357f' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagement_calls' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__engagement_calls_engagement_id.972572ce6c' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagement_calls' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__engagement_emails_engagement_id.13a39d1e09' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagement_emails' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__engagement_emails_engagement_id.b18e2acbde' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagement_emails' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__engagement_meetings_engagement_id.83a791c3df' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagement_meetings' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__engagement_meetings_engagement_id.3098aabcd1' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagement_meetings' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__engagement_notes_engagement_id.76434ac965' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagement_notes' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__engagement_notes_engagement_id.c9864b5001' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagement_notes' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__engagement_tasks_engagement_id.67738794ae' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagement_tasks' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__engagement_tasks_engagement_id.754d36b939' as \n    varchar\n), \ncast('model.hubspot.hubspot__engagement_tasks' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__email_sends_event_id.b01306228f' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_sends' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__email_sends_event_id.9fc8a8bef3' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_sends' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__email_campaigns_email_campaign_id.2470fabe62' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_campaigns' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__email_campaigns_email_campaign_id.6b2d6f43c0' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_campaigns' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__contacts_contact_id.8f627121df' as \n    varchar\n), \ncast('model.hubspot.hubspot__contacts' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__contacts_contact_id.e28e88dce3' as \n    varchar\n), \ncast('model.hubspot.hubspot__contacts' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__contact_lists_contact_list_id.ea9ef03bac' as \n    varchar\n), \ncast('model.hubspot.hubspot__contact_lists' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__contact_lists_contact_list_id.3bde1bb891' as \n    varchar\n), \ncast('model.hubspot.hubspot__contact_lists' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__email_event_bounce_event_id.7a1c6704e1' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_bounce' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__email_event_bounce_event_id.39d8daa6f5' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_bounce' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__email_event_clicks_event_id.60d3912846' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_clicks' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__email_event_clicks_event_id.f603501ca0' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_clicks' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__email_event_deferred_event_id.bb75dcb83a' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_deferred' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__email_event_deferred_event_id.2c6decaa91' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_deferred' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__email_event_delivered_event_id.242e838cce' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_delivered' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__email_event_delivered_event_id.0609870be3' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_delivered' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__email_event_dropped_event_id.093040860b' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_dropped' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__email_event_dropped_event_id.5cfe4eeb95' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_dropped' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__email_event_forward_event_id.064956aaa7' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot.not_null_hubspot__email_event_forward_event_id.417a73da08' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot.unique_hubspot__email_event_opens_event_id.d7963f4eb0' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_opens' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__email_event_opens_event_id.a9fe279ee1' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_opens' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__email_event_print_event_id.548f6cece7' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot.not_null_hubspot__email_event_print_event_id.9dac8a147e' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot.unique_hubspot__email_event_sent_event_id.68076270f8' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_sent' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__email_event_sent_event_id.5507dcc5b9' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_sent' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__email_event_spam_report_event_id.20aab81ec6' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot.not_null_hubspot__email_event_spam_report_event_id.5ddca8771a' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.hubspot.unique_hubspot__email_event_status_change_event_id.2e5b2b72e2' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_status_change' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__email_event_status_change_event_id.a1737e44b3' as \n    varchar\n), \ncast('model.hubspot.hubspot__email_event_status_change' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_hubspot__contact_history_id.aef69ae1ec' as \n    varchar\n), \ncast('model.hubspot.hubspot__contact_history' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_hubspot__contact_history_id.eaae22e088' as \n    varchar\n), \ncast('model.hubspot.hubspot__contact_history' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to.42ccfb8329' as \n    varchar\n), \ncast('model.hubspot.hubspot__contact_history' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_int_hubspot__email_aggregate_status_change_email_send_id.7c03e87c05' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__email_aggregate_status_change' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_int_hubspot__email_aggregate_status_change_email_send_id.16bf74a3bc' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__email_aggregate_status_change' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_int_hubspot__email_metrics__by_contact_list_contact_list_id.095d72d5b8' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__email_metrics__by_contact_list' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id.1d3cf4caf2' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__email_metrics__by_contact_list' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_int_hubspot__email_event_aggregates_email_send_id.4deec238f9' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__email_event_aggregates' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_int_hubspot__email_event_aggregates_email_send_id.ac29e6997a' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__email_event_aggregates' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.unique_int_hubspot__engagement_metrics__by_contact_contact_id.1c156b64ed' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__engagement_metrics__by_contact' as \n    varchar\n), \nTrue), \n\n(cast('test.hubspot.not_null_int_hubspot__engagement_metrics__by_contact_contact_id.4a800df06b' as \n    varchar\n), \ncast('model.hubspot.int_hubspot__engagement_metrics__by_contact' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.unique_stg_stripe__balance_transaction_balance_transaction_id.2f29c783d0' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__balance_transaction' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__balance_transaction' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.unique_stg_stripe__card_card_id.000d85b677' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__card' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__card' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.unique_stg_stripe__charge_charge_id.04b21ec6e0' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__charge' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__charge' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.unique_stg_stripe__customer_customer_id.a06a928db2' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__customer' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__customer' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.unique_stg_stripe__payment_intent_payment_intent_id.02430feefd' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_intent' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_intent' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.unique_stg_stripe__payment_method_payment_method_id.b12d5fcf1b' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_method' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payment_method' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.unique_stg_stripe__payout_payout_id.9d9065d2c5' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payout' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__payout' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.unique_stg_stripe__refund_refund_id.0b7c337204' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__refund' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__refund' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.unique_stg_stripe__invoice_line_item_unique_id.e8805346de' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__invoice_line_item' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.unique_stg_stripe__invoice_invoice_id.63b5714c58' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__invoice' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__invoice' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.not_null_stg_stripe__plan_plan_id.f59445523e' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__plan' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.unique_stg_stripe__plan_plan_id.b21f08031c' as \n    varchar\n), \ncast('model.stripe_source.stg_stripe__plan' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe_source.unique_stg_stripe__credit_note_credit_note_id.135c7cd4a0' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.stripe_source.unique_stg_stripe__credit_note_line_item_credit_note_line_item_id.3972a0829e' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7' as \n    varchar\n), \ncast(NULL as \n    varchar\n), \nFALSE), \n\n(cast('test.dbt_project_evaluator.dbt_utils_accepted_range_fct_documentation_coverage_documentation_coverage_pct___var_documentation_coverage_target_.31ca75dbaa' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_documentation_coverage' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_undocumented_models' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_direct_join_to_source' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_model_fanout' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_multiple_sources_joined' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_root_models' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_source_fanout' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_staging_dependent_on_staging' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_unused_sources' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_exposure_parents_materializations' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.dbt_utils_accepted_range_fct_test_coverage_test_coverage_pct___var_test_coverage_target_.09c9579c9e' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_test_coverage' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_missing_primary_key_tests' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.dbt_utils_accepted_range_fct_chained_views_dependencies_distance__False___var_chained_views_threshold_.f54ef16663' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_chained_views_dependencies' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_model_directories' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_model_naming_conventions' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_source_directories' as \n    varchar\n), \nTrue), \n\n(cast('test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433' as \n    varchar\n), \ncast('model.dbt_project_evaluator.fct_test_directories' as \n    varchar\n), \nTrue), \n\n(cast('test.linkedin_pages.dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation.d7c3d11ad1' as \n    varchar\n), \ncast('model.linkedin_pages.linkedin_pages__posts' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe.unique_stripe__balance_transactions_balance_transaction_id.313ec591b5' as \n    varchar\n), \ncast('model.stripe.stripe__balance_transactions' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe.unique_stripe__invoice_line_items_invoice_line_item_id.6d4544857c' as \n    varchar\n), \ncast('model.stripe.stripe__invoice_line_items' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe.unique_stripe__subscription_line_items_invoice_line_item_id.a4a7f94547' as \n    varchar\n), \ncast('model.stripe.stripe__subscription_line_items' as \n    varchar\n), \nTrue), \n\n(cast('test.stripe.unique_stripe__subscription_details_subscription_id.8c3bcf1f61' as \n    varchar\n), \ncast('model.stripe.stripe__subscription_details' as \n    varchar\n), \nTrue) \n                ) as t (resource_id, \ndirect_parent_id, \nis_primary_relationship)\n\n        )\n\n        select * from cte\n\n\n\n),\n\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as \n    varchar\n), '') || '-' || coalesce(cast(direct_parent_id as \n    varchar\n), '') as \n    varchar\n)) as unique_id, \n        *\n    from relationships\n)\n\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.stg_node_relationships"}, "model.dbt_project_evaluator.stg_sources": {"raw_sql": "{{ \n    dbt_project_evaluator.get_sources()\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_sources"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_sources"], "unique_id": "model.dbt_project_evaluator.stg_sources", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "staging/graph/stg_sources.sql", "original_file_path": "models/staging/graph/stg_sources.sql", "name": "stg_sources", "alias": "stg_sources", "checksum": {"name": "sha256", "checksum": "1f8106b11cc6afb1433c07a94a41700f8212847b95a46722e449b2ff308124d9"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_sources.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541349.375682, "compiled_sql": "with cte as (\n\n            select * from ( \n                    values ('source.hubspot_source.hubspot.calendar_event', \n'calendar_event', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'calendar_event', \n'{}'), \n\n('source.hubspot_source.hubspot.company', \n'company', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'company', \n'{}'), \n\n('source.hubspot_source.hubspot.company_property_history', \n'company_property_history', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'company_property_history', \n'{}'), \n\n('source.hubspot_source.hubspot.contact_merge_audit', \n'contact_merge_audit', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'contact_merge_audit', \n'{}'), \n\n('source.hubspot_source.hubspot.contact', \n'contact', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'contact', \n'{\"is_enabled\": \"True and True\"}'), \n\n('source.hubspot_source.hubspot.contact_form_submission', \n'contact_form_submission', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'contact_form_submission', \n'{}'), \n\n('source.hubspot_source.hubspot.contact_list', \n'contact_list', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'contact_list', \n'{}'), \n\n('source.hubspot_source.hubspot.contact_list_member', \n'contact_list_member', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'contact_list_member', \n'{}'), \n\n('source.hubspot_source.hubspot.contact_property_history', \n'contact_property_history', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'contact_property_history', \n'{\"is_enabled\": \"True and True\"}'), \n\n('source.hubspot_source.hubspot.deal', \n'deal', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'deal', \n'{}'), \n\n('source.hubspot_source.hubspot.deal_stage', \n'deal_stage', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'deal_stage', \n'{}'), \n\n('source.hubspot_source.hubspot.deal_company', \n'deal_company', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'deal_company', \n'{}'), \n\n('source.hubspot_source.hubspot.deal_contact', \n'deal_contact', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'deal_contact', \n'{}'), \n\n('source.hubspot_source.hubspot.deal_pipeline', \n'deal_pipeline', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'deal_pipeline', \n'{}'), \n\n('source.hubspot_source.hubspot.deal_pipeline_stage', \n'deal_pipeline_stage', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'deal_pipeline_stage', \n'{}'), \n\n('source.hubspot_source.hubspot.deal_property_history', \n'deal_property_history', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'deal_property_history', \n'{}'), \n\n('source.hubspot_source.hubspot.email_campaign', \n'email_campaign', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_campaign', \n'{}'), \n\n('source.hubspot_source.hubspot.email_event', \n'email_event', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_event', \n'{\"is_enabled\": \"True and True\"}'), \n\n('source.hubspot_source.hubspot.email_event_bounce', \n'email_event_bounce', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_event_bounce', \n'{}'), \n\n('source.hubspot_source.hubspot.email_event_click', \n'email_event_click', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_event_click', \n'{}'), \n\n('source.hubspot_source.hubspot.email_event_deferred', \n'email_event_deferred', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_event_deferred', \n'{}'), \n\n('source.hubspot_source.hubspot.email_event_delivered', \n'email_event_delivered', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_event_delivered', \n'{}'), \n\n('source.hubspot_source.hubspot.email_event_dropped', \n'email_event_dropped', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_event_dropped', \n'{}'), \n\n('source.hubspot_source.hubspot.email_event_forward', \n'email_event_forward', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_event_forward', \n'{}'), \n\n('source.hubspot_source.hubspot.email_event_open', \n'email_event_open', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_event_open', \n'{}'), \n\n('source.hubspot_source.hubspot.email_event_print', \n'email_event_print', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_event_print', \n'{}'), \n\n('source.hubspot_source.hubspot.email_event_sent', \n'email_event_sent', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_event_sent', \n'{}'), \n\n('source.hubspot_source.hubspot.email_event_spam_report', \n'email_event_spam_report', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_event_spam_report', \n'{}'), \n\n('source.hubspot_source.hubspot.email_event_status_change', \n'email_event_status_change', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_event_status_change', \n'{}'), \n\n('source.hubspot_source.hubspot.email_subscription', \n'email_subscription', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_subscription', \n'{}'), \n\n('source.hubspot_source.hubspot.email_subscription_change', \n'email_subscription_change', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'email_subscription_change', \n'{}'), \n\n('source.hubspot_source.hubspot.engagement', \n'engagement', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'engagement', \n'{}'), \n\n('source.hubspot_source.hubspot.engagement_call', \n'engagement_call', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'engagement_call', \n'{}'), \n\n('source.hubspot_source.hubspot.engagement_company', \n'engagement_company', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'engagement_company', \n'{}'), \n\n('source.hubspot_source.hubspot.engagement_contact', \n'engagement_contact', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'engagement_contact', \n'{}'), \n\n('source.hubspot_source.hubspot.engagement_deal', \n'engagement_deal', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'engagement_deal', \n'{}'), \n\n('source.hubspot_source.hubspot.engagement_email', \n'engagement_email', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'engagement_email', \n'{}'), \n\n('source.hubspot_source.hubspot.engagement_email_cc', \n'engagement_email_cc', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'engagement_email_cc', \n'{}'), \n\n('source.hubspot_source.hubspot.engagement_email_to', \n'engagement_email_to', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'engagement_email_to', \n'{}'), \n\n('source.hubspot_source.hubspot.engagement_meeting', \n'engagement_meeting', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'engagement_meeting', \n'{}'), \n\n('source.hubspot_source.hubspot.engagement_note', \n'engagement_note', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'engagement_note', \n'{}'), \n\n('source.hubspot_source.hubspot.engagement_task', \n'engagement_task', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'engagement_task', \n'{}'), \n\n('source.hubspot_source.hubspot.form', \n'form', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'form', \n'{}'), \n\n('source.hubspot_source.hubspot.owner', \n'owner', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'owner', \n'{}'), \n\n('source.hubspot_source.hubspot.ticket_company', \n'ticket_company', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'ticket_company', \n'{}'), \n\n('source.hubspot_source.hubspot.ticket_contact', \n'ticket_contact', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'ticket_contact', \n'{}'), \n\n('source.hubspot_source.hubspot.ticket_deal', \n'ticket_deal', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'ticket_deal', \n'{}'), \n\n('source.hubspot_source.hubspot.ticket_engagement', \n'ticket_engagement', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'ticket_engagement', \n'{}'), \n\n('source.hubspot_source.hubspot.ticket_pipeline_stage', \n'ticket_pipeline_stage', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'ticket_pipeline_stage', \n'{}'), \n\n('source.hubspot_source.hubspot.ticket_pipeline', \n'ticket_pipeline', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'ticket_pipeline', \n'{}'), \n\n('source.hubspot_source.hubspot.ticket_property_history', \n'ticket_property_history', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'ticket_property_history', \n'{}'), \n\n('source.hubspot_source.hubspot.ticket', \n'ticket', \n'models/src_hubspot.yml', \n'', \n'source', \n'hubspot', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'hubspot', \n'hubspot_source', \n'Fivetran', \n'ticket', \n'{}'), \n\n('source.linkedin_pages_source.linkedin_pages.share_statistic', \n'share_statistic', \n'models/src_linkedin_pages.yml', \n'', \n'source', \n'linkedin_pages', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'linkedin_company_pages', \n'linkedin_pages_source', \n'Fivetran', \n'share_statistic', \n'{}'), \n\n('source.linkedin_pages_source.linkedin_pages.ugc_post_share_statistic', \n'ugc_post_share_statistic', \n'models/src_linkedin_pages.yml', \n'', \n'source', \n'linkedin_pages', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'linkedin_company_pages', \n'linkedin_pages_source', \n'Fivetran', \n'ugc_post_share_statistic', \n'{}'), \n\n('source.linkedin_pages_source.linkedin_pages.ugc_post_history', \n'ugc_post_history', \n'models/src_linkedin_pages.yml', \n'', \n'source', \n'linkedin_pages', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'linkedin_company_pages', \n'linkedin_pages_source', \n'Fivetran', \n'ugc_post_history', \n'{}'), \n\n('source.linkedin_pages_source.linkedin_pages.ugc_post_share_content_media', \n'ugc_post_share_content_media', \n'models/src_linkedin_pages.yml', \n'', \n'source', \n'linkedin_pages', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'linkedin_company_pages', \n'linkedin_pages_source', \n'Fivetran', \n'ugc_post_share_content_media', \n'{}'), \n\n('source.linkedin_pages_source.linkedin_pages.organization', \n'organization', \n'models/src_linkedin_pages.yml', \n'', \n'source', \n'linkedin_pages', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'linkedin_company_pages', \n'linkedin_pages_source', \n'Fivetran', \n'organization', \n'{}'), \n\n('source.linkedin_pages_source.linkedin_pages.organization_ugc_post', \n'organization_ugc_post', \n'models/src_linkedin_pages.yml', \n'', \n'source', \n'linkedin_pages', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'linkedin_company_pages', \n'linkedin_pages_source', \n'Fivetran', \n'organization_ugc_post', \n'{}'), \n\n('source.stripe_source.stripe.balance_transaction', \n'balance_transaction', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'balance_transaction', \n'{}'), \n\n('source.stripe_source.stripe.card', \n'card', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'card', \n'{}'), \n\n('source.stripe_source.stripe.charge', \n'charge', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'charge', \n'{}'), \n\n('source.stripe_source.stripe.customer', \n'customer', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'customer', \n'{}'), \n\n('source.stripe_source.stripe.fee', \n'fee', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'fee', \n'{}'), \n\n('source.stripe_source.stripe.payment_intent', \n'payment_intent', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'payment_intent', \n'{}'), \n\n('source.stripe_source.stripe.payment_method_card', \n'payment_method_card', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'payment_method_card', \n'{}'), \n\n('source.stripe_source.stripe.payment_method', \n'payment_method', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'payment_method', \n'{}'), \n\n('source.stripe_source.stripe.payout', \n'payout', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'payout', \n'{}'), \n\n('source.stripe_source.stripe.refund', \n'refund', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'refund', \n'{}'), \n\n('source.stripe_source.stripe.invoice_line_item', \n'invoice_line_item', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'invoice_line_item', \n'{}'), \n\n('source.stripe_source.stripe.invoice', \n'invoice', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'invoice', \n'{}'), \n\n('source.stripe_source.stripe.subscription_history', \n'subscription_history', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'subscription_history', \n'{}'), \n\n('source.stripe_source.stripe.subscription', \n'subscription', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'subscription', \n'{}'), \n\n('source.stripe_source.stripe.plan', \n'plan', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'plan', \n'{}'), \n\n('source.stripe_source.stripe.credit_note', \n'credit_note', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'credit_note', \n'{}'), \n\n('source.stripe_source.stripe.credit_note_line_item', \n'credit_note_line_item', \n'models/src_stripe.yml', \n'', \n'source', \n'stripe', \ncast(False as boolean), \ncast(True as boolean), \ncast(True as boolean), \n'_fivetran_synced', \n'raw', \n'stripe', \n'stripe_source', \n'fivetran', \n'credit_note_line_item', \n'{}') \n                ) as t (unique_id, \nname, \nfile_path, \nalias, \nresource_type, \nsource_name, \nis_source_described, \nis_described, \nis_enabled, \nloaded_at_field, \ndatabase, \nschema, \npackage_name, \nloader, \nidentifier, \nmeta)\n\n        )\n\n        select * from cte\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.stg_sources"}, "model.dbt_project_evaluator.stg_exposures": {"raw_sql": "{{ \n    dbt_project_evaluator.get_exposures() \n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_exposures"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_exposures"], "unique_id": "model.dbt_project_evaluator.stg_exposures", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "staging/graph/stg_exposures.sql", "original_file_path": "models/staging/graph/stg_exposures.sql", "name": "stg_exposures", "alias": "stg_exposures", "checksum": {"name": "sha256", "checksum": "e2d9ac06ab6c4ad9a0446a79c30a7dd4a357d2bf38ef6486f8f827f917bf3f6e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_exposures.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541349.384475, "compiled_sql": "with cte as (\n\n            select * from ( \n                    values (cast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as boolean ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar )) \n                ) as t (unique_id, \nname, \nresource_type, \nfile_path, \nis_described, \nexposure_type, \nmaturity, \npackage_name, \nurl, \nowner_name, \nowner_email, \nmeta)\n\n        )\n\n        select * from cte\n\nwhere unique_id is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.stg_exposures"}, "model.dbt_project_evaluator.stg_metric_relationships": {"raw_sql": "with relationships as (\n\n    {{\n        dbt_project_evaluator.get_relationships(\"metrics\")\n    }}\n\n),\n\n\nfinal as (\n    select \n        {{ dbt_utils.surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from relationships\n)\n\nselect distinct * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_relationships", "macro.dbt_utils.surrogate_key"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_metric_relationships"], "unique_id": "model.dbt_project_evaluator.stg_metric_relationships", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "staging/graph/stg_metric_relationships.sql", "original_file_path": "models/staging/graph/stg_metric_relationships.sql", "name": "stg_metric_relationships", "alias": "stg_metric_relationships", "checksum": {"name": "sha256", "checksum": "dc325dc49c61b9abcef280af94c5e14654ad298adcdd4d4df68ecefd7a8c5dd2"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_metric_relationships.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541349.392375, "compiled_sql": "with relationships as (\n\n    with cte as (\n\n            select * from ( \n                    values (cast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar )) \n                ) as t (resource_id, \ndirect_parent_id, \nis_primary_relationship)\n\n        )\n\n        select * from cte\n\nwhere resource_id is not null\n\n),\n\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as \n    varchar\n), '') || '-' || coalesce(cast(direct_parent_id as \n    varchar\n), '') as \n    varchar\n)) as unique_id, \n        *\n    from relationships\n)\n\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.stg_metric_relationships"}, "model.dbt_project_evaluator.stg_metrics": {"raw_sql": "{{ \n    dbt_project_evaluator.get_metrics()\n}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_metrics"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_metrics"], "unique_id": "model.dbt_project_evaluator.stg_metrics", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "staging/graph/stg_metrics.sql", "original_file_path": "models/staging/graph/stg_metrics.sql", "name": "stg_metrics", "alias": "stg_metrics", "checksum": {"name": "sha256", "checksum": "ec300129a353a21d6189896cbf8dfbc6bf151f14bb765ffc7ccf5b7821cc5088"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/graph/stg_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541349.396671, "compiled_sql": "with cte as (\n\n            select * from ( \n                    values (cast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as boolean ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar ), \ncast(null as varchar )) \n                ) as t (unique_id, \nname, \nresource_type, \nfile_path, \nis_described, \nmetric_type, \nmodel, \nlabel, \nsql, \ntimestamp, \npackage_name, \ndimensions, \nfilters, \nmeta)\n\n        )\n\n        select * from cte\n\nwhere unique_id is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.stg_metrics"}, "model.dbt_project_evaluator.stg_naming_convention_folders": {"raw_sql": "{% set var_model_types = var('model_types') %}\n{% set suffix_model_type = '_folder_name' %}\n\n{% set vars_folders = [] %}\n\n{% for model_type in var_model_types %}\n  {% do vars_folders.append(model_type ~ suffix_model_type) %}\n{% endfor %}\n\nwith vars_folders_table as (\n    {{ dbt_project_evaluator.loop_vars(vars_folders) }}\n)\n\nselect\n    var_name as folder_name, \n    {{ dbt_utils.split_part('var_name', \"'_'\", 1) }} as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.loop_vars", "macro.dbt_utils.split_part"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "staging", "variables", "stg_naming_convention_folders"], "unique_id": "model.dbt_project_evaluator.stg_naming_convention_folders", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "staging/variables/stg_naming_convention_folders.sql", "original_file_path": "models/staging/variables/stg_naming_convention_folders.sql", "name": "stg_naming_convention_folders", "alias": "stg_naming_convention_folders", "checksum": {"name": "sha256", "checksum": "ca5f9eb5682017fa59bd27e4901bb939f2304847b5040f2063d12024e7811501"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/variables/stg_naming_convention_folders.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type == 'redshift' else 'view' }}", "schema": "dbt_project_evaluator"}, "created_at": 1661541349.405629, "compiled_sql": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_folders_table as (\n    \n        select 'staging_folder_name' as var_name, 'staging' as var_value\n        union all\n        select 'intermediate_folder_name' as var_name, 'intermediate' as var_value\n        union all\n        select 'marts_folder_name' as var_name, 'marts' as var_value\n        \n)\n\nselect\n    var_name as folder_name, \n    \n\n    split_part(\n        var_name,\n        '_',\n        1\n        )\n\n as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.stg_naming_convention_folders"}, "model.dbt_project_evaluator.stg_naming_convention_prefixes": {"raw_sql": "{% set var_model_types = var('model_types') %}\n{% set suffix_model_type = '_prefixes' %}\n\n{% set vars_prefix = [] %}\n\n{% for model_type in var_model_types %}\n  {% do vars_prefix.append(model_type ~ suffix_model_type) %}\n{% endfor %}\n\nwith vars_prefix_table as (\n    {{ dbt_project_evaluator.loop_vars(vars_prefix) }}\n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    {{ dbt_utils.split_part('var_name', \"'_'\", 1) }} as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        {{ dbt_utils.surrogate_key(['model_type', 'prefix_value']) }} as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.loop_vars", "macro.dbt_utils.split_part", "macro.dbt_utils.surrogate_key"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "staging", "variables", "stg_naming_convention_prefixes"], "unique_id": "model.dbt_project_evaluator.stg_naming_convention_prefixes", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "staging/variables/stg_naming_convention_prefixes.sql", "original_file_path": "models/staging/variables/stg_naming_convention_prefixes.sql", "name": "stg_naming_convention_prefixes", "alias": "stg_naming_convention_prefixes", "checksum": {"name": "sha256", "checksum": "bda18f7146eeabf09c2a8e4450f39ff5089df5a54394771525ca79c01c0fc6fa"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/staging/variables/stg_naming_convention_prefixes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type == 'redshift' else 'view' }}", "schema": "dbt_project_evaluator"}, "created_at": 1661541349.4138181, "compiled_sql": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_prefix_table as (\n    \n            select 'staging_prefixes' as var_name, 'stg_' as var_value\n            union all\n            select 'intermediate_prefixes' as var_name, 'int_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'fct_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'dim_' as var_value\n            union all\n            select 'other_prefixes' as var_name, 'rpt_' as var_value\n            \n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    \n\n    split_part(\n        var_name,\n        '_',\n        1\n        )\n\n as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        md5(cast(coalesce(cast(model_type as \n    varchar\n), '') || '-' || coalesce(cast(prefix_value as \n    varchar\n), '') as \n    varchar\n)) as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.stg_naming_convention_prefixes"}, "model.dbt_project_evaluator.fct_undocumented_models": {"raw_sql": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_models"], "unique_id": "model.dbt_project_evaluator.fct_undocumented_models", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_models.sql", "original_file_path": "models/marts/documentation/fct_undocumented_models.sql", "name": "fct_undocumented_models", "alias": "fct_undocumented_models", "checksum": {"name": "sha256", "checksum": "fa2065d4c9b5312e27f9a1fbec65d526298e6f27da452f336f97ef08c4acaea2"}, "tags": [], "refs": [["int_all_graph_resources"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This model contains all models that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_undocumented_models.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541350.158447, "compiled_sql": "with\n\nall_resources as (\n    select * from prod_analytics.dbt_project_evaluator.int_all_graph_resources\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_undocumented_models"}, "model.dbt_project_evaluator.fct_documentation_coverage": {"raw_sql": "with\n\nmodels as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        {% for model_type in var('model_types') %}\n            case when model_type = '{{ model_type }}' then 1.0 else NULL end as is_{{ model_type }}_model,\n            case when is_described and model_type = '{{ model_type }}' then 1.0 else 0 end as is_described_{{ model_type }}_model{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from models\n),\n\nfinal as (\n    select\n        current_timestamp as measured_at,\n        count(*) as total_models,\n        sum(is_described_model) as documented_models,\n        round(sum(is_described_model) * 100.0 / count(*), 2) as documentation_coverage_pct,\n        {% for model_type in var('model_types') %}\n            round(sum(is_described_{{ model_type }}_model) * 100 / count(is_{{ model_type }}_model), 2) as {{ model_type }}_documentation_coverage_pct{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_documentation_coverage"], "unique_id": "model.dbt_project_evaluator.fct_documentation_coverage", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/documentation/fct_documentation_coverage.sql", "original_file_path": "models/marts/documentation/fct_documentation_coverage.sql", "name": "fct_documentation_coverage", "alias": "fct_documentation_coverage", "checksum": {"name": "sha256", "checksum": "275c79dc2df4b5bfc02b95ac753ba0708fbf34bd9f4b8b00367ea7837f25681d"}, "tags": [], "refs": [["int_all_graph_resources"]], "sources": [], "metrics": [], "description": "This model calculates the percent of enabled models in the project that have a configured description.  We recommend you describe at least 75 percent of your models. \n", "columns": {"documentation_coverage_pct": {"name": "documentation_coverage_pct", "description": "the number of models in the project with a description divided by the total number of models in the project", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/fct_documentation_coverage.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541350.158134, "compiled_sql": "with\n\nmodels as (\n    select * from prod_analytics.dbt_project_evaluator.int_all_graph_resources\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when is_described and model_type = 'staging' then 1.0 else 0 end as is_described_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when is_described and model_type = 'intermediate' then 1.0 else 0 end as is_described_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when is_described and model_type = 'marts' then 1.0 else 0 end as is_described_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when is_described and model_type = 'other' then 1.0 else 0 end as is_described_other_model\n        \n\n    from models\n),\n\nfinal as (\n    select\n        current_timestamp as measured_at,\n        count(*) as total_models,\n        sum(is_described_model) as documented_models,\n        round(sum(is_described_model) * 100.0 / count(*), 2) as documentation_coverage_pct,\n        \n            round(sum(is_described_staging_model) * 100 / count(is_staging_model), 2) as staging_documentation_coverage_pct,\n        \n            round(sum(is_described_intermediate_model) * 100 / count(is_intermediate_model), 2) as intermediate_documentation_coverage_pct,\n        \n            round(sum(is_described_marts_model) * 100 / count(is_marts_model), 2) as marts_documentation_coverage_pct,\n        \n            round(sum(is_described_other_model) * 100 / count(is_other_model), 2) as other_documentation_coverage_pct\n        \n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_documentation_coverage"}, "model.dbt_project_evaluator.int_direct_relationships": {"raw_sql": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        source_name \n    from {{ ref('int_all_graph_resources') }}\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_node_relationships')}}\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_exposure_relationships')}}\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_metric_relationships')}}\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.*,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        {{ dbt_utils.surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_node_relationships", "model.dbt_project_evaluator.stg_exposure_relationships", "model.dbt_project_evaluator.stg_metric_relationships"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "core", "int_direct_relationships"], "unique_id": "model.dbt_project_evaluator.int_direct_relationships", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/core/int_direct_relationships.sql", "original_file_path": "models/marts/core/int_direct_relationships.sql", "name": "int_direct_relationships", "alias": "int_direct_relationships", "checksum": {"name": "sha256", "checksum": "02447c4541192229e1b1f8d7e17d66f9aa1179ff6017cf9df97715760e14d5e0"}, "tags": [], "refs": [["int_all_graph_resources"], ["stg_node_relationships"], ["stg_exposure_relationships"], ["stg_metric_relationships"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/core/int_direct_relationships.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['bigquery', 'redshift', 'databricks'] else 'view' }}", "schema": "dbt_project_evaluator"}, "created_at": 1661541349.4275799, "compiled_sql": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        source_name \n    from prod_analytics.dbt_project_evaluator.int_all_graph_resources\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from prod_analytics.dbt_project_evaluator.stg_node_relationships\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from prod_analytics.dbt_project_evaluator.stg_exposure_relationships\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from prod_analytics.dbt_project_evaluator.stg_metric_relationships\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.*,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        md5(cast(coalesce(cast(resource_id as \n    varchar\n), '') || '-' || coalesce(cast(direct_parent_id as \n    varchar\n), '') as \n    varchar\n)) as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.int_direct_relationships"}, "model.dbt_project_evaluator.int_all_dag_relationships": {"raw_sql": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n{{ dbt_project_evaluator.recursive_dag() }}\n\nselect * from all_relationships\norder by parent, distance", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.recursive_dag"], "nodes": ["model.dbt_project_evaluator.int_direct_relationships"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "core", "int_all_dag_relationships"], "unique_id": "model.dbt_project_evaluator.int_all_dag_relationships", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/core/int_all_dag_relationships.sql", "original_file_path": "models/marts/core/int_all_dag_relationships.sql", "name": "int_all_dag_relationships", "alias": "int_all_dag_relationships", "checksum": {"name": "sha256", "checksum": "b4c408aa270f14f715b34649af63bf54609d14d2995c38005e858574b531b731"}, "tags": [], "refs": [["int_direct_relationships"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/core/int_all_dag_relationships.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['bigquery', 'redshift', 'databricks'] else 'view' }}", "schema": "dbt_project_evaluator"}, "created_at": 1661541349.4316502, "compiled_sql": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n\n\nwith recursive direct_relationships as (\n    select  \n        *\n    from prod_analytics.dbt_project_evaluator.int_direct_relationships\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor \n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        0 as distance,\n        array_construct( resource_name ) as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null \n    \n    union all\n\n    -- recursive clause\n    select  \n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        all_relationships.distance+1 as distance, \n        array_append(all_relationships.path, direct_relationships.resource_name) as path,\n        case \n            when \n                all_relationships.child_materialized in ('view', 'ephemeral') \n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true) \n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n)\n\n\n\nselect * from all_relationships\norder by parent, distance", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.int_all_dag_relationships"}, "model.dbt_project_evaluator.int_all_graph_resources": {"raw_sql": "-- one row for each resource in the graph\nwith unioned as (\n\n    {{ dbt_utils.union_relations([\n        ref('stg_nodes'),\n        ref('stg_exposures'),\n        ref('stg_metrics'),\n        ref('stg_sources')\n    ])}}\n\n),\n\nnaming_convention_prefixes as (\n    select * from {{ ref('stg_naming_convention_prefixes') }}\n), \n\nnaming_convention_folders as (\n    select * from {{ ref('stg_naming_convention_folders') }}\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  {{ dbt_utils.concat(['source_name',\"'.'\",'name']) }}\n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else {{ dbt_utils.split_part('name', \"'_'\", 1) }}||'_' \n        end as prefix,\n        {{ dbt_utils.replace(\"file_path\", \"regexp_replace(file_path,'.*/','')\", \"''\") }} as directory_path,\n        regexp_replace(file_path,'.*/','') as file_name \n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else naming_convention_prefixes.model_type \n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when {{ dbt_utils.position('naming_convention_folders.folder_name_value','unioned_with_calc.directory_path') }} = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        {{ dbt_utils.position('naming_convention_folders.folder_name_value','unioned_with_calc.directory_path') }} as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        unioned_with_calc.resource_name like 'unique%' and unioned_with_calc.resource_type = 'test' as is_not_null_test,\n        unioned_with_calc.resource_name like 'not_null%' and unioned_with_calc.resource_type = 'test' as is_unique_test,\n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.model, \n        unioned_with_calc.label, \n        unioned_with_calc.sql, \n        unioned_with_calc.timestamp as timestamp,  \n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt_utils.concat", "macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.position"], "nodes": ["model.dbt_project_evaluator.stg_nodes", "model.dbt_project_evaluator.stg_exposures", "model.dbt_project_evaluator.stg_metrics", "model.dbt_project_evaluator.stg_sources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "model.dbt_project_evaluator.stg_naming_convention_folders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "core", "int_all_graph_resources"], "unique_id": "model.dbt_project_evaluator.int_all_graph_resources", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/core/int_all_graph_resources.sql", "original_file_path": "models/marts/core/int_all_graph_resources.sql", "name": "int_all_graph_resources", "alias": "int_all_graph_resources", "checksum": {"name": "sha256", "checksum": "132cf84048cc18cb2d6000b1040552341439371e76afe94b289926552112d1c3"}, "tags": [], "refs": [["stg_nodes"], ["stg_exposures"], ["stg_metrics"], ["stg_sources"], ["stg_naming_convention_prefixes"], ["stg_naming_convention_folders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/core/int_all_graph_resources.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541349.43876, "compiled_sql": "-- one row for each resource in the graph\nwith unioned as (\n\n    \n\n        (\n            select\n\n                cast('prod_analytics.dbt_project_evaluator.stg_nodes' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"UNIQUE_ID\" as character varying(16777216)) as \"UNIQUE_ID\" ,\n                    cast(\"NAME\" as character varying(16777216)) as \"NAME\" ,\n                    cast(\"RESOURCE_TYPE\" as character varying(16777216)) as \"RESOURCE_TYPE\" ,\n                    cast(\"FILE_PATH\" as character varying(16777216)) as \"FILE_PATH\" ,\n                    cast(\"IS_ENABLED\" as BOOLEAN) as \"IS_ENABLED\" ,\n                    cast(\"MATERIALIZED\" as character varying(9)) as \"MATERIALIZED\" ,\n                    cast(\"ON_SCHEMA_CHANGE\" as character varying(6)) as \"ON_SCHEMA_CHANGE\" ,\n                    cast(\"DATABASE\" as character varying(14)) as \"DATABASE\" ,\n                    cast(\"SCHEMA\" as character varying(22)) as \"SCHEMA\" ,\n                    cast(\"PACKAGE_NAME\" as character varying(16777216)) as \"PACKAGE_NAME\" ,\n                    cast(\"ALIAS\" as character varying(63)) as \"ALIAS\" ,\n                    cast(\"IS_DESCRIBED\" as BOOLEAN) as \"IS_DESCRIBED\" ,\n                    cast(\"COLUMN_NAME\" as character varying(26)) as \"COLUMN_NAME\" ,\n                    cast(\"META\" as character varying(16777216)) as \"META\" ,\n                    cast(null as character varying(16777216)) as \"EXPOSURE_TYPE\" ,\n                    cast(null as character varying(16777216)) as \"MATURITY\" ,\n                    cast(null as character varying(16777216)) as \"URL\" ,\n                    cast(null as character varying(16777216)) as \"OWNER_NAME\" ,\n                    cast(null as character varying(16777216)) as \"OWNER_EMAIL\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_TYPE\" ,\n                    cast(null as character varying(16777216)) as \"MODEL\" ,\n                    cast(null as character varying(16777216)) as \"LABEL\" ,\n                    cast(null as character varying(16777216)) as \"SQL\" ,\n                    cast(null as character varying(16777216)) as \"TIMESTAMP\" ,\n                    cast(null as character varying(16777216)) as \"DIMENSIONS\" ,\n                    cast(null as character varying(16777216)) as \"FILTERS\" ,\n                    cast(null as character varying(14)) as \"SOURCE_NAME\" ,\n                    cast(null as BOOLEAN) as \"IS_SOURCE_DESCRIBED\" ,\n                    cast(null as character varying(16)) as \"LOADED_AT_FIELD\" ,\n                    cast(null as character varying(8)) as \"LOADER\" ,\n                    cast(null as character varying(28)) as \"IDENTIFIER\" \n\n            from prod_analytics.dbt_project_evaluator.stg_nodes\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('prod_analytics.dbt_project_evaluator.stg_exposures' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"UNIQUE_ID\" as character varying(16777216)) as \"UNIQUE_ID\" ,\n                    cast(\"NAME\" as character varying(16777216)) as \"NAME\" ,\n                    cast(\"RESOURCE_TYPE\" as character varying(16777216)) as \"RESOURCE_TYPE\" ,\n                    cast(\"FILE_PATH\" as character varying(16777216)) as \"FILE_PATH\" ,\n                    cast(null as BOOLEAN) as \"IS_ENABLED\" ,\n                    cast(null as character varying(9)) as \"MATERIALIZED\" ,\n                    cast(null as character varying(6)) as \"ON_SCHEMA_CHANGE\" ,\n                    cast(null as character varying(14)) as \"DATABASE\" ,\n                    cast(null as character varying(22)) as \"SCHEMA\" ,\n                    cast(\"PACKAGE_NAME\" as character varying(16777216)) as \"PACKAGE_NAME\" ,\n                    cast(null as character varying(63)) as \"ALIAS\" ,\n                    cast(\"IS_DESCRIBED\" as BOOLEAN) as \"IS_DESCRIBED\" ,\n                    cast(null as character varying(26)) as \"COLUMN_NAME\" ,\n                    cast(\"META\" as character varying(16777216)) as \"META\" ,\n                    cast(\"EXPOSURE_TYPE\" as character varying(16777216)) as \"EXPOSURE_TYPE\" ,\n                    cast(\"MATURITY\" as character varying(16777216)) as \"MATURITY\" ,\n                    cast(\"URL\" as character varying(16777216)) as \"URL\" ,\n                    cast(\"OWNER_NAME\" as character varying(16777216)) as \"OWNER_NAME\" ,\n                    cast(\"OWNER_EMAIL\" as character varying(16777216)) as \"OWNER_EMAIL\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_TYPE\" ,\n                    cast(null as character varying(16777216)) as \"MODEL\" ,\n                    cast(null as character varying(16777216)) as \"LABEL\" ,\n                    cast(null as character varying(16777216)) as \"SQL\" ,\n                    cast(null as character varying(16777216)) as \"TIMESTAMP\" ,\n                    cast(null as character varying(16777216)) as \"DIMENSIONS\" ,\n                    cast(null as character varying(16777216)) as \"FILTERS\" ,\n                    cast(null as character varying(14)) as \"SOURCE_NAME\" ,\n                    cast(null as BOOLEAN) as \"IS_SOURCE_DESCRIBED\" ,\n                    cast(null as character varying(16)) as \"LOADED_AT_FIELD\" ,\n                    cast(null as character varying(8)) as \"LOADER\" ,\n                    cast(null as character varying(28)) as \"IDENTIFIER\" \n\n            from prod_analytics.dbt_project_evaluator.stg_exposures\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('prod_analytics.dbt_project_evaluator.stg_metrics' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"UNIQUE_ID\" as character varying(16777216)) as \"UNIQUE_ID\" ,\n                    cast(\"NAME\" as character varying(16777216)) as \"NAME\" ,\n                    cast(\"RESOURCE_TYPE\" as character varying(16777216)) as \"RESOURCE_TYPE\" ,\n                    cast(\"FILE_PATH\" as character varying(16777216)) as \"FILE_PATH\" ,\n                    cast(null as BOOLEAN) as \"IS_ENABLED\" ,\n                    cast(null as character varying(9)) as \"MATERIALIZED\" ,\n                    cast(null as character varying(6)) as \"ON_SCHEMA_CHANGE\" ,\n                    cast(null as character varying(14)) as \"DATABASE\" ,\n                    cast(null as character varying(22)) as \"SCHEMA\" ,\n                    cast(\"PACKAGE_NAME\" as character varying(16777216)) as \"PACKAGE_NAME\" ,\n                    cast(null as character varying(63)) as \"ALIAS\" ,\n                    cast(\"IS_DESCRIBED\" as BOOLEAN) as \"IS_DESCRIBED\" ,\n                    cast(null as character varying(26)) as \"COLUMN_NAME\" ,\n                    cast(\"META\" as character varying(16777216)) as \"META\" ,\n                    cast(null as character varying(16777216)) as \"EXPOSURE_TYPE\" ,\n                    cast(null as character varying(16777216)) as \"MATURITY\" ,\n                    cast(null as character varying(16777216)) as \"URL\" ,\n                    cast(null as character varying(16777216)) as \"OWNER_NAME\" ,\n                    cast(null as character varying(16777216)) as \"OWNER_EMAIL\" ,\n                    cast(\"METRIC_TYPE\" as character varying(16777216)) as \"METRIC_TYPE\" ,\n                    cast(\"MODEL\" as character varying(16777216)) as \"MODEL\" ,\n                    cast(\"LABEL\" as character varying(16777216)) as \"LABEL\" ,\n                    cast(\"SQL\" as character varying(16777216)) as \"SQL\" ,\n                    cast(\"TIMESTAMP\" as character varying(16777216)) as \"TIMESTAMP\" ,\n                    cast(\"DIMENSIONS\" as character varying(16777216)) as \"DIMENSIONS\" ,\n                    cast(\"FILTERS\" as character varying(16777216)) as \"FILTERS\" ,\n                    cast(null as character varying(14)) as \"SOURCE_NAME\" ,\n                    cast(null as BOOLEAN) as \"IS_SOURCE_DESCRIBED\" ,\n                    cast(null as character varying(16)) as \"LOADED_AT_FIELD\" ,\n                    cast(null as character varying(8)) as \"LOADER\" ,\n                    cast(null as character varying(28)) as \"IDENTIFIER\" \n\n            from prod_analytics.dbt_project_evaluator.stg_metrics\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('prod_analytics.dbt_project_evaluator.stg_sources' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"UNIQUE_ID\" as character varying(16777216)) as \"UNIQUE_ID\" ,\n                    cast(\"NAME\" as character varying(16777216)) as \"NAME\" ,\n                    cast(\"RESOURCE_TYPE\" as character varying(16777216)) as \"RESOURCE_TYPE\" ,\n                    cast(\"FILE_PATH\" as character varying(16777216)) as \"FILE_PATH\" ,\n                    cast(\"IS_ENABLED\" as BOOLEAN) as \"IS_ENABLED\" ,\n                    cast(null as character varying(9)) as \"MATERIALIZED\" ,\n                    cast(null as character varying(6)) as \"ON_SCHEMA_CHANGE\" ,\n                    cast(\"DATABASE\" as character varying(14)) as \"DATABASE\" ,\n                    cast(\"SCHEMA\" as character varying(22)) as \"SCHEMA\" ,\n                    cast(\"PACKAGE_NAME\" as character varying(16777216)) as \"PACKAGE_NAME\" ,\n                    cast(\"ALIAS\" as character varying(63)) as \"ALIAS\" ,\n                    cast(\"IS_DESCRIBED\" as BOOLEAN) as \"IS_DESCRIBED\" ,\n                    cast(null as character varying(26)) as \"COLUMN_NAME\" ,\n                    cast(\"META\" as character varying(16777216)) as \"META\" ,\n                    cast(null as character varying(16777216)) as \"EXPOSURE_TYPE\" ,\n                    cast(null as character varying(16777216)) as \"MATURITY\" ,\n                    cast(null as character varying(16777216)) as \"URL\" ,\n                    cast(null as character varying(16777216)) as \"OWNER_NAME\" ,\n                    cast(null as character varying(16777216)) as \"OWNER_EMAIL\" ,\n                    cast(null as character varying(16777216)) as \"METRIC_TYPE\" ,\n                    cast(null as character varying(16777216)) as \"MODEL\" ,\n                    cast(null as character varying(16777216)) as \"LABEL\" ,\n                    cast(null as character varying(16777216)) as \"SQL\" ,\n                    cast(null as character varying(16777216)) as \"TIMESTAMP\" ,\n                    cast(null as character varying(16777216)) as \"DIMENSIONS\" ,\n                    cast(null as character varying(16777216)) as \"FILTERS\" ,\n                    cast(\"SOURCE_NAME\" as character varying(14)) as \"SOURCE_NAME\" ,\n                    cast(\"IS_SOURCE_DESCRIBED\" as BOOLEAN) as \"IS_SOURCE_DESCRIBED\" ,\n                    cast(\"LOADED_AT_FIELD\" as character varying(16)) as \"LOADED_AT_FIELD\" ,\n                    cast(\"LOADER\" as character varying(8)) as \"LOADER\" ,\n                    cast(\"IDENTIFIER\" as character varying(28)) as \"IDENTIFIER\" \n\n            from prod_analytics.dbt_project_evaluator.stg_sources\n\n            \n        )\n\n        \n\n),\n\nnaming_convention_prefixes as (\n    select * from prod_analytics.dbt_project_evaluator.stg_naming_convention_prefixes\n), \n\nnaming_convention_folders as (\n    select * from prod_analytics.dbt_project_evaluator.stg_naming_convention_folders\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  source_name || '.' || name\n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else \n\n    split_part(\n        name,\n        '_',\n        1\n        )\n\n||'_' \n        end as prefix,\n        \n\n    replace(\n        file_path,\n        regexp_replace(file_path,'.*/',''),\n        ''\n    )\n    \n\n as directory_path,\n        regexp_replace(file_path,'.*/','') as file_name \n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else naming_convention_prefixes.model_type \n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when \n\n    position(\n        naming_convention_folders.folder_name_value in unioned_with_calc.directory_path\n    ) = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        \n\n    position(\n        naming_convention_folders.folder_name_value in unioned_with_calc.directory_path\n    ) as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        unioned_with_calc.resource_name like 'unique%' and unioned_with_calc.resource_type = 'test' as is_not_null_test,\n        unioned_with_calc.resource_name like 'not_null%' and unioned_with_calc.resource_type = 'test' as is_unique_test,\n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.model, \n        unioned_with_calc.label, \n        unioned_with_calc.sql, \n        unioned_with_calc.timestamp as timestamp,  \n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.int_all_graph_resources"}, "model.dbt_project_evaluator.fct_multiple_sources_joined": {"raw_sql": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'source'\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        {{ dbt_utils.listagg(measure='parent', delimiter_text=\"', '\", order_by_clause='order by parent') }} as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_multiple_sources_joined"], "unique_id": "model.dbt_project_evaluator.fct_multiple_sources_joined", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/dag/fct_multiple_sources_joined.sql", "original_file_path": "models/marts/dag/fct_multiple_sources_joined.sql", "name": "fct_multiple_sources_joined", "alias": "fct_multiple_sources_joined", "checksum": {"name": "sha256", "checksum": "d66e8bfed41b671e876375c93b8fceababdc16d6aa192340eb13235c311579d5"}, "tags": [], "refs": [["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This table shows each instance where a model references more than one source.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_multiple_sources_joined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541350.167128, "compiled_sql": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select  \n        *\n    from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'source'\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        \n    listagg(\n        parent,\n        ', '\n        )\n        within group (order by parent) as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_multiple_sources_joined"}, "model.dbt_project_evaluator.fct_root_models": {"raw_sql": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_root_models"], "unique_id": "model.dbt_project_evaluator.fct_root_models", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/dag/fct_root_models.sql", "original_file_path": "models/marts/dag/fct_root_models.sql", "name": "fct_root_models", "alias": "fct_root_models", "checksum": {"name": "sha256", "checksum": "ea2b0a85f7373f6020d62cb4edd49da6e52b6f3391e72ccc07c6dbae71f96e25"}, "tags": [], "refs": [["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This table shows each model with 0 direct parents.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_root_models.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541350.167546, "compiled_sql": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n    where child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_root_models"}, "model.dbt_project_evaluator.fct_model_fanout": {"raw_sql": "with all_dag_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        {{ dbt_utils.listagg(measure='all_dag_relationships.child', delimiter_text=\"', '\", order_by_clause='order by all_dag_relationships.child') }} as leaf_children\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1\n    having count(*) >= {{ var('models_fanout_threshold') }}\n)\n\nselect * from model_fanout\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_model_fanout"], "unique_id": "model.dbt_project_evaluator.fct_model_fanout", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/dag/fct_model_fanout.sql", "original_file_path": "models/marts/dag/fct_model_fanout.sql", "name": "fct_model_fanout", "alias": "fct_model_fanout", "checksum": {"name": "sha256", "checksum": "8aa935280327358e1b29377af3eaee59f3e58e75bc5f155856532c7a202d1df7"}, "tags": [], "refs": [["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This table shows all parents with more direct leaf children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_model_fanout.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541350.1669178, "compiled_sql": "with all_dag_relationships as (\n    select  \n        *\n    from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        \n    listagg(\n        all_dag_relationships.child,\n        ', '\n        )\n        within group (order by all_dag_relationships.child) as leaf_children\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1\n    having count(*) >= 3\n)\n\nselect * from model_fanout\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_model_fanout"}, "model.dbt_project_evaluator.fct_unused_sources": {"raw_sql": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type = 'source'\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_unused_sources"], "unique_id": "model.dbt_project_evaluator.fct_unused_sources", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/dag/fct_unused_sources.sql", "original_file_path": "models/marts/dag/fct_unused_sources.sql", "name": "fct_unused_sources", "alias": "fct_unused_sources", "checksum": {"name": "sha256", "checksum": "3a2394908cd6a8782413b5ad9364a7909b0de4dca26ae90b33b6929f6f7e4861"}, "tags": [], "refs": [["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This table shows each source with 0 children.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_unused_sources.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541350.168372, "compiled_sql": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n    where parent_resource_type = 'source'\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_unused_sources"}, "model.dbt_project_evaluator.fct_source_fanout": {"raw_sql": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n),\n\nsource_fanout as (\n    select\n        parent,\n        {{ dbt_utils.listagg(measure='child', delimiter_text=\"', '\", order_by_clause='order by child') }} as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_source_fanout"], "unique_id": "model.dbt_project_evaluator.fct_source_fanout", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/dag/fct_source_fanout.sql", "original_file_path": "models/marts/dag/fct_source_fanout.sql", "name": "fct_source_fanout", "alias": "fct_source_fanout", "checksum": {"name": "sha256", "checksum": "9a1db5da34625f8720f455ccc822bef50a91e6c0413d168c35e84663442b28a3"}, "tags": [], "refs": [["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This table shows each instance where a source is the direct parent of multiple resources in the DAG.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_source_fanout.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541350.167754, "compiled_sql": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n),\n\nsource_fanout as (\n    select\n        parent,\n        \n    listagg(\n        child,\n        ', '\n        )\n        within group (order by child) as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_source_fanout"}, "model.dbt_project_evaluator.fct_direct_join_to_source": {"raw_sql": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where child_resource_type = 'model'\n    and distance = 1\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.*\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_direct_join_to_source"], "unique_id": "model.dbt_project_evaluator.fct_direct_join_to_source", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/dag/fct_direct_join_to_source.sql", "original_file_path": "models/marts/dag/fct_direct_join_to_source.sql", "name": "fct_direct_join_to_source", "alias": "fct_direct_join_to_source", "checksum": {"name": "sha256", "checksum": "2750e6dc5c7fc0a7f41f59dfe5ee9806e26b5e5362f4d03e926c63f4c5a61313"}, "tags": [], "refs": [["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This table shows each parent/child relationship where a model has a reference to both a model and a source.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_direct_join_to_source.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541350.166464, "compiled_sql": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n    where child_resource_type = 'model'\n    and distance = 1\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.*\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_direct_join_to_source"}, "model.dbt_project_evaluator.fct_staging_dependent_on_staging": {"raw_sql": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_staging_dependent_on_staging"], "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/dag/fct_staging_dependent_on_staging.sql", "original_file_path": "models/marts/dag/fct_staging_dependent_on_staging.sql", "name": "fct_staging_dependent_on_staging", "alias": "fct_staging_dependent_on_staging", "checksum": {"name": "sha256", "checksum": "fcc4cb0269ed3c1d20d01e2dd98fa383159448a46f842c4233c7530550bff4a4"}, "tags": [], "refs": [["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This table shows each parent/child relationship where models in the staging layer are dependent on each other.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_staging_dependent_on_staging.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541350.16817, "compiled_sql": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_staging_dependent_on_staging"}, "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": {"raw_sql": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_staging_dependent_on_marts_or_intermediate"], "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "original_file_path": "models/marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "name": "fct_staging_dependent_on_marts_or_intermediate", "alias": "fct_staging_dependent_on_marts_or_intermediate", "checksum": {"name": "sha256", "checksum": "2ac08f94b2f71e89b992402cffcb5357675046b59e27737e44401f1dc792374a"}, "tags": [], "refs": [["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This table shows each parent/child relationship where models in the staging layer are dependent on models in the marts and/or intermediate layer.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541350.167964, "compiled_sql": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"}, "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": {"raw_sql": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_marts_or_intermediate_dependent_on_source"], "unique_id": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "original_file_path": "models/marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "name": "fct_marts_or_intermediate_dependent_on_source", "alias": "fct_marts_or_intermediate_dependent_on_source", "checksum": {"name": "sha256", "checksum": "fd37ab2fccf9e3ee0b792f4c5d1f29443211c385295bb628f8bb4331160dbcf4"}, "tags": [], "refs": [["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This table shows each parent/child relationship where models in the marts and/or intermediate layer are dependent on source(s).", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541350.166698, "compiled_sql": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n    where distance = 1\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"}, "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": {"raw_sql": "with all_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type not in ('exposures', 'metrics')\n    and child_resource_type not in ('exposures', 'metrics')\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child as child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_rejoining_of_upstream_concepts"], "unique_id": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/dag/fct_rejoining_of_upstream_concepts.sql", "original_file_path": "models/marts/dag/fct_rejoining_of_upstream_concepts.sql", "name": "fct_rejoining_of_upstream_concepts", "alias": "fct_rejoining_of_upstream_concepts", "checksum": {"name": "sha256", "checksum": "2a1d6e4d0f8b26ada033697b62d6d111504069844de0f355635f9c3cc8603c30"}, "tags": [], "refs": [["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "\"All cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the  parent's direct childen (parent_and_child). Only includes cases where the model \"in between\" the parent and child  has NO other downstream dependencies.\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/fct_rejoining_of_upstream_concepts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbt_project_evaluator"}, "created_at": 1661541350.167338, "compiled_sql": "with all_relationships as (\n    select  \n        *\n    from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n    where parent_resource_type not in ('exposures', 'metrics')\n    and child_resource_type not in ('exposures', 'metrics')\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child as child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"}, "model.dbt_project_evaluator.fct_missing_primary_key_tests": {"raw_sql": "with \n\ntests as (\n    select * from {{ ref('int_model_test_summary') }} \n),\n\nfinal as (\n\n    select \n        *\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_model_test_summary", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_missing_primary_key_tests"], "unique_id": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/tests/fct_missing_primary_key_tests.sql", "original_file_path": "models/marts/tests/fct_missing_primary_key_tests.sql", "name": "fct_missing_primary_key_tests", "alias": "fct_missing_primary_key_tests", "checksum": {"name": "sha256", "checksum": "f4c5941435f969a9d4f1b6e4345f0c813df9d1bfab3b1ba10cf063a33ec7d173"}, "tags": [], "refs": [["int_model_test_summary"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "this model has one record for every model without unique and not null tests configured on a single column", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/fct_missing_primary_key_tests.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541350.1910248, "compiled_sql": "with \n\ntests as (\n    select * from prod_analytics.dbt_project_evaluator.int_model_test_summary \n),\n\nfinal as (\n\n    select \n        *\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_missing_primary_key_tests"}, "model.dbt_project_evaluator.fct_test_coverage": {"raw_sql": "with\n\ntest_counts as (\n    select * from {{ ref('int_model_test_summary') }}\n),\n\nconversion as (\n    select\n        resource_name,\n        case when number_of_tests_on_model > 0 then 1 else 0 end as is_tested_model,\n        {% for model_type in var('model_types') %}\n            case when model_type = '{{ model_type }}' then 1.0 else NULL end as is_{{ model_type }}_model,\n            case when number_of_tests_on_model > 0 and model_type = '{{ model_type }}' then 1.0 else 0 end as is_tested_{{ model_type }}_model{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from test_counts\n),\n\nfinal as (\n    select\n        current_timestamp as measured_at,\n        count(*) as total_models,\n        sum(number_of_tests_on_model) as total_tests,\n        sum(is_tested_model) as tested_models,\n        round(sum(is_tested_model) * 100.0 / count(*), 2) as test_coverage_pct,\n        {% for model_type in var('model_types') %}\n            round(sum(is_tested_{{ model_type }}_model) * 100.0 / count(is_{{ model_type }}_model), 2) as {{ model_type }}_test_coverage_pct,\n        {% endfor %}\n        round(sum(number_of_tests_on_model) * 1.0 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_project_evaluator.int_model_test_summary"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_test_coverage"], "unique_id": "model.dbt_project_evaluator.fct_test_coverage", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/tests/fct_test_coverage.sql", "original_file_path": "models/marts/tests/fct_test_coverage.sql", "name": "fct_test_coverage", "alias": "fct_test_coverage", "checksum": {"name": "sha256", "checksum": "a37380b7be352b58b6fe66c91bf532127bc46b70856679dd22a9b83e13acf66a"}, "tags": [], "refs": [["int_model_test_summary"]], "sources": [], "metrics": [], "description": "this model shows a few key metrics related to how well tested your dbt project is.", "columns": {"test_to_model_ratio": {"name": "test_to_model_ratio", "description": "the total number of tests in the project divided by the total number of models in the project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_coverage_pct": {"name": "test_coverage_pct", "description": "the number of models in the project with at least one test configured divided by the total number of models in the project", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/fct_test_coverage.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541350.190788, "compiled_sql": "with\n\ntest_counts as (\n    select * from prod_analytics.dbt_project_evaluator.int_model_test_summary\n),\n\nconversion as (\n    select\n        resource_name,\n        case when number_of_tests_on_model > 0 then 1 else 0 end as is_tested_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when number_of_tests_on_model > 0 and model_type = 'staging' then 1.0 else 0 end as is_tested_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when number_of_tests_on_model > 0 and model_type = 'intermediate' then 1.0 else 0 end as is_tested_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when number_of_tests_on_model > 0 and model_type = 'marts' then 1.0 else 0 end as is_tested_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when number_of_tests_on_model > 0 and model_type = 'other' then 1.0 else 0 end as is_tested_other_model\n        \n\n    from test_counts\n),\n\nfinal as (\n    select\n        current_timestamp as measured_at,\n        count(*) as total_models,\n        sum(number_of_tests_on_model) as total_tests,\n        sum(is_tested_model) as tested_models,\n        round(sum(is_tested_model) * 100.0 / count(*), 2) as test_coverage_pct,\n        \n            round(sum(is_tested_staging_model) * 100.0 / count(is_staging_model), 2) as staging_test_coverage_pct,\n        \n            round(sum(is_tested_intermediate_model) * 100.0 / count(is_intermediate_model), 2) as intermediate_test_coverage_pct,\n        \n            round(sum(is_tested_marts_model) * 100.0 / count(is_marts_model), 2) as marts_test_coverage_pct,\n        \n            round(sum(is_tested_other_model) * 100.0 / count(is_other_model), 2) as other_test_coverage_pct,\n        \n        round(sum(number_of_tests_on_model) * 1.0 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_test_coverage"}, "model.dbt_project_evaluator.int_model_test_summary": {"raw_sql": "with \n\nall_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n),\n\nrelationships as (\n    select * from {{ ref('int_direct_relationships') }}\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        count(distinct case when all_graph_resources.is_unique_test or all_graph_resources.is_not_null_test then relationships.resource_id else null end) primary_key_tests_count,\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        sum(case when primary_key_tests_count = 2 then 1 else 0 end) >= 1 as is_primary_key_tested,\n        sum(tests_count) as number_of_tests_on_model\n    from count_column_tests\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name, \n        all_graph_resources.model_type,\n        coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as is_primary_key_tested,\n        coalesce(agg_test_relationships.number_of_tests_on_model, 0) as number_of_tests_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where all_graph_resources.resource_type = 'model'\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "tests", "intermediate", "int_model_test_summary"], "unique_id": "model.dbt_project_evaluator.int_model_test_summary", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/tests/intermediate/int_model_test_summary.sql", "original_file_path": "models/marts/tests/intermediate/int_model_test_summary.sql", "name": "int_model_test_summary", "alias": "int_model_test_summary", "checksum": {"name": "sha256", "checksum": "0076b6d0e11d9f08b7565858a3abe6f37bc7c3ddecef0bd5f3b3975b5331b9af"}, "tags": [], "refs": [["int_all_graph_resources"], ["int_direct_relationships"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/intermediate/int_model_test_summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541349.4981399, "compiled_sql": "with \n\nall_graph_resources as (\n    select * from prod_analytics.dbt_project_evaluator.int_all_graph_resources\n),\n\nrelationships as (\n    select * from prod_analytics.dbt_project_evaluator.int_direct_relationships\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        count(distinct case when all_graph_resources.is_unique_test or all_graph_resources.is_not_null_test then relationships.resource_id else null end) primary_key_tests_count,\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        sum(case when primary_key_tests_count = 2 then 1 else 0 end) >= 1 as is_primary_key_tested,\n        sum(tests_count) as number_of_tests_on_model\n    from count_column_tests\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name, \n        all_graph_resources.model_type,\n        coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as is_primary_key_tested,\n        coalesce(agg_test_relationships.number_of_tests_on_model, 0) as number_of_tests_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where all_graph_resources.resource_type = 'model'\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.int_model_test_summary"}, "model.dbt_project_evaluator.fct_exposure_parents_materializations": {"raw_sql": "with \n\ndirect_exposure_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and parent_resource_type = 'model'\n        and parent_materialized in ('view', 'ephemeral')\n),\n\nfinal as (\n\n    select \n        parent as parent_model_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "performance", "fct_exposure_parents_materializations"], "unique_id": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/performance/fct_exposure_parents_materializations.sql", "original_file_path": "models/marts/performance/fct_exposure_parents_materializations.sql", "name": "fct_exposure_parents_materializations", "alias": "fct_exposure_parents_materializations", "checksum": {"name": "sha256", "checksum": "3c6524d9a9b4c9f9ed3a34ece968d7647aeb0786acea85fd7418c3d71ff09e18"}, "tags": [], "refs": [["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This table shows each direct parent of an exposure that is not materialized as a table or incremental.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/performance/fct_exposure_parents_materializations.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541350.1685739, "compiled_sql": "with \n\ndirect_exposure_relationships as (\n    select * from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and parent_resource_type = 'model'\n        and parent_materialized in ('view', 'ephemeral')\n),\n\nfinal as (\n\n    select \n        parent as parent_model_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_exposure_parents_materializations"}, "model.dbt_project_evaluator.fct_chained_views_dependencies": {"raw_sql": "with all_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance <> 0\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n)\n\nselect * from final\n\n{{ filter_exceptions(this) }}\n\norder by distance desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "performance", "fct_chained_views_dependencies"], "unique_id": "model.dbt_project_evaluator.fct_chained_views_dependencies", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/performance/fct_chained_views_dependencies.sql", "original_file_path": "models/marts/performance/fct_chained_views_dependencies.sql", "name": "fct_chained_views_dependencies", "alias": "fct_chained_views_dependencies", "checksum": {"name": "sha256", "checksum": "fde4abb01369e5b15c70386adbdb15906603072559d3d8582aae292e54416f7e"}, "tags": [], "refs": [["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This returns models dependent on chains of \"non-physically-materialized\" models (views and ephemerals), highlighting potential cases for improving performance by switching the materialization of model(s) within  the chain to table or incremental. \n", "columns": {"distance": {"name": "distance", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/performance/performance.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/performance/fct_chained_views_dependencies.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541350.1966422, "compiled_sql": "with all_relationships as (\n    select  \n        *\n    from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n    where distance <> 0\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n)\n\nselect * from final\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n\n\norder by distance desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_chained_views_dependencies"}, "model.dbt_project_evaluator.fct_source_directories": {"raw_sql": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models/' || '{{ var(\"staging_folder_name\") }}' || '/' || source_name || '/' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_source_directories"], "unique_id": "model.dbt_project_evaluator.fct_source_directories", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/structure/fct_source_directories.sql", "original_file_path": "models/marts/structure/fct_source_directories.sql", "name": "fct_source_directories", "alias": "fct_source_directories", "checksum": {"name": "sha256", "checksum": "3baffd43c306632db1f96cfee33a03a7fc1bd854d4996c0d4cb878192596bf44"}, "tags": [], "refs": [["int_all_graph_resources"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This finds all cases where a source definition is NOT in the appropriate subdirectory.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_source_directories.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541350.200114, "compiled_sql": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\nwith all_graph_resources as (\n    select * from prod_analytics.dbt_project_evaluator.int_all_graph_resources\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models/' || 'staging' || '/' || source_name || '/' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_source_directories"}, "model.dbt_project_evaluator.fct_test_directories": {"raw_sql": "with\n\nresources as (\n\n    select * from {{ ref('int_all_graph_resources') }}\n\n),\n\nrelationships as (\n\n    select * from {{ ref('int_direct_relationships') }}\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where resource_type = 'test'\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_test_directories"], "unique_id": "model.dbt_project_evaluator.fct_test_directories", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/structure/fct_test_directories.sql", "original_file_path": "models/marts/structure/fct_test_directories.sql", "name": "fct_test_directories", "alias": "fct_test_directories", "checksum": {"name": "sha256", "checksum": "d01c597bc12991514cfd4b2bc155d6fb421c9e36d7a1641f1273a19addae2eb4"}, "tags": [], "refs": [["int_all_graph_resources"], ["int_direct_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This finds all cases where the yml file for model tests is NOT in the same subdirectory as the corresponding model.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_test_directories.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541350.200327, "compiled_sql": "with\n\nresources as (\n\n    select * from prod_analytics.dbt_project_evaluator.int_all_graph_resources\n\n),\n\nrelationships as (\n\n    select * from prod_analytics.dbt_project_evaluator.int_direct_relationships\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where resource_type = 'test'\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_test_directories"}, "model.dbt_project_evaluator.fct_model_naming_conventions": {"raw_sql": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n),\n\nnaming_convention_prefixes as (\n    select * from {{ ref('stg_naming_convention_prefixes') }}\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        {{ dbt_utils.listagg('prefix_value', \"', '\", 'order by prefix_value') }} as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where models.prefix_value is null\n\n)\n\nselect * from inappropriate_model_names\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_model_naming_conventions"], "unique_id": "model.dbt_project_evaluator.fct_model_naming_conventions", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/structure/fct_model_naming_conventions.sql", "original_file_path": "models/marts/structure/fct_model_naming_conventions.sql", "name": "fct_model_naming_conventions", "alias": "fct_model_naming_conventions", "checksum": {"name": "sha256", "checksum": "06e64fe92d3509c238ec32a34f4d06d0946172a1ba3b73091eb44c98b985ca3c"}, "tags": [], "refs": [["int_all_graph_resources"], ["stg_naming_convention_prefixes"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This finds all cases where a model does NOT have the appropriate prefix.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_model_naming_conventions.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541350.199898, "compiled_sql": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from prod_analytics.dbt_project_evaluator.int_all_graph_resources\n),\n\nnaming_convention_prefixes as (\n    select * from prod_analytics.dbt_project_evaluator.stg_naming_convention_prefixes\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        \n    listagg(\n        prefix_value,\n        ', '\n        )\n        within group (order by prefix_value) as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where models.prefix_value is null\n\n)\n\nselect * from inappropriate_model_names\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_model_naming_conventions"}, "model.dbt_project_evaluator.fct_model_directories": {"raw_sql": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n),\n\nfolders as (\n    select * from {{ ref('stg_naming_convention_folders') }}\n), \n\nall_dag_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models/' || '{{ var(\"staging_folder_name\") }}' || '/' || parent_source_name || '/' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '/.../' || folders.folder_name_value || '/.../' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n{{ filter_exceptions(this) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_folders", "model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_project_evaluator", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "dbt_project_evaluator", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_model_directories"], "unique_id": "model.dbt_project_evaluator.fct_model_directories", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "marts/structure/fct_model_directories.sql", "original_file_path": "models/marts/structure/fct_model_directories.sql", "name": "fct_model_directories", "alias": "fct_model_directories", "checksum": {"name": "sha256", "checksum": "bf039dfc4800a5d64f4e1482fc1f2d6e31bc7faf5731a5de03389aec47ecf4c4"}, "tags": [], "refs": [["int_all_graph_resources"], ["stg_naming_convention_folders"], ["int_all_dag_relationships"], ["dbt_project_evaluator_exceptions"]], "sources": [], "metrics": [], "description": "This finds all cases where a model is NOT in the appropriate subdirectory.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/fct_model_directories.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_project_evaluator"}, "created_at": 1661541350.19967, "compiled_sql": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n\nwith all_graph_resources as (\n    select * from prod_analytics.dbt_project_evaluator.int_all_graph_resources\n),\n\nfolders as (\n    select * from prod_analytics.dbt_project_evaluator.stg_naming_convention_folders\n), \n\nall_dag_relationships as (\n    select * from prod_analytics.dbt_project_evaluator.int_all_dag_relationships\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models/' || 'staging' || '/' || parent_source_name || '/' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '/.../' || folders.folder_name_value || '/.../' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n\n\n\n\n\n    where 1 = 1\n    \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.dbt_project_evaluator.fct_model_directories"}, "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"fct_name": "varchar", "column_name": "varchar", "id_to_exclude": "varchar", "comment": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "analytics", "fqn": ["dbt_project_evaluator", "dbt_project_evaluator_exceptions"], "unique_id": "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "dbt_project_evaluator_exceptions.csv", "original_file_path": "seeds/dbt_project_evaluator_exceptions.csv", "name": "dbt_project_evaluator_exceptions", "alias": "dbt_project_evaluator_exceptions", "checksum": {"name": "sha256", "checksum": "55374346a29c2ef9f7ac7b8d3f249e818f60dbd9586ab2645c294d3438f094d9"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.210819, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.analytics.dbt_project_evaluator_exceptions"}, "model.linkedin_pages.linkedin_pages__posts": {"raw_sql": "with share_statistic as (\n\n    select *\n    from {{ var('share_statistic_staging') }}\n\n),\n\nugc_post_share_statistic as (\n\n    select *\n    from {{ ref('int_linkedin_pages__latest_post') }}\n    where is_most_recent_record = true\n\n),\n\nugc_post_history as (\n\n    select *\n    from {{ ref('int_linkedin_pages__latest_post_history') }}\n    where is_most_recent_record = true\n\n),\n\nugc_post_share_content_media as (\n\n    select *\n    from {{ var('ugc_post_share_content_media_staging') }}\n\n),\n\norganization as (\n\n    select *\n    from {{ var('organization_staging') }}\n\n),\n\norganization_ugc_post as (\n\n    select *\n    from {{ var('organization_ugc_post_staging') }}\n\n),\n\njoined as (\n\n    select\n        ugc_post_history.ugc_post_id,\n        ugc_post_history.post_author,\n        ugc_post_history.post_url,\n        ugc_post_history.created_timestamp,\n        ugc_post_history.first_published_timestamp,\n        ugc_post_history.lifecycle_state,\n        ugc_post_history.version_tag,\n        ugc_post_history.specific_content_share_commentary_text,\n        ugc_post_share_content_media.title_text,\n        ugc_post_share_content_media.original_url,\n        organization.organization_id,\n        organization.organization_name,\n        share_statistic.click_count,\n        share_statistic.comment_count,\n        share_statistic.impression_count,\n        share_statistic.like_count,\n        share_statistic.share_count,\n        ugc_post_history.source_relation\n    from ugc_post_history\n    left join ugc_post_share_statistic\n        on cast(ugc_post_share_statistic.ugc_post_id as {{ dbt_utils.type_string() }}) = cast(ugc_post_history.ugc_post_id as {{ dbt_utils.type_string() }})\n        and ugc_post_share_statistic.source_relation = ugc_post_history.source_relation\n    left join share_statistic\n        on share_statistic.share_statistic_id = ugc_post_share_statistic.share_statistic_id\n        and share_statistic.source_relation = ugc_post_share_statistic.source_relation\n    left join ugc_post_share_content_media\n        on ugc_post_history.ugc_post_id = ugc_post_share_content_media.ugc_post_id\n        and ugc_post_history.source_relation = ugc_post_share_content_media.source_relation\n    left join organization_ugc_post\n        on ugc_post_history.ugc_post_id = organization_ugc_post.ugc_post_id\n        and ugc_post_history.source_relation = organization_ugc_post.source_relation\n    left join organization\n        on organization_ugc_post.organization_id = organization.organization_id\n        and organization_ugc_post.source_relation = organization.source_relation\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic", "model.linkedin_pages.int_linkedin_pages__latest_post", "model.linkedin_pages.int_linkedin_pages__latest_post_history", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media", "model.linkedin_pages_source.stg_linkedin_pages__organization", "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages", "fqn": ["linkedin_pages", "linkedin_pages__posts"], "unique_id": "model.linkedin_pages.linkedin_pages__posts", "package_name": "linkedin_pages", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages", "path": "linkedin_pages__posts.sql", "original_file_path": "models/linkedin_pages__posts.sql", "name": "linkedin_pages__posts", "alias": "linkedin_pages__posts", "checksum": {"name": "sha256", "checksum": "d66cce042be273addfbdf288b67000fe9e4f665ce19762fdc3a02a88d66602bd"}, "tags": [], "refs": [["stg_linkedin_pages__share_statistic"], ["int_linkedin_pages__latest_post"], ["int_linkedin_pages__latest_post_history"], ["stg_linkedin_pages__ugc_post_share_content_media"], ["stg_linkedin_pages__organization"], ["stg_linkedin_pages__organization_ugc_post"]], "sources": [], "metrics": [], "description": "Each record represents the performance of a LinkedIn post", "columns": {"click_count": {"name": "click_count", "description": "The total number of times the post was clicked", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment_count": {"name": "comment_count", "description": "The total number of comments on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_count": {"name": "impression_count", "description": "The total number of impressions on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "like_count": {"name": "like_count", "description": "The total number of likes on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_count": {"name": "share_count", "description": "The total number of shares on the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "The unique ID of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_author": {"name": "post_author", "description": "The author of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_url": {"name": "post_url", "description": "The URL of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_timestamp": {"name": "created_timestamp", "description": "The timestamp of when the post was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_published_timestamp": {"name": "first_published_timestamp", "description": "The timestamp of when the post was first published", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifecycle_state": {"name": "lifecycle_state", "description": "The current state of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "The version tag of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_text": {"name": "specific_content_share_commentary_text", "description": "The text of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_text": {"name": "title_text", "description": "The title of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_url": {"name": "original_url", "description": "The original URL of the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The ID of the organization that owns the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "The localized name of the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source of the record, if the unioning functionality is being used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "linkedin_pages://models/linkedin_pages.yml", "compiled_path": "target/compiled/linkedin_pages/models/linkedin_pages__posts.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages", "materialized": "table"}, "created_at": 1661541350.2174048, "compiled_sql": "with share_statistic as (\n\n    select *\n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__share_statistic\n\n),\n\nugc_post_share_statistic as (\n\n    select *\n    from prod_analytics.linkedin_pages.int_linkedin_pages__latest_post\n    where is_most_recent_record = true\n\n),\n\nugc_post_history as (\n\n    select *\n    from prod_analytics.linkedin_pages.int_linkedin_pages__latest_post_history\n    where is_most_recent_record = true\n\n),\n\nugc_post_share_content_media as (\n\n    select *\n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media\n\n),\n\norganization as (\n\n    select *\n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__organization\n\n),\n\norganization_ugc_post as (\n\n    select *\n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post\n\n),\n\njoined as (\n\n    select\n        ugc_post_history.ugc_post_id,\n        ugc_post_history.post_author,\n        ugc_post_history.post_url,\n        ugc_post_history.created_timestamp,\n        ugc_post_history.first_published_timestamp,\n        ugc_post_history.lifecycle_state,\n        ugc_post_history.version_tag,\n        ugc_post_history.specific_content_share_commentary_text,\n        ugc_post_share_content_media.title_text,\n        ugc_post_share_content_media.original_url,\n        organization.organization_id,\n        organization.organization_name,\n        share_statistic.click_count,\n        share_statistic.comment_count,\n        share_statistic.impression_count,\n        share_statistic.like_count,\n        share_statistic.share_count,\n        ugc_post_history.source_relation\n    from ugc_post_history\n    left join ugc_post_share_statistic\n        on cast(ugc_post_share_statistic.ugc_post_id as \n    varchar\n) = cast(ugc_post_history.ugc_post_id as \n    varchar\n)\n        and ugc_post_share_statistic.source_relation = ugc_post_history.source_relation\n    left join share_statistic\n        on share_statistic.share_statistic_id = ugc_post_share_statistic.share_statistic_id\n        and share_statistic.source_relation = ugc_post_share_statistic.source_relation\n    left join ugc_post_share_content_media\n        on ugc_post_history.ugc_post_id = ugc_post_share_content_media.ugc_post_id\n        and ugc_post_history.source_relation = ugc_post_share_content_media.source_relation\n    left join organization_ugc_post\n        on ugc_post_history.ugc_post_id = organization_ugc_post.ugc_post_id\n        and ugc_post_history.source_relation = organization_ugc_post.source_relation\n    left join organization\n        on organization_ugc_post.organization_id = organization.organization_id\n        and organization_ugc_post.source_relation = organization.source_relation\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages.linkedin_pages__posts"}, "model.linkedin_pages.int_linkedin_pages__latest_post_history": {"raw_sql": "with ugc_post_history as (\n\n    select *\n    from {{ var('ugc_post_history_staging') }}\n\n), is_most_recent as (\n\n    select\n        *,\n        row_number() over (partition by ugc_post_id, source_relation order by last_modified_timestamp desc) = 1 as is_most_recent_record\n    from ugc_post_history\n\n)\n\nselect *\nfrom is_most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages", "fqn": ["linkedin_pages", "intermediate", "int_linkedin_pages__latest_post_history"], "unique_id": "model.linkedin_pages.int_linkedin_pages__latest_post_history", "package_name": "linkedin_pages", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages", "path": "intermediate/int_linkedin_pages__latest_post_history.sql", "original_file_path": "models/intermediate/int_linkedin_pages__latest_post_history.sql", "name": "int_linkedin_pages__latest_post_history", "alias": "int_linkedin_pages__latest_post_history", "checksum": {"name": "sha256", "checksum": "c084a8faa5ef7d910d76aee852db9de4ab8cd136e747ef43fd17cab04e2c15d7"}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages/models/intermediate/int_linkedin_pages__latest_post_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages", "materialized": "table"}, "created_at": 1661541349.570598, "compiled_sql": "with ugc_post_history as (\n\n    select *\n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_history\n\n), is_most_recent as (\n\n    select\n        *,\n        row_number() over (partition by ugc_post_id, source_relation order by last_modified_timestamp desc) = 1 as is_most_recent_record\n    from ugc_post_history\n\n)\n\nselect *\nfrom is_most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages.int_linkedin_pages__latest_post_history"}, "model.linkedin_pages.int_linkedin_pages__latest_post": {"raw_sql": "with ugc_post as (\n\n    select *\n    from {{ var('ugc_post_share_statistic_staging') }}\n\n), is_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by ugc_post_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from ugc_post\n\n)\n\nselect *\nfrom is_most_recent", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic"]}, "config": {"enabled": true, "alias": null, "schema": "linkedin_pages", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "linkedin_pages", "fqn": ["linkedin_pages", "intermediate", "int_linkedin_pages__latest_post"], "unique_id": "model.linkedin_pages.int_linkedin_pages__latest_post", "package_name": "linkedin_pages", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages", "path": "intermediate/int_linkedin_pages__latest_post.sql", "original_file_path": "models/intermediate/int_linkedin_pages__latest_post.sql", "name": "int_linkedin_pages__latest_post", "alias": "int_linkedin_pages__latest_post", "checksum": {"name": "sha256", "checksum": "a59248fe76fdbb15209b1bdfda441750d7e5ec0cc4a7b8573f1e311d302bc518"}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_share_statistic"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages/models/intermediate/int_linkedin_pages__latest_post.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "linkedin_pages", "materialized": "table"}, "created_at": 1661541349.574315, "compiled_sql": "with ugc_post as (\n\n    select *\n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic\n\n), is_most_recent as (\n\n    select \n        *,\n        row_number() over (partition by ugc_post_id, source_relation order by _fivetran_synced desc) = 1 as is_most_recent_record\n    from ugc_post\n\n)\n\nselect *\nfrom is_most_recent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.linkedin_pages.int_linkedin_pages__latest_post"}, "model.stripe.stripe__customer_overview": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe__balance_transactions') }}  \n\n), incomplete_charges as (\n\n    select *\n    from {{ ref('int_stripe__incomplete_charges') }}  \n\n), customer as (\n\n    select *\n    from {{ var('customer') }}  \n\n), transactions_grouped as (\n \n    select\n      customer_id,\n      sum(case when type in ('charge', 'payment') \n        then amount\n        else 0 \n            end) as total_sales,\n      sum(case when type in ('payment_refund', 'refund') \n        then amount\n        else 0 \n            end) as total_refunds,    \n      sum(amount) as total_gross_transaction_amount,\n      sum(fee) as total_fees,\n      sum(net) as total_net_transaction_amount,\n      sum(case when type in ('charge', 'payment') \n        then 1\n        else 0 \n            end) as total_sales_count, \n      sum(case when type in ('payment_refund', 'refund') \n        then 1\n        else 0 \n            end) as total_refund_count,   \n      sum(case when type in ('charge', 'payment') and {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then amount \n        else 0 \n            end) as sales_this_month,\n      sum(case when type in ('payment_refund', 'refund') and {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then amount \n        else 0 \n            end) as refunds_this_month,\n      sum(case when {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then amount \n        else 0 \n            end) as gross_transaction_amount_this_month,\n      sum(case when {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then fee \n        else 0 \n            end) as fees_this_month,\n      sum(case when {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then net \n        else 0 \n            end) as net_transaction_amount_this_month,\n      sum(case when type in ('charge', 'payment') and {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then 1 \n        else 0 \n            end) as sales_count_this_month,\n      sum(case when type in ('payment_refund', 'refund') and {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then 1 \n        else 0 \n            end) as refund_count_this_month,\n      min(case when type in ('charge', 'payment') \n        then {{ date_timezone('created_at') }}\n        else null \n            end) as first_sale_date,\n      max(case when type in ('charge', 'payment') \n        then {{ date_timezone('created_at') }}\n        else null \n            end) as most_recent_sale_date\n    from balance_transaction_joined\n    where type in ('payment', 'charge', 'payment_refund', 'refund')\n    group by 1\n\n), failed_charges_by_customer as (\n\n    select\n      customer_id,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount,\n      sum(case when {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then 1\n        else 0 \n            end) as failed_charge_count_this_month,\n      sum(case when {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then amount\n        else 0 \n            end) as failed_charge_amount_this_month\n    from incomplete_charges\n    group by 1\n\n), transactions_not_associated_with_customer as (\n\n    select\n      'No Associated Customer' as customer_description,\n      customer.email,\n      customer.created_at as customer_created_at,\n      customer.is_delinquent,\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      0 as total_failed_charge_count,\n      0 as total_failed_charge_amount,\n      0 as failed_charge_count_this_month,\n      0 as failed_charge_amount_this_month,\n      customer.currency as customer_currency,\n      customer.default_card_id,\n      customer.shipping_name,\n      customer.shipping_address_line_1,\n      customer.shipping_address_line_2,\n      customer.shipping_address_city,\n      customer.shipping_address_state,\n      customer.shipping_address_country,\n      customer.shipping_address_postal_code,\n      customer.shipping_phone\n\n      {% if var('stripe__customer_metadata',[]) %}\n        {% for metadata in var('stripe__customer_metadata') %}\n            ,customer.{{ metadata }}\n        {% endfor %}\n      {% endif %}\n      \n    from transactions_grouped\n    left join customer \n        on transactions_grouped.customer_id = customer.customer_id\n    where customer.customer_id is null and customer.description is null\n\n\n), customer_transactions_overview as (\n\n    select\n      coalesce(customer.description, customer.customer_id) as customer_description,\n      customer.email,\n      customer.created_at as customer_created_at,\n      customer.is_delinquent,\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      coalesce(failed_charges_by_customer.total_failed_charge_count, 0) as total_failed_charge_count,\n      coalesce(failed_charges_by_customer.total_failed_charge_amount/100, 0) as total_failed_charge_amount,\n      coalesce(failed_charges_by_customer.failed_charge_count_this_month, 0) as failed_charge_count_this_month,\n      coalesce(failed_charges_by_customer.failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,\n      customer.currency as customer_currency,\n      customer.default_card_id,\n      customer.shipping_name,\n      customer.shipping_address_line_1,\n      customer.shipping_address_line_2,\n      customer.shipping_address_city,\n      customer.shipping_address_state,\n      customer.shipping_address_country,\n      customer.shipping_address_postal_code,\n      customer.shipping_phone\n\n      {% if var('stripe__customer_metadata',[]) %}\n        {% for metadata in var('stripe__customer_metadata') %}\n            ,customer.{{ metadata }}\n        {% endfor %}\n      {% endif %}\n      \n    from customer\n    left join transactions_grouped\n        on customer.customer_id = transactions_grouped.customer_id\n    left join failed_charges_by_customer \n        on customer.customer_id = failed_charges_by_customer.customer_id\n)\n\nselect *\nfrom transactions_not_associated_with_customer\nunion all \nselect * \nfrom customer_transactions_overview", "resource_type": "model", "depends_on": {"macros": ["macro.stripe.date_timezone", "macro.dbt_utils.date_trunc", "macro.dbt_utils.current_timestamp"], "nodes": ["model.stripe.stripe__balance_transactions", "model.stripe.int_stripe__incomplete_charges", "model.stripe_source.stg_stripe__customer"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe", "fqn": ["stripe", "stripe__customer_overview"], "unique_id": "model.stripe.stripe__customer_overview", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "stripe__customer_overview.sql", "original_file_path": "models/stripe__customer_overview.sql", "name": "stripe__customer_overview", "alias": "stripe__customer_overview", "checksum": {"name": "sha256", "checksum": "bfad8428ea3b4ce15f617e02fb5aa53946478ae7378491d1b8719c9c037c8048"}, "tags": [], "refs": [["stripe__balance_transactions"], ["int_stripe__incomplete_charges"], ["stg_stripe__customer"]], "sources": [], "metrics": [], "description": "Each record represents a customer, enriched with metrics about their associated transactions.", "columns": {"customer_description": {"name": "customer_description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address associated with the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_created_at": {"name": "customer_created_at", "description": "Timestamp of when the customer entry was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_delinquent": {"name": "is_delinquent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "Sum of all charges made to this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "Sum of all refunds made to this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions made with this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_fees": {"name": "total_fees", "description": "Total fees charged on all transactions made with this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_net_transaction_amount": {"name": "total_net_transaction_amount", "description": "Net amount of all transactions made with this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "The total number of sales made to this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refund_count": {"name": "total_refund_count", "description": "The total number of refunds made to this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_this_month": {"name": "sales_this_month", "description": "Sum of charges made to this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refunds_this_month": {"name": "refunds_this_month", "description": "Sum of refunds made to this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gross_transaction_amount_this_month": {"name": "gross_transaction_amount_this_month", "description": "Gross amount of transactions made with this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fees_this_month": {"name": "fees_this_month", "description": "Total fees charged on transactions made with this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_transaction_amount_this_month": {"name": "net_transaction_amount_this_month", "description": "Net amount of transactions made with this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_count_this_month": {"name": "sales_count_this_month", "description": "The number of sales made to this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_count_this_month": {"name": "refund_count_this_month", "description": "The number of refunds made to this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_sale_date": {"name": "first_sale_date", "description": "Date of the first time this customer was charged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_sale_date": {"name": "most_recent_sale_date", "description": "Date of the most recent time this customer was charged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "The total number of incomplete charges this customer has had.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "The total amount from incomplete charges this customer has had.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failed_charge_count_this_month": {"name": "failed_charge_count_this_month", "description": "The number of incomplete charges this customer has had this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failed_charge_amount_this_month": {"name": "failed_charge_amount_this_month", "description": "The amount from incomplete charges this customer has had this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_currency": {"name": "customer_currency", "description": "Currency used by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID of the default card used by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1661541350.2335029}, "model.stripe.stripe__balance_transactions": {"raw_sql": "with balance_transaction as (\n\n    select *\n    from {{ var('balance_transaction') }}\n\n), charge as (\n\n    select *\n    from {{ var('charge')}}\n\n), payment_intent as (\n\n    select *\n    from {{ var('payment_intent')}}\n\n), cards as (\n\n    select *\n    from {{ var('card')}}\n\n), payout as (\n\n    select *\n    from {{ var('payout')}}\n\n\n), customer as (\n\n    select *\n    from {{ var('customer')}}\n\n{% if var('using_payment_method', True) %}\n\n), payment_method as (\n\n    select *\n    from {{ var('payment_method')}}\n\n), payment_method_card as (\n\n    select *\n    from {{ var('payment_method_card')}}\n\n{% endif %}\n\n), refund as (\n\n    select *\n    from {{ var('refund')}}\n\n)\n\nselect \n    balance_transaction.balance_transaction_id,\n    balance_transaction.created_at,\n    balance_transaction.available_on,\n    balance_transaction.currency,\n    balance_transaction.amount,\n    balance_transaction.fee,\n    balance_transaction.net,\n    balance_transaction.type,\n    case\n        when balance_transaction.type in ('charge', 'payment') then 'charge'\n        when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n        when balance_transaction.type in ('payout_cancel', 'payout_failure') then 'payout_reversal'\n        when balance_transaction.type in ('transfer', 'recipient_transfer') then 'transfer'\n        when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n        else balance_transaction.type\n    end as reporting_category,\n    balance_transaction.source,\n    balance_transaction.description,\n    case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, \n    case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n    {{ dbt_utils.dateadd('day', 1, 'balance_transaction.available_on') }} as effective_at,\n    coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n    charge.receipt_email,\n    customer.description as customer_description, \n\n    {% if var('using_payment_method', True) %}\n    payment_method.type as payment_method_type,\n    payment_method_card.brand as payment_method_brand,\n    payment_method_card.funding as payment_method_funding,\n    {% endif %}\n\n    charge.charge_id,\n    charge.payment_intent_id,\n    charge.created_at as charge_created_at,\n    cards.brand as card_brand,\n    cards.funding as card_funding,\n    cards.country as card_country,\n    payout.payout_id,\n    payout.arrival_date as payout_expected_arrival_date,\n    payout.status as payout_status,\n    payout.type as payout_type,\n    payout.description as payout_description,\n    refund.reason as refund_reason\nfrom balance_transaction\n\nleft join charge \n    on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer \n    on charge.customer_id = customer.customer_id\nleft join payment_intent \n    on charge.payment_intent_id = payment_intent.payment_intent_id\n\n{% if var('using_payment_method', True) %}\nleft join payment_method \n    on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join payment_method_card \n    on payment_method_card.payment_method_id = payment_method.payment_method_id\n{% endif %}\n\nleft join cards \n    on charge.card_id = cards.card_id\nleft join payout \n    on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund \n    on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge \n    on refund.charge_id = refund_charge.charge_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.dateadd"], "nodes": ["model.stripe_source.stg_stripe__balance_transaction", "model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__payment_intent", "model.stripe_source.stg_stripe__card", "model.stripe_source.stg_stripe__payout", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__payment_method", "model.stripe_source.stg_stripe__payment_method_card", "model.stripe_source.stg_stripe__refund"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe", "fqn": ["stripe", "stripe__balance_transactions"], "unique_id": "model.stripe.stripe__balance_transactions", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "stripe__balance_transactions.sql", "original_file_path": "models/stripe__balance_transactions.sql", "name": "stripe__balance_transactions", "alias": "stripe__balance_transactions", "checksum": {"name": "sha256", "checksum": "f83fc8596d10f937f3f25b5cb9ff302ad5841e380ea74b31f17e49ef7b00f49f"}, "tags": [], "refs": [["stg_stripe__balance_transaction"], ["stg_stripe__charge"], ["stg_stripe__payment_intent"], ["stg_stripe__card"], ["stg_stripe__payout"], ["stg_stripe__customer"], ["stg_stripe__payment_method"], ["stg_stripe__payment_method_card"], ["stg_stripe__refund"]], "sources": [], "metrics": [], "description": "Each record represents a change to your account balance, enriched with data about the transaction.", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the transaction took place", "meta": {}, "data_type": null, "quote": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fee": {"name": "fee", "description": "Fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of transaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporting_category": {"name": "reporting_category", "description": "Groupings of transactions types based on how they show in Stripe's reporting", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_facing_amount": {"name": "customer_facing_amount", "description": "The transaction amount that the customer sees.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_facing_currency": {"name": "customer_facing_currency", "description": "Three-letter ISO currency code that the customer sees.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_at": {"name": "effective_at", "description": "calendar day after available_at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer associated with the balance transaction (based on charge or refund details)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "The email the receipt was emailed to for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "The description field associated with the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "The id of the charge associated with the balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "The id of the payment intent associated with the balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_created_at": {"name": "charge_created_at", "description": "Timestamp of the charge object associated with the balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_type": {"name": "payment_method_type", "description": "The id of the payment method type associated with the balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_brand": {"name": "payment_method_brand", "description": "Card brand used for the payment method. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_funding": {"name": "payment_method_funding", "description": "Card funding type for the payment method. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_brand": {"name": "card_brand", "description": "The brand of the card associated with the balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_funding": {"name": "card_funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_country": {"name": "card_country", "description": "The country the card was issued in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payout_id": {"name": "payout_id", "description": "ID for the payout associated with this balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payout_expected_arrival_date": {"name": "payout_expected_arrival_date", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payout_status": {"name": "payout_status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payout_type": {"name": "payout_type", "description": "Whether the payout was to a bank_account or card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payout_description": {"name": "payout_description", "description": "An arbitrary string attached to the payout. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_reason": {"name": "refund_reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__balance_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1661541350.228291, "compiled_sql": "with balance_transaction as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__balance_transaction\n\n), charge as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__charge\n\n), payment_intent as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__payment_intent\n\n), cards as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__card\n\n), payout as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__payout\n\n\n), customer as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__customer\n\n\n\n), payment_method as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__payment_method\n\n), payment_method_card as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__payment_method_card\n\n\n\n), refund as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__refund\n\n)\n\nselect \n    balance_transaction.balance_transaction_id,\n    balance_transaction.created_at,\n    balance_transaction.available_on,\n    balance_transaction.currency,\n    balance_transaction.amount,\n    balance_transaction.fee,\n    balance_transaction.net,\n    balance_transaction.type,\n    case\n        when balance_transaction.type in ('charge', 'payment') then 'charge'\n        when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n        when balance_transaction.type in ('payout_cancel', 'payout_failure') then 'payout_reversal'\n        when balance_transaction.type in ('transfer', 'recipient_transfer') then 'transfer'\n        when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n        else balance_transaction.type\n    end as reporting_category,\n    balance_transaction.source,\n    balance_transaction.description,\n    case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, \n    case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n    \n\n    dateadd(\n        day,\n        1,\n        balance_transaction.available_on\n        )\n\n as effective_at,\n    coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n    charge.receipt_email,\n    customer.description as customer_description, \n\n    \n    payment_method.type as payment_method_type,\n    payment_method_card.brand as payment_method_brand,\n    payment_method_card.funding as payment_method_funding,\n    \n\n    charge.charge_id,\n    charge.payment_intent_id,\n    charge.created_at as charge_created_at,\n    cards.brand as card_brand,\n    cards.funding as card_funding,\n    cards.country as card_country,\n    payout.payout_id,\n    payout.arrival_date as payout_expected_arrival_date,\n    payout.status as payout_status,\n    payout.type as payout_type,\n    payout.description as payout_description,\n    refund.reason as refund_reason\nfrom balance_transaction\n\nleft join charge \n    on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer \n    on charge.customer_id = customer.customer_id\nleft join payment_intent \n    on charge.payment_intent_id = payment_intent.payment_intent_id\n\n\nleft join payment_method \n    on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join payment_method_card \n    on payment_method_card.payment_method_id = payment_method.payment_method_id\n\n\nleft join cards \n    on charge.card_id = cards.card_id\nleft join payout \n    on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund \n    on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge \n    on refund.charge_id = refund_charge.charge_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe.stripe__balance_transactions"}, "model.stripe.stripe__invoice_line_items": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith invoice as (\n\n    select *\n    from {{ var('invoice') }}  \n\n), charge as (\n\n    select *\n    from {{ var('charge') }}  \n\n), invoice_line_item as (\n\n    select *\n    from {{ var('invoice_line_item') }}  \n\n), customer as (\n\n    select *\n    from {{ var('customer') }}  \n\n{% if var('using_subscriptions', True) %}\n\n), subscription as (\n\n    select *\n    from {{ var('subscription') }}  \n\n), plan as (\n\n    select *\n    from {{ var('plan') }}  \n\n{% endif %}\n)\n\nselect \n    invoice.invoice_id,\n    invoice.number,\n    invoice.created_at as invoice_created_at,\n    invoice.status,\n    invoice.due_date,\n    invoice.amount_due,\n    invoice.subtotal,\n    invoice.tax,\n    invoice.total,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.attempt_count,\n    invoice.description as invoice_memo,\n    invoice_line_item.unique_id  as invoice_line_item_id,\n    invoice_line_item.description as line_item_desc,\n    invoice_line_item.amount as line_item_amount,\n    invoice_line_item.quantity,\n    invoice_line_item.period_start,\n    invoice_line_item.period_end,\n    charge.balance_transaction_id,\n    charge.amount as charge_amount, \n    charge.status as charge_status,\n    charge.created_at as charge_created_at,\n    customer.description as customer_description,\n    customer.email as customer_email,\n    customer.customer_id\n\n    {% if var('using_subscriptions', True) %}\n    ,subscription.subscription_id,\n    subscription.billing as subscription_billing,\n    subscription.start_date as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n    plan.plan_id,\n    plan.is_active as plan_is_active,\n    plan.amount as plan_amount,\n    plan.plan_interval as plan_interval,\n    plan.interval_count as plan_interval_count,\n    plan.nickname as plan_nickname,\n    plan.product_id as plan_product_id\n    {% endif %}\n    \nfrom invoice\n\nleft join charge \n    on charge.charge_id = invoice.charge_id\nleft join invoice_line_item \n    on invoice.invoice_id = invoice_line_item.invoice_id\n\n{% if var('using_subscriptions', True) %}\nleft join subscription \n    on invoice_line_item.subscription_id = subscription.subscription_id\nleft join plan \n    on invoice_line_item.plan_id = plan.plan_id\n{% endif %}\n\nleft join customer \n    on invoice.customer_id = customer.customer_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__subscription", "model.stripe_source.stg_stripe__plan"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe", "fqn": ["stripe", "stripe__invoice_line_items"], "unique_id": "model.stripe.stripe__invoice_line_items", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "stripe__invoice_line_items.sql", "original_file_path": "models/stripe__invoice_line_items.sql", "name": "stripe__invoice_line_items", "alias": "stripe__invoice_line_items", "checksum": {"name": "sha256", "checksum": "5cbe6790dce78f8c60a9bd4408d9bbef3d3d4e65bcdbdfedd2e941d2c222aee2"}, "tags": [], "refs": [["stg_stripe__invoice"], ["stg_stripe__charge"], ["stg_stripe__invoice_line_item"], ["stg_stripe__customer"], ["stg_stripe__subscription"], ["stg_stripe__plan"]], "sources": [], "metrics": [], "description": "Each record represents an invoice line item, enriched with details about the associated charge, customer, subscription, and plan.", "columns": {"invoice_id": {"name": "invoice_id", "description": "The unique Identifier of the invoice object. Note invoices can have many line items, so this value can appear multiple times.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_created_at": {"name": "invoice_created_at", "description": "Timestamp of when the invoice was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date when payment for the invoice is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "The amount that the invoice is for. Because this query includes line item details, this amount may be repeated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "The amount of the invoice before discounts and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax being charged in the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total": {"name": "total", "description": "The Total after discounts and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, if any, that the customer has paid on the invoice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount of the invoice remaining to be paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_memo": {"name": "invoice_memo", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_line_item_id": {"name": "invoice_line_item_id", "description": "The unique Identifier of the invoice line object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_desc": {"name": "line_item_desc", "description": "The description of the invoice line item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_amount": {"name": "line_item_amount", "description": "The amount for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "The ID of the balance transaction object representing payment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "The amount charged to the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_status": {"name": "charge_status", "description": "The status of the charge for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_created_at": {"name": "charge_created_at", "description": "When the charge for the invoice was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "ID of the subscription this invoice relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_billing": {"name": "subscription_billing", "description": "How the subscription is billed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_ended_at": {"name": "subscription_ended_at", "description": "The end date of the subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_start": {"name": "period_start", "description": "Timestamp of the start of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_end": {"name": "period_end", "description": "Timestamp of the end of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The associated customer reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID of the plan of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_is_active": {"name": "plan_is_active", "description": "Boolean indicating if the plan is active (true) or in-active (false).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_amount": {"name": "plan_amount", "description": "The unit amount in cents to be charged, represented as a whole integer if possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_interval": {"name": "plan_interval", "description": "The frequency at which a subscription is billed. One of day, week, month or year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_interval_count": {"name": "plan_interval_count", "description": "The number of intervals between subscription billings. For example, interval_count=3 bills every 3 months.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_nickname": {"name": "plan_nickname", "description": "A brief description of the plan, hidden from customers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_product_id": {"name": "plan_product_id", "description": "Reference to the product whose pricing this plan determines.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__invoice_line_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table", "enabled": true}, "created_at": 1661541350.2476218, "compiled_sql": "\n\nwith invoice as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__invoice  \n\n), charge as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__charge  \n\n), invoice_line_item as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__invoice_line_item  \n\n), customer as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__customer  \n\n\n\n), subscription as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__subscription  \n\n), plan as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__plan  \n\n\n)\n\nselect \n    invoice.invoice_id,\n    invoice.number,\n    invoice.created_at as invoice_created_at,\n    invoice.status,\n    invoice.due_date,\n    invoice.amount_due,\n    invoice.subtotal,\n    invoice.tax,\n    invoice.total,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.attempt_count,\n    invoice.description as invoice_memo,\n    invoice_line_item.unique_id  as invoice_line_item_id,\n    invoice_line_item.description as line_item_desc,\n    invoice_line_item.amount as line_item_amount,\n    invoice_line_item.quantity,\n    invoice_line_item.period_start,\n    invoice_line_item.period_end,\n    charge.balance_transaction_id,\n    charge.amount as charge_amount, \n    charge.status as charge_status,\n    charge.created_at as charge_created_at,\n    customer.description as customer_description,\n    customer.email as customer_email,\n    customer.customer_id\n\n    \n    ,subscription.subscription_id,\n    subscription.billing as subscription_billing,\n    subscription.start_date as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n    plan.plan_id,\n    plan.is_active as plan_is_active,\n    plan.amount as plan_amount,\n    plan.plan_interval as plan_interval,\n    plan.interval_count as plan_interval_count,\n    plan.nickname as plan_nickname,\n    plan.product_id as plan_product_id\n    \n    \nfrom invoice\n\nleft join charge \n    on charge.charge_id = invoice.charge_id\nleft join invoice_line_item \n    on invoice.invoice_id = invoice_line_item.invoice_id\n\n\nleft join subscription \n    on invoice_line_item.subscription_id = subscription.subscription_id\nleft join plan \n    on invoice_line_item.plan_id = plan.plan_id\n\n\nleft join customer \n    on invoice.customer_id = customer.customer_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe.stripe__invoice_line_items"}, "model.stripe.stripe__subscription_details": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['using_invoices','using_subscriptions'])) }}\n\nwith invoice as (\n\n    select *\n    from {{ var('invoice') }}  \n\n), charge as (\n\n    select *\n    from {{ var('charge') }}  \n\n), invoice_line_item as (\n\n    select *\n    from {{ var('invoice_line_item') }}  \n\n), subscription as (\n\n    select *\n    from {{ var('subscription') }}  \n\n), customer as (\n\n    select *\n    from {{ var('customer') }}  \n\n), line_items_groups as (\n\n  select\n    invoice.invoice_id,\n    invoice.amount_due,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.created_at,\n    max(invoice_line_item.subscription_id) as subscription_id,\n    sum(invoice_line_item.amount) as total_item_amount,\n    count(distinct invoice_line_item.unique_id) as number_line_items\n  from invoice_line_item\n  join invoice \n    on invoice.invoice_id = invoice_line_item.invoice_id\n  group by 1, 2, 3, 4, 5\n\n), grouped_by_subscription as (\n\n  select\n    subscription_id,\n    count(distinct invoice_id) as number_invoices_generated,\n    sum(amount_due) as total_amount_billed,\n    sum(amount_paid) as total_amount_paid,\n    sum(amount_remaining) total_amount_remaining,\n    max(created_at) as most_recent_invoice_created_at,\n    avg(amount_due) as average_invoice_amount,\n    avg(total_item_amount) as average_line_item_amount,\n    avg(number_line_items) as avg_num_invoice_items\n  from line_items_groups\n  group by 1\n\n)\n\n\nselect\n  subscription.subscription_id,\n  subscription.customer_id,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.status,\n  subscription.start_date,\n  subscription.ended_at,\n  subscription.billing,\n  subscription.billing_cycle_anchor,\n  subscription.canceled_at,\n  subscription.created_at,\n  subscription.current_period_start,\n  subscription.current_period_end,\n  subscription.days_until_due,\n  subscription.is_cancel_at_period_end,\n  subscription.cancel_at,\n  number_invoices_generated,\n  total_amount_billed,\n  total_amount_paid,\n  total_amount_remaining,\n  most_recent_invoice_created_at,\n  average_invoice_amount,\n  average_line_item_amount,\n  avg_num_invoice_items\nfrom subscription\nleft join grouped_by_subscription \n  on subscription.subscription_id = grouped_by_subscription.subscription_id\nleft join customer \n  on subscription.customer_id = customer.customer_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__subscription", "model.stripe_source.stg_stripe__customer"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe", "fqn": ["stripe", "stripe__subscription_details"], "unique_id": "model.stripe.stripe__subscription_details", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "stripe__subscription_details.sql", "original_file_path": "models/stripe__subscription_details.sql", "name": "stripe__subscription_details", "alias": "stripe__subscription_details", "checksum": {"name": "sha256", "checksum": "beab656911688a52896404b821af9effcfc7338e7cc0ac67b020633ef6bba3d7"}, "tags": [], "refs": [["stg_stripe__invoice"], ["stg_stripe__charge"], ["stg_stripe__invoice_line_item"], ["stg_stripe__subscription"], ["stg_stripe__customer"]], "sources": [], "metrics": [], "description": "Each record represents a subscription, enriched with customer details and payment aggregations.", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique identifier for the subscription object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description of the customer who owns the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email of the customer who owns the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing": {"name": "billing", "description": "How the description is billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with cancel_at_period_end, canceled_at will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the subscription object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_cancel_at_period_end": {"name": "is_cancel_at_period_end", "description": "If the subscription has been canceled with the at_period_end flag set to true, cancel_at_period_end on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_invoices_generated": {"name": "number_invoices_generated", "description": "Number of invoices that have been generated for this subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount_billed": {"name": "total_amount_billed", "description": "The total amount that has been billed to the customer for this subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount_paid": {"name": "total_amount_paid", "description": "The total amount paid by the customer for this subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount_remaining": {"name": "total_amount_remaining", "description": "Any outstanding balance for invoices related to this subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_invoice_created_at": {"name": "most_recent_invoice_created_at", "description": "The timestamp of the most recent invoice for this subscription created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_invoice_amount": {"name": "average_invoice_amount", "description": "The average amount of invoices generated for this subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_line_item_amount": {"name": "average_line_item_amount", "description": "The average sum of the line items for invoices generated for this subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_num_invoice_items": {"name": "avg_num_invoice_items", "description": "The average number of line items for invoices generated for this subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__subscription_details.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table", "enabled": true}, "created_at": 1661541350.256209, "compiled_sql": "\n\nwith invoice as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__invoice  \n\n), charge as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__charge  \n\n), invoice_line_item as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__invoice_line_item  \n\n), subscription as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__subscription  \n\n), customer as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__customer  \n\n), line_items_groups as (\n\n  select\n    invoice.invoice_id,\n    invoice.amount_due,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.created_at,\n    max(invoice_line_item.subscription_id) as subscription_id,\n    sum(invoice_line_item.amount) as total_item_amount,\n    count(distinct invoice_line_item.unique_id) as number_line_items\n  from invoice_line_item\n  join invoice \n    on invoice.invoice_id = invoice_line_item.invoice_id\n  group by 1, 2, 3, 4, 5\n\n), grouped_by_subscription as (\n\n  select\n    subscription_id,\n    count(distinct invoice_id) as number_invoices_generated,\n    sum(amount_due) as total_amount_billed,\n    sum(amount_paid) as total_amount_paid,\n    sum(amount_remaining) total_amount_remaining,\n    max(created_at) as most_recent_invoice_created_at,\n    avg(amount_due) as average_invoice_amount,\n    avg(total_item_amount) as average_line_item_amount,\n    avg(number_line_items) as avg_num_invoice_items\n  from line_items_groups\n  group by 1\n\n)\n\n\nselect\n  subscription.subscription_id,\n  subscription.customer_id,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.status,\n  subscription.start_date,\n  subscription.ended_at,\n  subscription.billing,\n  subscription.billing_cycle_anchor,\n  subscription.canceled_at,\n  subscription.created_at,\n  subscription.current_period_start,\n  subscription.current_period_end,\n  subscription.days_until_due,\n  subscription.is_cancel_at_period_end,\n  subscription.cancel_at,\n  number_invoices_generated,\n  total_amount_billed,\n  total_amount_paid,\n  total_amount_remaining,\n  most_recent_invoice_created_at,\n  average_invoice_amount,\n  average_line_item_amount,\n  avg_num_invoice_items\nfrom subscription\nleft join grouped_by_subscription \n  on subscription.subscription_id = grouped_by_subscription.subscription_id\nleft join customer \n  on subscription.customer_id = customer.customer_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe.stripe__subscription_details"}, "model.stripe.stripe__subscription_line_items": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['using_invoices','using_subscriptions'])) }}\n\n\nwith line_items as (\n\n  select *\n  from {{ ref('stripe__invoice_line_items') }}  \n  where subscription_id is not null\n\n)\n\nselect *\nfrom line_items", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.stripe.stripe__invoice_line_items"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe", "fqn": ["stripe", "stripe__subscription_line_items"], "unique_id": "model.stripe.stripe__subscription_line_items", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "stripe__subscription_line_items.sql", "original_file_path": "models/stripe__subscription_line_items.sql", "name": "stripe__subscription_line_items", "alias": "stripe__subscription_line_items", "checksum": {"name": "sha256", "checksum": "36aa60d6867759f83f3883c00c5d3019145646e1b7cff6ae44bde1351e0a4b80"}, "tags": [], "refs": [["stripe__invoice_line_items"]], "sources": [], "metrics": [], "description": "Each record represents a subscription invoice line item, enriched with details about the associated charge, customer, subscription, and plan. Use this table as the starting point for your company-specific churn and MRR calculations.", "columns": {"invoice_id": {"name": "invoice_id", "description": "The unique Identifier of the invoice object. Note invoices can have many line items, so this value can appear multiple times.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_created_at": {"name": "invoice_created_at", "description": "Timestamp of when the invoice was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date when payment for the invoice is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "The amount that the invoice is for. Because this query includes line item details, this amount may be repeated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "The amount of the invoice before discounts and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax being charged in the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total": {"name": "total", "description": "The Total after discounts and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, if any, that the customer has paid on the invoice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount of the invoice remaining to be paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_memo": {"name": "invoice_memo", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_line_item_id": {"name": "invoice_line_item_id", "description": "The unique Identifier of the invoice line object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_desc": {"name": "line_item_desc", "description": "The description of the invoice line item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_amount": {"name": "line_item_amount", "description": "The amount for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "The ID of the balance transaction object representing payment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "The amount charged to the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_status": {"name": "charge_status", "description": "The status of the charge for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_created_at": {"name": "charge_created_at", "description": "When the charge for the invoice was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "ID of the subscription this invoice relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_billing": {"name": "subscription_billing", "description": "How the subscription is billed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_ended_at": {"name": "subscription_ended_at", "description": "The end date of the subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_start": {"name": "period_start", "description": "Timestamp of the start of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_end": {"name": "period_end", "description": "Timestamp of the end of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The associated customer reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID of the plan of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_is_active": {"name": "plan_is_active", "description": "Boolean indicating if the plan is active (true) or in-active (false).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_amount": {"name": "plan_amount", "description": "The unit amount in cents to be charged, represented as a whole integer if possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_interval": {"name": "plan_interval", "description": "The frequency at which a subscription is billed. One of day, week, month or year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_interval_count": {"name": "plan_interval_count", "description": "The number of intervals between subscription billings. For example, interval_count=3 bills every 3 months.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_nickname": {"name": "plan_nickname", "description": "A brief description of the plan, hidden from customers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_product_id": {"name": "plan_product_id", "description": "Reference to the product whose pricing this plan determines.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__subscription_line_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table", "enabled": true}, "created_at": 1661541350.252704, "compiled_sql": "\n\n\nwith line_items as (\n\n  select *\n  from prod_analytics.stripe.stripe__invoice_line_items  \n  where subscription_id is not null\n\n)\n\nselect *\nfrom line_items", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe.stripe__subscription_line_items"}, "model.stripe.stripe__monthly_overview": {"raw_sql": "with daily_overview as (\n\n    select *\n    from {{ ref('stripe__daily_overview') }}  \n\n)\n\nselect\n    {{ dbt_utils.date_trunc('month', 'date')}} as month,\n    sum(total_sales) as total_sales,\n    sum(total_refunds) as total_refunds,\n    sum(total_adjustments) as total_adjustments,\n    sum(total_other_transactions) as total_other_transactions,\n    sum(total_gross_transaction_amount) as total_gross_transaction_amount,\n    sum(total_net_transactions) as total_net_transactions,\n    sum(total_payout_fees) as total_payout_fees,\n    sum(total_gross_payout_amount) as total_gross_payout_amount,\n    sum(daily_net_activity) as monthly_net_activity,\n    sum(total_sales_count) as total_sales_count,\n    sum(total_payouts_count) as total_payouts_count,\n    sum(total_adjustments_count) as total_adjustments_count,\n    sum(total_failed_charge_count) as total_failed_charge_count,\n    sum(total_failed_charge_amount) as total_failed_charge_amount\nfrom daily_overview\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_trunc"], "nodes": ["model.stripe.stripe__daily_overview"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe", "fqn": ["stripe", "stripe__monthly_overview"], "unique_id": "model.stripe.stripe__monthly_overview", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "stripe__monthly_overview.sql", "original_file_path": "models/stripe__monthly_overview.sql", "name": "stripe__monthly_overview", "alias": "stripe__monthly_overview", "checksum": {"name": "sha256", "checksum": "c378ea72d596b76196ce441c98fc0d5f7f905a31717e6159f12a182bfd452d74"}, "tags": [], "refs": [["stripe__daily_overview"]], "sources": [], "metrics": [], "description": "Each record represents a single month, enriched with metrics about balances, payments, refunds, payouts, and other transactions.", "columns": {"month": {"name": "month", "description": "The first day of the week associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments": {"name": "total_adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_other_transactions": {"name": "total_other_transactions", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_net_transactions": {"name": "total_net_transactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payout_fees": {"name": "total_payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_payout_amount": {"name": "total_gross_payout_amount", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_net_activity": {"name": "monthly_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payouts_count": {"name": "total_payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments_count": {"name": "total_adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "Number of incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "Total amount from incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__monthly_overview.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1661541350.240289, "compiled_sql": "with daily_overview as (\n\n    select *\n    from prod_analytics.stripe.stripe__daily_overview  \n\n)\n\nselect\n    date_trunc('month', date) as month,\n    sum(total_sales) as total_sales,\n    sum(total_refunds) as total_refunds,\n    sum(total_adjustments) as total_adjustments,\n    sum(total_other_transactions) as total_other_transactions,\n    sum(total_gross_transaction_amount) as total_gross_transaction_amount,\n    sum(total_net_transactions) as total_net_transactions,\n    sum(total_payout_fees) as total_payout_fees,\n    sum(total_gross_payout_amount) as total_gross_payout_amount,\n    sum(daily_net_activity) as monthly_net_activity,\n    sum(total_sales_count) as total_sales_count,\n    sum(total_payouts_count) as total_payouts_count,\n    sum(total_adjustments_count) as total_adjustments_count,\n    sum(total_failed_charge_count) as total_failed_charge_count,\n    sum(total_failed_charge_amount) as total_failed_charge_amount\nfrom daily_overview\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe.stripe__monthly_overview"}, "model.stripe.stripe__weekly_overview": {"raw_sql": "with daily_overview as (\n\n    select *\n    from {{ ref('stripe__daily_overview') }}  \n\n)\n\nselect\n    {{ dbt_utils.date_trunc('week', 'date')}} as week,\n    sum(total_sales) as total_sales,\n    sum(total_refunds) as total_refunds,\n    sum(total_adjustments) as total_adjustments,\n    sum(total_other_transactions) as total_other_transactions,\n    sum(total_gross_transaction_amount) as total_gross_transaction_amount,\n    sum(total_net_transactions) as total_net_transactions,\n    sum(total_payout_fees) as total_payout_fees,\n    sum(total_gross_payout_amount) as total_gross_payout_amount,\n    sum(daily_net_activity) as weekly_net_activity,\n    sum(total_sales_count) as total_sales_count,\n    sum(total_payouts_count) as total_payouts_count,\n    sum(total_adjustments_count) as total_adjustments_count,\n    sum(total_failed_charge_count) as total_failed_charge_count,\n    sum(total_failed_charge_amount) as total_failed_charge_amount\nfrom daily_overview\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_trunc"], "nodes": ["model.stripe.stripe__daily_overview"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe", "fqn": ["stripe", "stripe__weekly_overview"], "unique_id": "model.stripe.stripe__weekly_overview", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "stripe__weekly_overview.sql", "original_file_path": "models/stripe__weekly_overview.sql", "name": "stripe__weekly_overview", "alias": "stripe__weekly_overview", "checksum": {"name": "sha256", "checksum": "5c79cceb23b716ec1c395f9d2283632a6bf7b11a335abf7dd22cbc437e02bf1a"}, "tags": [], "refs": [["stripe__daily_overview"]], "sources": [], "metrics": [], "description": "Each record represents a single week, enriched with metrics about balances, payments, refunds, payouts, and other transactions.", "columns": {"week": {"name": "week", "description": "The first day of the week associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments": {"name": "total_adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_other_transactions": {"name": "total_other_transactions", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_net_transactions": {"name": "total_net_transactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payout_fees": {"name": "total_payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_payout_amount": {"name": "total_gross_payout_amount", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_net_activity": {"name": "weekly_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payouts_count": {"name": "total_payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments_count": {"name": "total_adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "Number of incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "Total amount from incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__weekly_overview.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1661541350.238079, "compiled_sql": "with daily_overview as (\n\n    select *\n    from prod_analytics.stripe.stripe__daily_overview  \n\n)\n\nselect\n    date_trunc('week', date) as week,\n    sum(total_sales) as total_sales,\n    sum(total_refunds) as total_refunds,\n    sum(total_adjustments) as total_adjustments,\n    sum(total_other_transactions) as total_other_transactions,\n    sum(total_gross_transaction_amount) as total_gross_transaction_amount,\n    sum(total_net_transactions) as total_net_transactions,\n    sum(total_payout_fees) as total_payout_fees,\n    sum(total_gross_payout_amount) as total_gross_payout_amount,\n    sum(daily_net_activity) as weekly_net_activity,\n    sum(total_sales_count) as total_sales_count,\n    sum(total_payouts_count) as total_payouts_count,\n    sum(total_adjustments_count) as total_adjustments_count,\n    sum(total_failed_charge_count) as total_failed_charge_count,\n    sum(total_failed_charge_amount) as total_failed_charge_amount\nfrom daily_overview\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe.stripe__weekly_overview"}, "model.stripe.stripe__quarterly_overview": {"raw_sql": "with daily_overview as (\n\n    select *\n    from {{ ref('stripe__daily_overview') }}  \n\n)\n\nselect\n    {{ dbt_utils.date_trunc('quarter', 'date')}} as quarter,\n    sum(total_sales) as total_sales,\n    sum(total_refunds) as total_refunds,\n    sum(total_adjustments) as total_adjustments,\n    sum(total_other_transactions) as total_other_transactions,\n    sum(total_gross_transaction_amount) as total_gross_transaction_amount,\n    sum(total_net_transactions) as total_net_transactions,\n    sum(total_payout_fees) as total_payout_fees,\n    sum(total_gross_payout_amount) as total_gross_payout_amount,\n    sum(daily_net_activity) as quarterly_net_activity,\n    sum(total_sales_count) as total_sales_count,\n    sum(total_payouts_count) as total_payouts_count,\n    sum(total_adjustments_count) as total_adjustments_count,\n    sum(total_failed_charge_count) as total_failed_charge_count,\n    sum(total_failed_charge_amount) as total_failed_charge_amount\nfrom daily_overview\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_trunc"], "nodes": ["model.stripe.stripe__daily_overview"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe", "fqn": ["stripe", "stripe__quarterly_overview"], "unique_id": "model.stripe.stripe__quarterly_overview", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "stripe__quarterly_overview.sql", "original_file_path": "models/stripe__quarterly_overview.sql", "name": "stripe__quarterly_overview", "alias": "stripe__quarterly_overview", "checksum": {"name": "sha256", "checksum": "63fa38b1ffd8509c100e79e0ecdcab5a1842fa8bdc2e30cd23fb233279f4200f"}, "tags": [], "refs": [["stripe__daily_overview"]], "sources": [], "metrics": [], "description": "Each record represents a single quarter, enriched with metrics about balances, payments, refunds, payouts, and other transactions.", "columns": {"quarter": {"name": "quarter", "description": "The calendar quarter associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments": {"name": "total_adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_other_transactions": {"name": "total_other_transactions", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_net_transactions": {"name": "total_net_transactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payout_fees": {"name": "total_payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_payout_amount": {"name": "total_gross_payout_amount", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quarterly_net_activity": {"name": "quarterly_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payouts_count": {"name": "total_payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments_count": {"name": "total_adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "Number of incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "Total amount from incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__quarterly_overview.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1661541350.242518, "compiled_sql": "with daily_overview as (\n\n    select *\n    from prod_analytics.stripe.stripe__daily_overview  \n\n)\n\nselect\n    date_trunc('quarter', date) as quarter,\n    sum(total_sales) as total_sales,\n    sum(total_refunds) as total_refunds,\n    sum(total_adjustments) as total_adjustments,\n    sum(total_other_transactions) as total_other_transactions,\n    sum(total_gross_transaction_amount) as total_gross_transaction_amount,\n    sum(total_net_transactions) as total_net_transactions,\n    sum(total_payout_fees) as total_payout_fees,\n    sum(total_gross_payout_amount) as total_gross_payout_amount,\n    sum(daily_net_activity) as quarterly_net_activity,\n    sum(total_sales_count) as total_sales_count,\n    sum(total_payouts_count) as total_payouts_count,\n    sum(total_adjustments_count) as total_adjustments_count,\n    sum(total_failed_charge_count) as total_failed_charge_count,\n    sum(total_failed_charge_amount) as total_failed_charge_amount\nfrom daily_overview\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "prod_analytics.stripe.stripe__quarterly_overview"}, "model.stripe.stripe__daily_overview": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe__balance_transactions') }}  \n\n), incomplete_charges as (\n\n    select *\n    from {{ ref('int_stripe__incomplete_charges') }}  \n\n), daily_balance_transactions as (\n\n  select\n      case \n            when type = 'payout' \n            then {{ date_timezone('available_on') }}  \n            else {{ date_timezone('created_at') }} \n      end as date,\n    sum(case when type in ('charge', 'payment') \n          then amount \n          else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') \n          then amount \n          else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' \n          then amount \n          else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' \n          then amount \n          else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' \n          then amount \n          else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' \n          then net \n          else 0 end) as total_net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' \n          then fee * -1.0\n          else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' \n          then amount \n          else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' \n          then fee * -1.0 \n          else net end) as daily_net_activity,\n    sum(case when type in ('payment', 'charge') \n          then 1 \n          else 0 end) as total_sales_count,\n    sum(case when type = 'payout' \n          then 1 \n          else 0 end) as total_payouts_count,\n    count(distinct case when type = 'adjustment' \n            then coalesce(source, payout_id) \n            else null end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), daily_failed_charges as (\n\n    select\n      {{ date_timezone('created_at') }} as date,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n      daily_balance_transactions.date,\n      daily_balance_transactions.total_sales/100.0 as total_sales,\n      daily_balance_transactions.total_refunds/100.0 as total_refunds,\n      daily_balance_transactions.total_adjustments/100.0 as total_adjustments,\n      daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n      daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n      daily_balance_transactions.total_net_transactions/100.0 as total_net_transactions,\n      daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n      daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n      daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,\n      (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,\n      daily_balance_transactions.total_sales_count,\n      daily_balance_transactions.total_payouts_count,\n      daily_balance_transactions.total_adjustments_count,\n      coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n      coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom daily_balance_transactions\n\nleft join daily_failed_charges \n      on daily_balance_transactions.date = daily_failed_charges.date", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe.date_timezone"], "nodes": ["model.stripe.stripe__balance_transactions", "model.stripe.int_stripe__incomplete_charges"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe", "fqn": ["stripe", "stripe__daily_overview"], "unique_id": "model.stripe.stripe__daily_overview", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "stripe__daily_overview.sql", "original_file_path": "models/stripe__daily_overview.sql", "name": "stripe__daily_overview", "alias": "stripe__daily_overview", "checksum": {"name": "sha256", "checksum": "18d8183e5391f72657ac52ea1dca925b7fb80c798e6697e85ef438f99a9451b2"}, "tags": [], "refs": [["stripe__balance_transactions"], ["int_stripe__incomplete_charges"]], "sources": [], "metrics": [], "description": "Each record represents a single day, enriched with metrics about balances, payments, refunds, payouts, and other transactions.", "columns": {"date": {"name": "date", "description": "The date associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments": {"name": "total_adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_other_transactions": {"name": "total_other_transactions", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_net_transactions": {"name": "total_net_transactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payout_fees": {"name": "total_payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_payout_amount": {"name": "total_gross_payout_amount", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_net_activity": {"name": "daily_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_end_balance": {"name": "daily_end_balance", "description": "Account balance at the end of the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payouts_count": {"name": "total_payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments_count": {"name": "total_adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "Number of incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "Total amount from incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__daily_overview.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1661541350.235861, "compiled_sql": "with  __dbt__cte__int_stripe__incomplete_charges as (\nwith charge as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__charge\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured\n),balance_transaction_joined as (\n\n    select *\n    from prod_analytics.stripe.stripe__balance_transactions  \n\n), incomplete_charges as (\n\n    select *\n    from __dbt__cte__int_stripe__incomplete_charges  \n\n), daily_balance_transactions as (\n\n  select\n      case \n            when type = 'payout' \n            then \n\ndate_trunc('day', \n\n\n    available_on\n\n\n)  \n            else \n\ndate_trunc('day', \n\n\n    created_at\n\n\n) \n      end as date,\n    sum(case when type in ('charge', 'payment') \n          then amount \n          else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') \n          then amount \n          else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' \n          then amount \n          else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' \n          then amount \n          else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' \n          then amount \n          else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' \n          then net \n          else 0 end) as total_net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' \n          then fee * -1.0\n          else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' \n          then amount \n          else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' \n          then fee * -1.0 \n          else net end) as daily_net_activity,\n    sum(case when type in ('payment', 'charge') \n          then 1 \n          else 0 end) as total_sales_count,\n    sum(case when type = 'payout' \n          then 1 \n          else 0 end) as total_payouts_count,\n    count(distinct case when type = 'adjustment' \n            then coalesce(source, payout_id) \n            else null end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), daily_failed_charges as (\n\n    select\n      \n\ndate_trunc('day', \n\n\n    created_at\n\n\n) as date,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n      daily_balance_transactions.date,\n      daily_balance_transactions.total_sales/100.0 as total_sales,\n      daily_balance_transactions.total_refunds/100.0 as total_refunds,\n      daily_balance_transactions.total_adjustments/100.0 as total_adjustments,\n      daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n      daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n      daily_balance_transactions.total_net_transactions/100.0 as total_net_transactions,\n      daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n      daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n      daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,\n      (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,\n      daily_balance_transactions.total_sales_count,\n      daily_balance_transactions.total_payouts_count,\n      daily_balance_transactions.total_adjustments_count,\n      coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n      coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom daily_balance_transactions\n\nleft join daily_failed_charges \n      on daily_balance_transactions.date = daily_failed_charges.date", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.stripe.int_stripe__incomplete_charges", "sql": " __dbt__cte__int_stripe__incomplete_charges as (\nwith charge as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__charge\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured\n)"}], "relation_name": "prod_analytics.stripe.stripe__daily_overview"}, "model.stripe.int_stripe__incomplete_charges": {"raw_sql": "with charge as (\n\n    select *\n    from {{ var('charge')}}\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.stripe_source.stg_stripe__charge"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe", "fqn": ["stripe", "intermediate", "int_stripe__incomplete_charges"], "unique_id": "model.stripe.int_stripe__incomplete_charges", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "intermediate/int_stripe__incomplete_charges.sql", "original_file_path": "models/intermediate/int_stripe__incomplete_charges.sql", "name": "int_stripe__incomplete_charges", "alias": "int_stripe__incomplete_charges", "checksum": {"name": "sha256", "checksum": "1509eb2b4f4506ce3dc992428763a440b9144e4ea95d82f7f7cc530df9f2d469"}, "tags": [], "refs": [["stg_stripe__charge"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe/models/intermediate/int_stripe__incomplete_charges.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "ephemeral"}, "created_at": 1661541349.640481, "compiled_sql": "with charge as (\n\n    select *\n    from prod_analytics.stripe_source.stg_stripe__charge\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_pipeline_stage_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal_pipeline_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "name": "unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id", "alias": "unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__deal_pipeline_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.665049, "compiled_sql": "\n    \n    \n\nselect\n    deal_pipeline_stage_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__deal_pipeline_stage\nwhere deal_pipeline_stage_id is not null\ngroup by deal_pipeline_stage_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deal_pipeline_stage_id", "file_key_name": "models.stg_hubspot__deal_pipeline_stage"}, "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "deal_pipeline_stage_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal_pipeline_stage')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"]}, "config": {"enabled": true, "alias": "not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b.sql", "original_file_path": "models/stg_hubspot__deal.yml", "name": "not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id", "alias": "not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__deal_pipeline_stage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_hubspot__deal_pip_5a707b4fbec8bec07f54d0383d90ea2b"}, "created_at": 1661541349.666199, "compiled_sql": "\n    \n    \n\n\n\nselect deal_pipeline_stage_id\nfrom prod_analytics.hubspot_source.stg_hubspot__deal_pipeline_stage\nwhere deal_pipeline_stage_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deal_pipeline_stage_id", "file_key_name": "models.stg_hubspot__deal_pipeline_stage"}, "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_pipeline_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal_pipeline')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__deal_pipeline_deal_pipeline_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__deal_pipeline_deal_pipeline_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "name": "unique_stg_hubspot__deal_pipeline_deal_pipeline_id", "alias": "unique_stg_hubspot__deal_pipeline_deal_pipeline_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__deal_pipeline"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/unique_stg_hubspot__deal_pipeline_deal_pipeline_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.667279, "compiled_sql": "\n    \n    \n\nselect\n    deal_pipeline_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__deal_pipeline\nwhere deal_pipeline_id is not null\ngroup by deal_pipeline_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deal_pipeline_id", "file_key_name": "models.stg_hubspot__deal_pipeline"}, "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "deal_pipeline_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal_pipeline')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal_pipeline"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__deal_pipeline_deal_pipeline_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "name": "not_null_stg_hubspot__deal_pipeline_deal_pipeline_id", "alias": "not_null_stg_hubspot__deal_pipeline_deal_pipeline_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__deal_pipeline"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.668146, "compiled_sql": "\n    \n    \n\n\n\nselect deal_pipeline_id\nfrom prod_analytics.hubspot_source.stg_hubspot__deal_pipeline\nwhere deal_pipeline_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deal_pipeline_id", "file_key_name": "models.stg_hubspot__deal_pipeline"}, "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "deal_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__deal_deal_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__deal_deal_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "name": "not_null_stg_hubspot__deal_deal_id", "alias": "not_null_stg_hubspot__deal_deal_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__deal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/not_null_stg_hubspot__deal_deal_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.669002, "compiled_sql": "\n    \n    \n\n\n\nselect deal_id\nfrom prod_analytics.hubspot_source.stg_hubspot__deal\nwhere deal_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deal_id", "file_key_name": "models.stg_hubspot__deal"}, "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_id", "model": "{{ get_where_subquery(ref('stg_hubspot__deal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__deal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__deal_deal_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__deal_deal_id.sql", "original_file_path": "models/stg_hubspot__deal.yml", "name": "unique_stg_hubspot__deal_deal_id", "alias": "unique_stg_hubspot__deal_deal_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__deal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__deal.yml/unique_stg_hubspot__deal_deal_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.669986, "compiled_sql": "\n    \n    \n\nselect\n    deal_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__deal\nwhere deal_id is not null\ngroup by deal_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deal_id", "file_key_name": "models.stg_hubspot__deal"}, "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('stg_hubspot__contact_list')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__contact_list_contact_list_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__contact_list_contact_list_id.sql", "original_file_path": "models/stg_hubspot__contact.yml", "name": "unique_stg_hubspot__contact_list_contact_list_id", "alias": "unique_stg_hubspot__contact_list_contact_list_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__contact_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.yml/unique_stg_hubspot__contact_list_contact_list_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.6787572, "compiled_sql": "\n    \n    \n\nselect\n    contact_list_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__contact_list\nwhere contact_list_id is not null\ngroup by contact_list_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contact_list_id", "file_key_name": "models.stg_hubspot__contact_list"}, "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('stg_hubspot__contact_list')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__contact_list"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__contact_list_contact_list_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__contact_list_contact_list_id.sql", "original_file_path": "models/stg_hubspot__contact.yml", "name": "not_null_stg_hubspot__contact_list_contact_list_id", "alias": "not_null_stg_hubspot__contact_list_contact_list_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__contact_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.yml/not_null_stg_hubspot__contact_list_contact_list_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.679755, "compiled_sql": "\n    \n    \n\n\n\nselect contact_list_id\nfrom prod_analytics.hubspot_source.stg_hubspot__contact_list\nwhere contact_list_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contact_list_id", "file_key_name": "models.stg_hubspot__contact_list"}, "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('stg_hubspot__contact')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__contact"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__contact_contact_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__contact_contact_id.sql", "original_file_path": "models/stg_hubspot__contact.yml", "name": "unique_stg_hubspot__contact_contact_id", "alias": "unique_stg_hubspot__contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.yml/unique_stg_hubspot__contact_contact_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.68063, "compiled_sql": "\n    \n    \n\nselect\n    contact_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__contact\nwhere contact_id is not null\ngroup by contact_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contact_id", "file_key_name": "models.stg_hubspot__contact"}, "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('stg_hubspot__contact')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__contact"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__contact_contact_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__contact_contact_id.sql", "original_file_path": "models/stg_hubspot__contact.yml", "name": "not_null_stg_hubspot__contact_contact_id", "alias": "not_null_stg_hubspot__contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__contact.yml/not_null_stg_hubspot__contact_contact_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.681613, "compiled_sql": "\n    \n    \n\n\n\nselect contact_id\nfrom prod_analytics.hubspot_source.stg_hubspot__contact\nwhere contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contact_id", "file_key_name": "models.stg_hubspot__contact"}, "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_bounce')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_bounce"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_bounce_event_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_event_bounce_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_event_bounce_event_id", "alias": "unique_stg_hubspot__email_event_bounce_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_bounce"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_bounce_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.699189, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_bounce\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_bounce"}, "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_bounce')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_bounce"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_bounce_event_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_event_bounce_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_event_bounce_event_id", "alias": "not_null_stg_hubspot__email_event_bounce_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_bounce"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_bounce_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.700219, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_bounce\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_bounce"}, "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_click')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_click"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_click_event_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_event_click_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_event_click_event_id", "alias": "unique_stg_hubspot__email_event_click_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_click"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_click_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.701227, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_click\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_click"}, "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_click')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_click"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_click_event_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_event_click_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_event_click_event_id", "alias": "not_null_stg_hubspot__email_event_click_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_click"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_click_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.702076, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_click\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_click"}, "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_deferred')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_deferred"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_deferred_event_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_event_deferred_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_event_deferred_event_id", "alias": "unique_stg_hubspot__email_event_deferred_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_deferred"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_deferred_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.702924, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_deferred\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_deferred"}, "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_deferred')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_deferred"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_deferred_event_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_event_deferred_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_event_deferred_event_id", "alias": "not_null_stg_hubspot__email_event_deferred_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_deferred"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_deferred_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.703915, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_deferred\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_deferred"}, "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_delivered')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_delivered"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_delivered_event_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_event_delivered_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_event_delivered_event_id", "alias": "unique_stg_hubspot__email_event_delivered_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_delivered"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_delivered_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.7047439, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_delivered\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_delivered"}, "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_delivered')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_delivered"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_delivered_event_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_event_delivered_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_event_delivered_event_id", "alias": "not_null_stg_hubspot__email_event_delivered_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_delivered"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_delivered_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.705583, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_delivered\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_delivered"}, "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_dropped')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_dropped"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_dropped_event_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_event_dropped_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_event_dropped_event_id", "alias": "unique_stg_hubspot__email_event_dropped_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_dropped"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_dropped_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.7064161, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_dropped\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_dropped"}, "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_dropped')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_dropped"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_dropped_event_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_event_dropped_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_event_dropped_event_id", "alias": "not_null_stg_hubspot__email_event_dropped_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_dropped"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_dropped_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.707401, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_dropped\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_dropped"}, "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_forward')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_forward_event_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_event_forward_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_event_forward_event_id", "alias": "unique_stg_hubspot__email_event_forward_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_forward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.708241, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_forward"}, "test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_forward')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_forward_event_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_event_forward_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_event_forward_event_id", "alias": "not_null_stg_hubspot__email_event_forward_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_forward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.7090719, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_forward"}, "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_open')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_open"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_open_event_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_event_open_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_event_open_event_id", "alias": "unique_stg_hubspot__email_event_open_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_open"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_open_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.710078, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_open\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_open"}, "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_open')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_open"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_open_event_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_event_open_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_event_open_event_id", "alias": "not_null_stg_hubspot__email_event_open_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_open"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_open_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.710908, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_open\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_open"}, "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_print')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_print_event_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_event_print_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_event_print_event_id", "alias": "unique_stg_hubspot__email_event_print_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_print"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.711736, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_print"}, "test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_print')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_print_event_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_event_print_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_event_print_event_id", "alias": "not_null_stg_hubspot__email_event_print_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_print"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.712547, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_print"}, "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_sent')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_sent"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_sent_event_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_event_sent_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_event_sent_event_id", "alias": "unique_stg_hubspot__email_event_sent_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_sent"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_sent_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.713567, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_sent\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_sent"}, "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_sent')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_sent"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_sent_event_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_event_sent_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_event_sent_event_id", "alias": "not_null_stg_hubspot__email_event_sent_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_sent"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_sent_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.714389, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_sent\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_sent"}, "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_spam_report')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_spam_report_event_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_event_spam_report_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_event_spam_report_event_id", "alias": "unique_stg_hubspot__email_event_spam_report_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_spam_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.715203, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_spam_report"}, "test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_spam_report')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_spam_report_event_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_event_spam_report_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_event_spam_report_event_id", "alias": "not_null_stg_hubspot__email_event_spam_report_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_spam_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.716182, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_spam_report"}, "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_status_change')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_status_change"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_status_change_event_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_event_status_change_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_event_status_change_event_id", "alias": "unique_stg_hubspot__email_event_status_change_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_status_change"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_status_change_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.7170181, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_status_change\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_status_change"}, "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event_status_change')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event_status_change"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_status_change_event_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_event_status_change_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_event_status_change_event_id", "alias": "not_null_stg_hubspot__email_event_status_change_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event_status_change"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_status_change_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.717847, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event_status_change\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event_status_change"}, "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_event_event_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_event_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_event_event_id", "alias": "unique_stg_hubspot__email_event_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_event_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.718671, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event"}, "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_event')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_event"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_event_event_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_event_event_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_event_event_id", "alias": "not_null_stg_hubspot__email_event_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_event"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_event_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.71979, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot_source.stg_hubspot__email_event\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.stg_hubspot__email_event"}, "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "email_campaign_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_campaign')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_campaign"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__email_campaign_email_campaign_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__email_campaign_email_campaign_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "unique_stg_hubspot__email_campaign_email_campaign_id", "alias": "unique_stg_hubspot__email_campaign_email_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_campaign"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/unique_stg_hubspot__email_campaign_email_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.720612, "compiled_sql": "\n    \n    \n\nselect\n    email_campaign_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__email_campaign\nwhere email_campaign_id is not null\ngroup by email_campaign_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_campaign_id", "file_key_name": "models.stg_hubspot__email_campaign"}, "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_campaign_id", "model": "{{ get_where_subquery(ref('stg_hubspot__email_campaign')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__email_campaign"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__email_campaign_email_campaign_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__email_campaign_email_campaign_id.sql", "original_file_path": "models/stg_hubspot__email.yml", "name": "not_null_stg_hubspot__email_campaign_email_campaign_id", "alias": "not_null_stg_hubspot__email_campaign_email_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__email_campaign"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__email.yml/not_null_stg_hubspot__email_campaign_email_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.7214239, "compiled_sql": "\n    \n    \n\n\n\nselect email_campaign_id\nfrom prod_analytics.hubspot_source.stg_hubspot__email_campaign\nwhere email_campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_campaign_id", "file_key_name": "models.stg_hubspot__email_campaign"}, "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_call_engagement_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__engagement_call_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "name": "not_null_stg_hubspot__engagement_call_engagement_id", "alias": "not_null_stg_hubspot__engagement_call_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__engagement_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/not_null_stg_hubspot__engagement_call_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.7348711, "compiled_sql": "\n    \n    \n\n\n\nselect engagement_id\nfrom prod_analytics.hubspot_source.stg_hubspot__engagement_call\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_call"}, "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_call')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_call"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_call_engagement_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__engagement_call_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "name": "unique_stg_hubspot__engagement_call_engagement_id", "alias": "unique_stg_hubspot__engagement_call_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__engagement_call"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/unique_stg_hubspot__engagement_call_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.7359722, "compiled_sql": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__engagement_call\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_call"}, "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_email')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_email"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_email_engagement_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__engagement_email_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "name": "not_null_stg_hubspot__engagement_email_engagement_id", "alias": "not_null_stg_hubspot__engagement_email_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__engagement_email"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/not_null_stg_hubspot__engagement_email_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.736856, "compiled_sql": "\n    \n    \n\n\n\nselect engagement_id\nfrom prod_analytics.hubspot_source.stg_hubspot__engagement_email\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_email"}, "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_email')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_email"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_email_engagement_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__engagement_email_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "name": "unique_stg_hubspot__engagement_email_engagement_id", "alias": "unique_stg_hubspot__engagement_email_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__engagement_email"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/unique_stg_hubspot__engagement_email_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.737705, "compiled_sql": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__engagement_email\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_email"}, "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_meeting')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_meeting"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_meeting_engagement_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__engagement_meeting_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "name": "not_null_stg_hubspot__engagement_meeting_engagement_id", "alias": "not_null_stg_hubspot__engagement_meeting_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__engagement_meeting"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/not_null_stg_hubspot__engagement_meeting_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.738709, "compiled_sql": "\n    \n    \n\n\n\nselect engagement_id\nfrom prod_analytics.hubspot_source.stg_hubspot__engagement_meeting\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_meeting"}, "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_meeting')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_meeting"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_meeting_engagement_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__engagement_meeting_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "name": "unique_stg_hubspot__engagement_meeting_engagement_id", "alias": "unique_stg_hubspot__engagement_meeting_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__engagement_meeting"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/unique_stg_hubspot__engagement_meeting_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.7395542, "compiled_sql": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__engagement_meeting\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_meeting"}, "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_note')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_note"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_note_engagement_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__engagement_note_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "name": "not_null_stg_hubspot__engagement_note_engagement_id", "alias": "not_null_stg_hubspot__engagement_note_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__engagement_note"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/not_null_stg_hubspot__engagement_note_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.740397, "compiled_sql": "\n    \n    \n\n\n\nselect engagement_id\nfrom prod_analytics.hubspot_source.stg_hubspot__engagement_note\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_note"}, "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_note')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_note"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_note_engagement_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__engagement_note_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "name": "unique_stg_hubspot__engagement_note_engagement_id", "alias": "unique_stg_hubspot__engagement_note_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__engagement_note"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/unique_stg_hubspot__engagement_note_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.741386, "compiled_sql": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__engagement_note\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_note"}, "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_task')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_task"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_task_engagement_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__engagement_task_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "name": "not_null_stg_hubspot__engagement_task_engagement_id", "alias": "not_null_stg_hubspot__engagement_task_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__engagement_task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/not_null_stg_hubspot__engagement_task_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.742226, "compiled_sql": "\n    \n    \n\n\n\nselect engagement_id\nfrom prod_analytics.hubspot_source.stg_hubspot__engagement_task\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_task"}, "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement_task')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement_task"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_task_engagement_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__engagement_task_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "name": "unique_stg_hubspot__engagement_task_engagement_id", "alias": "unique_stg_hubspot__engagement_task_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__engagement_task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/unique_stg_hubspot__engagement_task_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.743059, "compiled_sql": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__engagement_task\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement_task"}, "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__engagement_engagement_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__engagement_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "name": "not_null_stg_hubspot__engagement_engagement_id", "alias": "not_null_stg_hubspot__engagement_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__engagement"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/not_null_stg_hubspot__engagement_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.7438889, "compiled_sql": "\n    \n    \n\n\n\nselect engagement_id\nfrom prod_analytics.hubspot_source.stg_hubspot__engagement\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement"}, "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('stg_hubspot__engagement')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__engagement"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__engagement_engagement_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__engagement_engagement_id.sql", "original_file_path": "models/stg_hubspot__engagement.yml", "name": "unique_stg_hubspot__engagement_engagement_id", "alias": "unique_stg_hubspot__engagement_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__engagement"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__engagement.yml/unique_stg_hubspot__engagement_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.7449012, "compiled_sql": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__engagement\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.stg_hubspot__engagement"}, "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ticket_id", "model": "{{ get_where_subquery(ref('stg_hubspot__ticket')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__ticket_ticket_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__ticket_ticket_id.sql", "original_file_path": "models/stg_hubspot__ticket.yml", "name": "unique_stg_hubspot__ticket_ticket_id", "alias": "unique_stg_hubspot__ticket_ticket_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__ticket"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.754831, "column_name": "ticket_id", "file_key_name": "models.stg_hubspot__ticket"}, "test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticket_id", "model": "{{ get_where_subquery(ref('stg_hubspot__ticket')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__ticket_ticket_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__ticket_ticket_id.sql", "original_file_path": "models/stg_hubspot__ticket.yml", "name": "not_null_stg_hubspot__ticket_ticket_id", "alias": "not_null_stg_hubspot__ticket_ticket_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__ticket"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.755828, "column_name": "ticket_id", "file_key_name": "models.stg_hubspot__ticket"}, "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('stg_hubspot__company')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__company"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "unique_stg_hubspot__company_company_id"], "unique_id": "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "unique_stg_hubspot__company_company_id.sql", "original_file_path": "models/stg_hubspot__company.yml", "name": "unique_stg_hubspot__company_company_id", "alias": "unique_stg_hubspot__company_company_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__company"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__company.yml/unique_stg_hubspot__company_company_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.830333, "compiled_sql": "\n    \n    \n\nselect\n    company_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot_source.stg_hubspot__company\nwhere company_id is not null\ngroup by company_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "company_id", "file_key_name": "models.stg_hubspot__company"}, "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('stg_hubspot__company')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot_source.stg_hubspot__company"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot_source", "not_null_stg_hubspot__company_company_id"], "unique_id": "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "not_null_stg_hubspot__company_company_id.sql", "original_file_path": "models/stg_hubspot__company.yml", "name": "not_null_stg_hubspot__company_company_id", "alias": "not_null_stg_hubspot__company_company_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_hubspot__company"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot_source/models/stg_hubspot__company.yml/not_null_stg_hubspot__company_company_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.831379, "compiled_sql": "\n    \n    \n\n\n\nselect company_id\nfrom prod_analytics.hubspot_source.stg_hubspot__company\nwhere company_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "company_id", "file_key_name": "models.stg_hubspot__company"}, "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation.74490569e1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["organization_id", "ugc_post_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_linkedin_pages__organization_ugc_post')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["linkedin_pages_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation"], "unique_id": "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation.74490569e1", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation", "alias": "dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__organization_ugc_post"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d8f0ceef64ff91866c8662e74ba8d885"}, "created_at": 1661541349.863874, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        organization_id, ugc_post_id, source_relation\n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post\n    group by organization_id, ugc_post_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_pages__organization_ugc_post"}, "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation.edd32b54a1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["organization_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_linkedin_pages__organization')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__organization"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["linkedin_pages_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation"], "unique_id": "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation.edd32b54a1", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation", "alias": "dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__organization"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e9c116b635a76ad3de9ba0935f0329b0"}, "created_at": 1661541349.871041, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        organization_id, source_relation\n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__organization\n    group by organization_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_pages__organization"}, "test.linkedin_pages_source.not_null_stg_linkedin_pages__share_statistic_organization_entity_urn.150c878c76": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_entity_urn", "model": "{{ get_where_subquery(ref('stg_linkedin_pages__share_statistic')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic"]}, "config": {"enabled": true, "alias": "not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["linkedin_pages_source", "not_null_stg_linkedin_pages__share_statistic_organization_entity_urn"], "unique_id": "test.linkedin_pages_source.not_null_stg_linkedin_pages__share_statistic_organization_entity_urn.150c878c76", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "not_null_stg_linkedin_pages__share_statistic_organization_entity_urn", "alias": "not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__share_statistic"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_linkedin_pages__s_a0a97d4d6eb118704a9d13b0d3daca65"}, "created_at": 1661541349.873672, "compiled_sql": "\n    \n    \n\n\n\nselect organization_entity_urn\nfrom prod_analytics.linkedin_pages_source.stg_linkedin_pages__share_statistic\nwhere organization_entity_urn is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "organization_entity_urn", "file_key_name": "models.stg_linkedin_pages__share_statistic"}, "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation.452f64d50a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["share_statistic_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_linkedin_pages__share_statistic')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["linkedin_pages_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation"], "unique_id": "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation.452f64d50a", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation", "alias": "dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__share_statistic"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_39f61c18d550550530a0fa7324e7f252"}, "created_at": 1661541349.874618, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        share_statistic_id, source_relation\n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__share_statistic\n    group by share_statistic_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_pages__share_statistic"}, "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation.8192e4952b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ugc_post_id", "last_modified_timestamp", "source_relation"], "model": "{{ get_where_subquery(ref('stg_linkedin_pages__ugc_post_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["linkedin_pages_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation"], "unique_id": "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation.8192e4952b", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation", "alias": "dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cbb76a7d9acc11d7f5018ed560c94a85"}, "created_at": 1661541349.877248, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ugc_post_id, last_modified_timestamp, source_relation\n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_history\n    group by ugc_post_id, last_modified_timestamp, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_pages__ugc_post_history"}, "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation.f629d7cf4d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ugc_post_id", "last_modified_timestamp", "source_relation"], "model": "{{ get_where_subquery(ref('stg_linkedin_pages__ugc_post_share_content_media')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["linkedin_pages_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation"], "unique_id": "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation.f629d7cf4d", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation", "alias": "dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_share_content_media"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_792dce0468953cf4a93f7bf76f853f80"}, "created_at": 1661541349.879959, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ugc_post_id, last_modified_timestamp, source_relation\n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media\n    group by ugc_post_id, last_modified_timestamp, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_pages__ugc_post_share_content_media"}, "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation.10bd19bf37": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["share_statistic_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_linkedin_pages__ugc_post_share_statistic')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["linkedin_pages_source", "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation"], "unique_id": "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation.10bd19bf37", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b.sql", "original_file_path": "models/stg_linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation", "alias": "dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_linkedin_pages__ugc_post_share_statistic"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages_source/models/stg_linkedin_pages.yml/dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2ccb4f28d8f994da4f33b939dfffd39b"}, "created_at": 1661541349.8827012, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        share_statistic_id, source_relation\n    from prod_analytics.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic\n    group by share_statistic_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_linkedin_pages__ugc_post_share_statistic"}, "test.hubspot.not_null_hubspot__deals_deal_id.bdbfe47fcd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "deal_id", "model": "{{ get_where_subquery(ref('hubspot__deals')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__deals"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "not_null_hubspot__deals_deal_id"], "unique_id": "test.hubspot.not_null_hubspot__deals_deal_id.bdbfe47fcd", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__deals_deal_id.sql", "original_file_path": "models/sales/sales.yml", "name": "not_null_hubspot__deals_deal_id", "alias": "not_null_hubspot__deals_deal_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__deals"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/sales.yml/not_null_hubspot__deals_deal_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.930633, "compiled_sql": "\n    \n    \n\n\n\nselect deal_id\nfrom prod_analytics.hubspot.hubspot__deals\nwhere deal_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deal_id", "file_key_name": "models.hubspot__deals"}, "test.hubspot.unique_hubspot__deals_deal_id.d728fe5f71": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_id", "model": "{{ get_where_subquery(ref('hubspot__deals')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__deals"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "unique_hubspot__deals_deal_id"], "unique_id": "test.hubspot.unique_hubspot__deals_deal_id.d728fe5f71", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__deals_deal_id.sql", "original_file_path": "models/sales/sales.yml", "name": "unique_hubspot__deals_deal_id", "alias": "unique_hubspot__deals_deal_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__deals"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/sales.yml/unique_hubspot__deals_deal_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.931666, "compiled_sql": "\n    \n    \n\nselect\n    deal_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__deals\nwhere deal_id is not null\ngroup by deal_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deal_id", "file_key_name": "models.hubspot__deals"}, "test.hubspot.not_null_hubspot__deal_stages_deal_stage_id.162d2d204b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "deal_stage_id", "model": "{{ get_where_subquery(ref('hubspot__deal_stages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__deal_stages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "not_null_hubspot__deal_stages_deal_stage_id"], "unique_id": "test.hubspot.not_null_hubspot__deal_stages_deal_stage_id.162d2d204b", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__deal_stages_deal_stage_id.sql", "original_file_path": "models/sales/sales.yml", "name": "not_null_hubspot__deal_stages_deal_stage_id", "alias": "not_null_hubspot__deal_stages_deal_stage_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__deal_stages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/sales.yml/not_null_hubspot__deal_stages_deal_stage_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.9326668, "compiled_sql": "\n    \n    \n\n\n\nselect deal_stage_id\nfrom prod_analytics.hubspot.hubspot__deal_stages\nwhere deal_stage_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deal_stage_id", "file_key_name": "models.hubspot__deal_stages"}, "test.hubspot.unique_hubspot__deal_stages_deal_stage_id.7fd3732373": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "deal_stage_id", "model": "{{ get_where_subquery(ref('hubspot__deal_stages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__deal_stages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "unique_hubspot__deal_stages_deal_stage_id"], "unique_id": "test.hubspot.unique_hubspot__deal_stages_deal_stage_id.7fd3732373", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__deal_stages_deal_stage_id.sql", "original_file_path": "models/sales/sales.yml", "name": "unique_hubspot__deal_stages_deal_stage_id", "alias": "unique_hubspot__deal_stages_deal_stage_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__deal_stages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/sales.yml/unique_hubspot__deal_stages_deal_stage_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.933532, "compiled_sql": "\n    \n    \n\nselect\n    deal_stage_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__deal_stages\nwhere deal_stage_id is not null\ngroup by deal_stage_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deal_stage_id", "file_key_name": "models.hubspot__deal_stages"}, "test.hubspot.unique_hubspot__companies_company_id.a58ceac3f2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('hubspot__companies')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__companies"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "unique_hubspot__companies_company_id"], "unique_id": "test.hubspot.unique_hubspot__companies_company_id.a58ceac3f2", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__companies_company_id.sql", "original_file_path": "models/sales/sales.yml", "name": "unique_hubspot__companies_company_id", "alias": "unique_hubspot__companies_company_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__companies"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/sales.yml/unique_hubspot__companies_company_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.934381, "compiled_sql": "\n    \n    \n\nselect\n    company_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__companies\nwhere company_id is not null\ngroup by company_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "company_id", "file_key_name": "models.hubspot__companies"}, "test.hubspot.not_null_hubspot__companies_company_id.687ec98e97": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "company_id", "model": "{{ get_where_subquery(ref('hubspot__companies')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__companies"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "not_null_hubspot__companies_company_id"], "unique_id": "test.hubspot.not_null_hubspot__companies_company_id.687ec98e97", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__companies_company_id.sql", "original_file_path": "models/sales/sales.yml", "name": "not_null_hubspot__companies_company_id", "alias": "not_null_hubspot__companies_company_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__companies"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/sales.yml/not_null_hubspot__companies_company_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.935393, "compiled_sql": "\n    \n    \n\n\n\nselect company_id\nfrom prod_analytics.hubspot.hubspot__companies\nwhere company_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "company_id", "file_key_name": "models.hubspot__companies"}, "test.hubspot.not_null_hubspot__engagements_engagement_id.59b32bc0d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagements')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__engagements"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "not_null_hubspot__engagements_engagement_id"], "unique_id": "test.hubspot.not_null_hubspot__engagements_engagement_id.59b32bc0d7", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__engagements_engagement_id.sql", "original_file_path": "models/sales/sales.yml", "name": "not_null_hubspot__engagements_engagement_id", "alias": "not_null_hubspot__engagements_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__engagements"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/sales.yml/not_null_hubspot__engagements_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.9362502, "compiled_sql": "\n    \n    \n\n\n\nselect engagement_id\nfrom prod_analytics.hubspot.hubspot__engagements\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagements"}, "test.hubspot.unique_hubspot__engagements_engagement_id.01d5c3ee5d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagements')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__engagements"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "unique_hubspot__engagements_engagement_id"], "unique_id": "test.hubspot.unique_hubspot__engagements_engagement_id.01d5c3ee5d", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__engagements_engagement_id.sql", "original_file_path": "models/sales/sales.yml", "name": "unique_hubspot__engagements_engagement_id", "alias": "unique_hubspot__engagements_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__engagements"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/sales.yml/unique_hubspot__engagements_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.937091, "compiled_sql": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__engagements\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagements"}, "test.hubspot.unique_hubspot__company_history_id.f1af964b1f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('hubspot__company_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__company_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "history", "unique_hubspot__company_history_id"], "unique_id": "test.hubspot.unique_hubspot__company_history_id.f1af964b1f", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__company_history_id.sql", "original_file_path": "models/sales/history/history.yml", "name": "unique_hubspot__company_history_id", "alias": "unique_hubspot__company_history_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__company_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/history/history.yml/unique_hubspot__company_history_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.941428, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__company_history\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.hubspot__company_history"}, "test.hubspot.not_null_hubspot__company_history_id.33035793ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('hubspot__company_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__company_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "history", "not_null_hubspot__company_history_id"], "unique_id": "test.hubspot.not_null_hubspot__company_history_id.33035793ff", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__company_history_id.sql", "original_file_path": "models/sales/history/history.yml", "name": "not_null_hubspot__company_history_id", "alias": "not_null_hubspot__company_history_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__company_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/history/history.yml/not_null_hubspot__company_history_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.942486, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom prod_analytics.hubspot.hubspot__company_history\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.hubspot__company_history"}, "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to.654ef778b1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["company_id", "field_name", "valid_to"], "model": "{{ get_where_subquery(ref('hubspot__company_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__company_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "history", "dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to"], "unique_id": "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to.654ef778b1", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3.sql", "original_file_path": "models/sales/history/history.yml", "name": "dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to", "alias": "dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__company_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/history/history.yml/dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_585970f793ee6c11d8a52b8643ed55e3"}, "created_at": 1661541349.943373, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        company_id, field_name, valid_to\n    from prod_analytics.hubspot.hubspot__company_history\n    group by company_id, field_name, valid_to\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.hubspot__company_history"}, "test.hubspot.unique_hubspot__deal_history_id.1cb93fca79": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('hubspot__deal_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__deal_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "history", "unique_hubspot__deal_history_id"], "unique_id": "test.hubspot.unique_hubspot__deal_history_id.1cb93fca79", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__deal_history_id.sql", "original_file_path": "models/sales/history/history.yml", "name": "unique_hubspot__deal_history_id", "alias": "unique_hubspot__deal_history_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__deal_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/history/history.yml/unique_hubspot__deal_history_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.946285, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__deal_history\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.hubspot__deal_history"}, "test.hubspot.not_null_hubspot__deal_history_id.a1c6cd6a75": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('hubspot__deal_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__deal_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "history", "not_null_hubspot__deal_history_id"], "unique_id": "test.hubspot.not_null_hubspot__deal_history_id.a1c6cd6a75", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__deal_history_id.sql", "original_file_path": "models/sales/history/history.yml", "name": "not_null_hubspot__deal_history_id", "alias": "not_null_hubspot__deal_history_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__deal_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/history/history.yml/not_null_hubspot__deal_history_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.947156, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom prod_analytics.hubspot.hubspot__deal_history\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.hubspot__deal_history"}, "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to.f55c724804": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["deal_id", "field_name", "valid_to"], "model": "{{ get_where_subquery(ref('hubspot__deal_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__deal_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "history", "dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to"], "unique_id": "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to.f55c724804", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec.sql", "original_file_path": "models/sales/history/history.yml", "name": "dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to", "alias": "dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__deal_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/history/history.yml/dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7e0520757371651bf254cedb30cf9fec"}, "created_at": 1661541349.9481878, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        deal_id, field_name, valid_to\n    from prod_analytics.hubspot.hubspot__deal_history\n    group by deal_id, field_name, valid_to\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.hubspot__deal_history"}, "test.hubspot.not_null_hubspot__engagement_calls_engagement_id.00f8d8357f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_calls')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__engagement_calls"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "engagement_events", "not_null_hubspot__engagement_calls_engagement_id"], "unique_id": "test.hubspot.not_null_hubspot__engagement_calls_engagement_id.00f8d8357f", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__engagement_calls_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "name": "not_null_hubspot__engagement_calls_engagement_id", "alias": "not_null_hubspot__engagement_calls_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__engagement_calls"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/engagement_events.yml/not_null_hubspot__engagement_calls_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.964669, "compiled_sql": "\n    \n    \n\n\n\nselect engagement_id\nfrom prod_analytics.hubspot.hubspot__engagement_calls\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_calls"}, "test.hubspot.unique_hubspot__engagement_calls_engagement_id.972572ce6c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_calls')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__engagement_calls"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "engagement_events", "unique_hubspot__engagement_calls_engagement_id"], "unique_id": "test.hubspot.unique_hubspot__engagement_calls_engagement_id.972572ce6c", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__engagement_calls_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "name": "unique_hubspot__engagement_calls_engagement_id", "alias": "unique_hubspot__engagement_calls_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__engagement_calls"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/engagement_events.yml/unique_hubspot__engagement_calls_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.9656892, "compiled_sql": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__engagement_calls\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_calls"}, "test.hubspot.not_null_hubspot__engagement_emails_engagement_id.13a39d1e09": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_emails')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__engagement_emails"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "engagement_events", "not_null_hubspot__engagement_emails_engagement_id"], "unique_id": "test.hubspot.not_null_hubspot__engagement_emails_engagement_id.13a39d1e09", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__engagement_emails_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "name": "not_null_hubspot__engagement_emails_engagement_id", "alias": "not_null_hubspot__engagement_emails_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__engagement_emails"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/engagement_events.yml/not_null_hubspot__engagement_emails_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.9666939, "compiled_sql": "\n    \n    \n\n\n\nselect engagement_id\nfrom prod_analytics.hubspot.hubspot__engagement_emails\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_emails"}, "test.hubspot.unique_hubspot__engagement_emails_engagement_id.b18e2acbde": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_emails')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__engagement_emails"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "engagement_events", "unique_hubspot__engagement_emails_engagement_id"], "unique_id": "test.hubspot.unique_hubspot__engagement_emails_engagement_id.b18e2acbde", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__engagement_emails_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "name": "unique_hubspot__engagement_emails_engagement_id", "alias": "unique_hubspot__engagement_emails_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__engagement_emails"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/engagement_events.yml/unique_hubspot__engagement_emails_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.967551, "compiled_sql": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__engagement_emails\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_emails"}, "test.hubspot.not_null_hubspot__engagement_meetings_engagement_id.83a791c3df": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_meetings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__engagement_meetings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "engagement_events", "not_null_hubspot__engagement_meetings_engagement_id"], "unique_id": "test.hubspot.not_null_hubspot__engagement_meetings_engagement_id.83a791c3df", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__engagement_meetings_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "name": "not_null_hubspot__engagement_meetings_engagement_id", "alias": "not_null_hubspot__engagement_meetings_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__engagement_meetings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/engagement_events.yml/not_null_hubspot__engagement_meetings_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.968412, "compiled_sql": "\n    \n    \n\n\n\nselect engagement_id\nfrom prod_analytics.hubspot.hubspot__engagement_meetings\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_meetings"}, "test.hubspot.unique_hubspot__engagement_meetings_engagement_id.3098aabcd1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_meetings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__engagement_meetings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "engagement_events", "unique_hubspot__engagement_meetings_engagement_id"], "unique_id": "test.hubspot.unique_hubspot__engagement_meetings_engagement_id.3098aabcd1", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__engagement_meetings_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "name": "unique_hubspot__engagement_meetings_engagement_id", "alias": "unique_hubspot__engagement_meetings_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__engagement_meetings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/engagement_events.yml/unique_hubspot__engagement_meetings_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.969412, "compiled_sql": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__engagement_meetings\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_meetings"}, "test.hubspot.not_null_hubspot__engagement_notes_engagement_id.76434ac965": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_notes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__engagement_notes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "engagement_events", "not_null_hubspot__engagement_notes_engagement_id"], "unique_id": "test.hubspot.not_null_hubspot__engagement_notes_engagement_id.76434ac965", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__engagement_notes_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "name": "not_null_hubspot__engagement_notes_engagement_id", "alias": "not_null_hubspot__engagement_notes_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__engagement_notes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/engagement_events.yml/not_null_hubspot__engagement_notes_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.970266, "compiled_sql": "\n    \n    \n\n\n\nselect engagement_id\nfrom prod_analytics.hubspot.hubspot__engagement_notes\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_notes"}, "test.hubspot.unique_hubspot__engagement_notes_engagement_id.c9864b5001": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_notes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__engagement_notes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "engagement_events", "unique_hubspot__engagement_notes_engagement_id"], "unique_id": "test.hubspot.unique_hubspot__engagement_notes_engagement_id.c9864b5001", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__engagement_notes_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "name": "unique_hubspot__engagement_notes_engagement_id", "alias": "unique_hubspot__engagement_notes_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__engagement_notes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/engagement_events.yml/unique_hubspot__engagement_notes_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.9711192, "compiled_sql": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__engagement_notes\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_notes"}, "test.hubspot.not_null_hubspot__engagement_tasks_engagement_id.67738794ae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_tasks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__engagement_tasks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "engagement_events", "not_null_hubspot__engagement_tasks_engagement_id"], "unique_id": "test.hubspot.not_null_hubspot__engagement_tasks_engagement_id.67738794ae", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__engagement_tasks_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "name": "not_null_hubspot__engagement_tasks_engagement_id", "alias": "not_null_hubspot__engagement_tasks_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__engagement_tasks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/engagement_events.yml/not_null_hubspot__engagement_tasks_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.9719648, "compiled_sql": "\n    \n    \n\n\n\nselect engagement_id\nfrom prod_analytics.hubspot.hubspot__engagement_tasks\nwhere engagement_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_tasks"}, "test.hubspot.unique_hubspot__engagement_tasks_engagement_id.754d36b939": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "engagement_id", "model": "{{ get_where_subquery(ref('hubspot__engagement_tasks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__engagement_tasks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "sales", "engagement_events", "unique_hubspot__engagement_tasks_engagement_id"], "unique_id": "test.hubspot.unique_hubspot__engagement_tasks_engagement_id.754d36b939", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__engagement_tasks_engagement_id.sql", "original_file_path": "models/sales/engagement_events/engagement_events.yml", "name": "unique_hubspot__engagement_tasks_engagement_id", "alias": "unique_hubspot__engagement_tasks_engagement_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__engagement_tasks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/sales/engagement_events/engagement_events.yml/unique_hubspot__engagement_tasks_engagement_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.972967, "compiled_sql": "\n    \n    \n\nselect\n    engagement_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__engagement_tasks\nwhere engagement_id is not null\ngroup by engagement_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_id", "file_key_name": "models.hubspot__engagement_tasks"}, "test.hubspot.unique_hubspot__email_sends_event_id.b01306228f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_sends')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_sends"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "unique_hubspot__email_sends_event_id"], "unique_id": "test.hubspot.unique_hubspot__email_sends_event_id.b01306228f", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_sends_event_id.sql", "original_file_path": "models/marketing/marketing.yml", "name": "unique_hubspot__email_sends_event_id", "alias": "unique_hubspot__email_sends_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_sends"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/marketing.yml/unique_hubspot__email_sends_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.9924428, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__email_sends\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_sends"}, "test.hubspot.not_null_hubspot__email_sends_event_id.9fc8a8bef3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_sends')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_sends"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "not_null_hubspot__email_sends_event_id"], "unique_id": "test.hubspot.not_null_hubspot__email_sends_event_id.9fc8a8bef3", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_sends_event_id.sql", "original_file_path": "models/marketing/marketing.yml", "name": "not_null_hubspot__email_sends_event_id", "alias": "not_null_hubspot__email_sends_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_sends"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/marketing.yml/not_null_hubspot__email_sends_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.993577, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot.hubspot__email_sends\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_sends"}, "test.hubspot.unique_hubspot__email_campaigns_email_campaign_id.2470fabe62": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "email_campaign_id", "model": "{{ get_where_subquery(ref('hubspot__email_campaigns')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_campaigns"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "unique_hubspot__email_campaigns_email_campaign_id"], "unique_id": "test.hubspot.unique_hubspot__email_campaigns_email_campaign_id.2470fabe62", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_campaigns_email_campaign_id.sql", "original_file_path": "models/marketing/marketing.yml", "name": "unique_hubspot__email_campaigns_email_campaign_id", "alias": "unique_hubspot__email_campaigns_email_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_campaigns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/marketing.yml/unique_hubspot__email_campaigns_email_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.9944599, "compiled_sql": "\n    \n    \n\nselect\n    email_campaign_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__email_campaigns\nwhere email_campaign_id is not null\ngroup by email_campaign_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_campaign_id", "file_key_name": "models.hubspot__email_campaigns"}, "test.hubspot.not_null_hubspot__email_campaigns_email_campaign_id.6b2d6f43c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_campaign_id", "model": "{{ get_where_subquery(ref('hubspot__email_campaigns')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_campaigns"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "not_null_hubspot__email_campaigns_email_campaign_id"], "unique_id": "test.hubspot.not_null_hubspot__email_campaigns_email_campaign_id.6b2d6f43c0", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_campaigns_email_campaign_id.sql", "original_file_path": "models/marketing/marketing.yml", "name": "not_null_hubspot__email_campaigns_email_campaign_id", "alias": "not_null_hubspot__email_campaigns_email_campaign_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_campaigns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/marketing.yml/not_null_hubspot__email_campaigns_email_campaign_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.995318, "compiled_sql": "\n    \n    \n\n\n\nselect email_campaign_id\nfrom prod_analytics.hubspot.hubspot__email_campaigns\nwhere email_campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "email_campaign_id", "file_key_name": "models.hubspot__email_campaigns"}, "test.hubspot.unique_hubspot__contacts_contact_id.8f627121df": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('hubspot__contacts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__contacts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "unique_hubspot__contacts_contact_id"], "unique_id": "test.hubspot.unique_hubspot__contacts_contact_id.8f627121df", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__contacts_contact_id.sql", "original_file_path": "models/marketing/marketing.yml", "name": "unique_hubspot__contacts_contact_id", "alias": "unique_hubspot__contacts_contact_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__contacts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/marketing.yml/unique_hubspot__contacts_contact_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.996311, "compiled_sql": "\n    \n    \n\nselect\n    contact_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__contacts\nwhere contact_id is not null\ngroup by contact_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contact_id", "file_key_name": "models.hubspot__contacts"}, "test.hubspot.not_null_hubspot__contacts_contact_id.e28e88dce3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('hubspot__contacts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__contacts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "not_null_hubspot__contacts_contact_id"], "unique_id": "test.hubspot.not_null_hubspot__contacts_contact_id.e28e88dce3", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__contacts_contact_id.sql", "original_file_path": "models/marketing/marketing.yml", "name": "not_null_hubspot__contacts_contact_id", "alias": "not_null_hubspot__contacts_contact_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__contacts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/marketing.yml/not_null_hubspot__contacts_contact_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.99715, "compiled_sql": "\n    \n    \n\n\n\nselect contact_id\nfrom prod_analytics.hubspot.hubspot__contacts\nwhere contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contact_id", "file_key_name": "models.hubspot__contacts"}, "test.hubspot.unique_hubspot__contact_lists_contact_list_id.ea9ef03bac": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('hubspot__contact_lists')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__contact_lists"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "unique_hubspot__contact_lists_contact_list_id"], "unique_id": "test.hubspot.unique_hubspot__contact_lists_contact_list_id.ea9ef03bac", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__contact_lists_contact_list_id.sql", "original_file_path": "models/marketing/marketing.yml", "name": "unique_hubspot__contact_lists_contact_list_id", "alias": "unique_hubspot__contact_lists_contact_list_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__contact_lists"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/marketing.yml/unique_hubspot__contact_lists_contact_list_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.997996, "compiled_sql": "\n    \n    \n\nselect\n    contact_list_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__contact_lists\nwhere contact_list_id is not null\ngroup by contact_list_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contact_list_id", "file_key_name": "models.hubspot__contact_lists"}, "test.hubspot.not_null_hubspot__contact_lists_contact_list_id.3bde1bb891": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('hubspot__contact_lists')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__contact_lists"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "not_null_hubspot__contact_lists_contact_list_id"], "unique_id": "test.hubspot.not_null_hubspot__contact_lists_contact_list_id.3bde1bb891", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__contact_lists_contact_list_id.sql", "original_file_path": "models/marketing/marketing.yml", "name": "not_null_hubspot__contact_lists_contact_list_id", "alias": "not_null_hubspot__contact_lists_contact_list_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__contact_lists"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/marketing.yml/not_null_hubspot__contact_lists_contact_list_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541349.998837, "compiled_sql": "\n    \n    \n\n\n\nselect contact_list_id\nfrom prod_analytics.hubspot.hubspot__contact_lists\nwhere contact_list_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contact_list_id", "file_key_name": "models.hubspot__contact_lists"}, "test.hubspot.unique_hubspot__email_event_bounce_event_id.7a1c6704e1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_bounce')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_bounce"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "unique_hubspot__email_event_bounce_event_id"], "unique_id": "test.hubspot.unique_hubspot__email_event_bounce_event_id.7a1c6704e1", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_event_bounce_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "unique_hubspot__email_event_bounce_event_id", "alias": "unique_hubspot__email_event_bounce_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_bounce"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/unique_hubspot__email_event_bounce_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.021356, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__email_event_bounce\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_bounce"}, "test.hubspot.not_null_hubspot__email_event_bounce_event_id.39d8daa6f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_bounce')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_bounce"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_bounce_event_id"], "unique_id": "test.hubspot.not_null_hubspot__email_event_bounce_event_id.39d8daa6f5", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_event_bounce_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "not_null_hubspot__email_event_bounce_event_id", "alias": "not_null_hubspot__email_event_bounce_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_bounce"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/not_null_hubspot__email_event_bounce_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.022382, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot.hubspot__email_event_bounce\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_bounce"}, "test.hubspot.unique_hubspot__email_event_clicks_event_id.60d3912846": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_clicks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_clicks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "unique_hubspot__email_event_clicks_event_id"], "unique_id": "test.hubspot.unique_hubspot__email_event_clicks_event_id.60d3912846", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_event_clicks_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "unique_hubspot__email_event_clicks_event_id", "alias": "unique_hubspot__email_event_clicks_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_clicks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/unique_hubspot__email_event_clicks_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.023409, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__email_event_clicks\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_clicks"}, "test.hubspot.not_null_hubspot__email_event_clicks_event_id.f603501ca0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_clicks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_clicks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_clicks_event_id"], "unique_id": "test.hubspot.not_null_hubspot__email_event_clicks_event_id.f603501ca0", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_event_clicks_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "not_null_hubspot__email_event_clicks_event_id", "alias": "not_null_hubspot__email_event_clicks_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_clicks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/not_null_hubspot__email_event_clicks_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.024279, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot.hubspot__email_event_clicks\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_clicks"}, "test.hubspot.unique_hubspot__email_event_deferred_event_id.bb75dcb83a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_deferred')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_deferred"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "unique_hubspot__email_event_deferred_event_id"], "unique_id": "test.hubspot.unique_hubspot__email_event_deferred_event_id.bb75dcb83a", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_event_deferred_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "unique_hubspot__email_event_deferred_event_id", "alias": "unique_hubspot__email_event_deferred_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_deferred"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/unique_hubspot__email_event_deferred_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.025126, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__email_event_deferred\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_deferred"}, "test.hubspot.not_null_hubspot__email_event_deferred_event_id.2c6decaa91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_deferred')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_deferred"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_deferred_event_id"], "unique_id": "test.hubspot.not_null_hubspot__email_event_deferred_event_id.2c6decaa91", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_event_deferred_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "not_null_hubspot__email_event_deferred_event_id", "alias": "not_null_hubspot__email_event_deferred_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_deferred"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/not_null_hubspot__email_event_deferred_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.026125, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot.hubspot__email_event_deferred\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_deferred"}, "test.hubspot.unique_hubspot__email_event_delivered_event_id.242e838cce": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_delivered')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_delivered"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "unique_hubspot__email_event_delivered_event_id"], "unique_id": "test.hubspot.unique_hubspot__email_event_delivered_event_id.242e838cce", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_event_delivered_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "unique_hubspot__email_event_delivered_event_id", "alias": "unique_hubspot__email_event_delivered_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_delivered"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/unique_hubspot__email_event_delivered_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.026963, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__email_event_delivered\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_delivered"}, "test.hubspot.not_null_hubspot__email_event_delivered_event_id.0609870be3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_delivered')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_delivered"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_delivered_event_id"], "unique_id": "test.hubspot.not_null_hubspot__email_event_delivered_event_id.0609870be3", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_event_delivered_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "not_null_hubspot__email_event_delivered_event_id", "alias": "not_null_hubspot__email_event_delivered_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_delivered"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/not_null_hubspot__email_event_delivered_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.027794, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot.hubspot__email_event_delivered\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_delivered"}, "test.hubspot.unique_hubspot__email_event_dropped_event_id.093040860b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_dropped')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_dropped"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "unique_hubspot__email_event_dropped_event_id"], "unique_id": "test.hubspot.unique_hubspot__email_event_dropped_event_id.093040860b", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_event_dropped_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "unique_hubspot__email_event_dropped_event_id", "alias": "unique_hubspot__email_event_dropped_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_dropped"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/unique_hubspot__email_event_dropped_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.028779, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__email_event_dropped\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_dropped"}, "test.hubspot.not_null_hubspot__email_event_dropped_event_id.5cfe4eeb95": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_dropped')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_dropped"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_dropped_event_id"], "unique_id": "test.hubspot.not_null_hubspot__email_event_dropped_event_id.5cfe4eeb95", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_event_dropped_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "not_null_hubspot__email_event_dropped_event_id", "alias": "not_null_hubspot__email_event_dropped_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_dropped"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/not_null_hubspot__email_event_dropped_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.029614, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot.hubspot__email_event_dropped\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_dropped"}, "test.hubspot.unique_hubspot__email_event_forward_event_id.064956aaa7": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_forward')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "unique_hubspot__email_event_forward_event_id"], "unique_id": "test.hubspot.unique_hubspot__email_event_forward_event_id.064956aaa7", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_event_forward_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "unique_hubspot__email_event_forward_event_id", "alias": "unique_hubspot__email_event_forward_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_forward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.030453, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_forward"}, "test.hubspot.not_null_hubspot__email_event_forward_event_id.417a73da08": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_forward')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_forward_event_id"], "unique_id": "test.hubspot.not_null_hubspot__email_event_forward_event_id.417a73da08", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_event_forward_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "not_null_hubspot__email_event_forward_event_id", "alias": "not_null_hubspot__email_event_forward_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_forward"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.031276, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_forward"}, "test.hubspot.unique_hubspot__email_event_opens_event_id.d7963f4eb0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_opens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_opens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "unique_hubspot__email_event_opens_event_id"], "unique_id": "test.hubspot.unique_hubspot__email_event_opens_event_id.d7963f4eb0", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_event_opens_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "unique_hubspot__email_event_opens_event_id", "alias": "unique_hubspot__email_event_opens_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_opens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/unique_hubspot__email_event_opens_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.03228, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__email_event_opens\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_opens"}, "test.hubspot.not_null_hubspot__email_event_opens_event_id.a9fe279ee1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_opens')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_opens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_opens_event_id"], "unique_id": "test.hubspot.not_null_hubspot__email_event_opens_event_id.a9fe279ee1", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_event_opens_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "not_null_hubspot__email_event_opens_event_id", "alias": "not_null_hubspot__email_event_opens_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_opens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/not_null_hubspot__email_event_opens_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.0331159, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot.hubspot__email_event_opens\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_opens"}, "test.hubspot.unique_hubspot__email_event_print_event_id.548f6cece7": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_print')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "unique_hubspot__email_event_print_event_id"], "unique_id": "test.hubspot.unique_hubspot__email_event_print_event_id.548f6cece7", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_event_print_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "unique_hubspot__email_event_print_event_id", "alias": "unique_hubspot__email_event_print_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_print"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.034183, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_print"}, "test.hubspot.not_null_hubspot__email_event_print_event_id.9dac8a147e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_print')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_print_event_id"], "unique_id": "test.hubspot.not_null_hubspot__email_event_print_event_id.9dac8a147e", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_event_print_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "not_null_hubspot__email_event_print_event_id", "alias": "not_null_hubspot__email_event_print_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_print"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.0352588, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_print"}, "test.hubspot.unique_hubspot__email_event_sent_event_id.68076270f8": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_sent')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_sent"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "unique_hubspot__email_event_sent_event_id"], "unique_id": "test.hubspot.unique_hubspot__email_event_sent_event_id.68076270f8", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_event_sent_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "unique_hubspot__email_event_sent_event_id", "alias": "unique_hubspot__email_event_sent_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_sent"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/unique_hubspot__email_event_sent_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.036135, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__email_event_sent\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_sent"}, "test.hubspot.not_null_hubspot__email_event_sent_event_id.5507dcc5b9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_sent')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_sent"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_sent_event_id"], "unique_id": "test.hubspot.not_null_hubspot__email_event_sent_event_id.5507dcc5b9", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_event_sent_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "not_null_hubspot__email_event_sent_event_id", "alias": "not_null_hubspot__email_event_sent_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_sent"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/not_null_hubspot__email_event_sent_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.036976, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot.hubspot__email_event_sent\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_sent"}, "test.hubspot.unique_hubspot__email_event_spam_report_event_id.20aab81ec6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_spam_report')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "unique_hubspot__email_event_spam_report_event_id"], "unique_id": "test.hubspot.unique_hubspot__email_event_spam_report_event_id.20aab81ec6", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_event_spam_report_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "unique_hubspot__email_event_spam_report_event_id", "alias": "unique_hubspot__email_event_spam_report_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_spam_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.037826, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_spam_report"}, "test.hubspot.not_null_hubspot__email_event_spam_report_event_id.5ddca8771a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_spam_report')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_spam_report_event_id"], "unique_id": "test.hubspot.not_null_hubspot__email_event_spam_report_event_id.5ddca8771a", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_event_spam_report_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "not_null_hubspot__email_event_spam_report_event_id", "alias": "not_null_hubspot__email_event_spam_report_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_spam_report"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.038836, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_spam_report"}, "test.hubspot.unique_hubspot__email_event_status_change_event_id.2e5b2b72e2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_status_change')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_status_change"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "unique_hubspot__email_event_status_change_event_id"], "unique_id": "test.hubspot.unique_hubspot__email_event_status_change_event_id.2e5b2b72e2", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__email_event_status_change_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "unique_hubspot__email_event_status_change_event_id", "alias": "unique_hubspot__email_event_status_change_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_status_change"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/unique_hubspot__email_event_status_change_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.039686, "compiled_sql": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__email_event_status_change\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_status_change"}, "test.hubspot.not_null_hubspot__email_event_status_change_event_id.a1737e44b3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('hubspot__email_event_status_change')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__email_event_status_change"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "email_events", "not_null_hubspot__email_event_status_change_event_id"], "unique_id": "test.hubspot.not_null_hubspot__email_event_status_change_event_id.a1737e44b3", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__email_event_status_change_event_id.sql", "original_file_path": "models/marketing/email_events/email_events.yml", "name": "not_null_hubspot__email_event_status_change_event_id", "alias": "not_null_hubspot__email_event_status_change_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__email_event_status_change"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/email_events/email_events.yml/not_null_hubspot__email_event_status_change_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.0405178, "compiled_sql": "\n    \n    \n\n\n\nselect event_id\nfrom prod_analytics.hubspot.hubspot__email_event_status_change\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "event_id", "file_key_name": "models.hubspot__email_event_status_change"}, "test.hubspot.unique_hubspot__contact_history_id.aef69ae1ec": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('hubspot__contact_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__contact_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "history", "unique_hubspot__contact_history_id"], "unique_id": "test.hubspot.unique_hubspot__contact_history_id.aef69ae1ec", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_hubspot__contact_history_id.sql", "original_file_path": "models/marketing/history/history.yml", "name": "unique_hubspot__contact_history_id", "alias": "unique_hubspot__contact_history_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__contact_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/history/history.yml/unique_hubspot__contact_history_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.043262, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.hubspot__contact_history\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.hubspot__contact_history"}, "test.hubspot.not_null_hubspot__contact_history_id.eaae22e088": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('hubspot__contact_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__contact_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "history", "not_null_hubspot__contact_history_id"], "unique_id": "test.hubspot.not_null_hubspot__contact_history_id.eaae22e088", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_hubspot__contact_history_id.sql", "original_file_path": "models/marketing/history/history.yml", "name": "not_null_hubspot__contact_history_id", "alias": "not_null_hubspot__contact_history_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__contact_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/history/history.yml/not_null_hubspot__contact_history_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.04454, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom prod_analytics.hubspot.hubspot__contact_history\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.hubspot__contact_history"}, "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to.42ccfb8329": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["contact_id", "field_name", "valid_to"], "model": "{{ get_where_subquery(ref('hubspot__contact_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.hubspot__contact_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "history", "dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to"], "unique_id": "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to.42ccfb8329", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61.sql", "original_file_path": "models/marketing/history/history.yml", "name": "dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to", "alias": "dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["hubspot__contact_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/history/history.yml/dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4bdcc02b7c0675314311d172bbf6ae61"}, "created_at": 1661541350.045428, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        contact_id, field_name, valid_to\n    from prod_analytics.hubspot.hubspot__contact_history\n    group by contact_id, field_name, valid_to\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.hubspot__contact_history"}, "test.hubspot.unique_int_hubspot__email_aggregate_status_change_email_send_id.7c03e87c05": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "email_send_id", "model": "{{ get_where_subquery(ref('int_hubspot__email_aggregate_status_change')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.int_hubspot__email_aggregate_status_change"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "intermediate", "unique_int_hubspot__email_aggregate_status_change_email_send_id"], "unique_id": "test.hubspot.unique_int_hubspot__email_aggregate_status_change_email_send_id.7c03e87c05", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_int_hubspot__email_aggregate_status_change_email_send_id.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "name": "unique_int_hubspot__email_aggregate_status_change_email_send_id", "alias": "unique_int_hubspot__email_aggregate_status_change_email_send_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_hubspot__email_aggregate_status_change"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/intermediate.yml/unique_int_hubspot__email_aggregate_status_change_email_send_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.0500312, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_hubspot__email_aggregate_status_change as (\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__email_event_status_change\n\n), aggregates as (\n\n    select\n        email_campaign_id,\n        email_send_id,\n        count(case when subscription_status = 'UNSUBSCRIBED' then 1 end) as unsubscribes\n    from base\n    where email_send_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregates\n)select\n    email_send_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_hubspot__email_aggregate_status_change\nwhere email_send_id is not null\ngroup by email_send_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.hubspot.int_hubspot__email_aggregate_status_change", "sql": " __dbt__cte__int_hubspot__email_aggregate_status_change as (\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__email_event_status_change\n\n), aggregates as (\n\n    select\n        email_campaign_id,\n        email_send_id,\n        count(case when subscription_status = 'UNSUBSCRIBED' then 1 end) as unsubscribes\n    from base\n    where email_send_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregates\n)"}], "relation_name": null, "column_name": "email_send_id", "file_key_name": "models.int_hubspot__email_aggregate_status_change"}, "test.hubspot.not_null_int_hubspot__email_aggregate_status_change_email_send_id.16bf74a3bc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_hubspot__email_ag_072a8e51e30dd12183bb92703b55e189\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_send_id", "model": "{{ get_where_subquery(ref('int_hubspot__email_aggregate_status_change')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.int_hubspot__email_aggregate_status_change"]}, "config": {"enabled": true, "alias": "not_null_int_hubspot__email_ag_072a8e51e30dd12183bb92703b55e189", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "intermediate", "not_null_int_hubspot__email_aggregate_status_change_email_send_id"], "unique_id": "test.hubspot.not_null_int_hubspot__email_aggregate_status_change_email_send_id.16bf74a3bc", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_int_hubspot__email_ag_072a8e51e30dd12183bb92703b55e189.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "name": "not_null_int_hubspot__email_aggregate_status_change_email_send_id", "alias": "not_null_int_hubspot__email_ag_072a8e51e30dd12183bb92703b55e189", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_hubspot__email_aggregate_status_change"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/intermediate.yml/not_null_int_hubspot__email_ag_072a8e51e30dd12183bb92703b55e189.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_hubspot__email_ag_072a8e51e30dd12183bb92703b55e189"}, "created_at": 1661541350.051137, "compiled_sql": "\n    \n    \n\n\n\nwith __dbt__cte__int_hubspot__email_aggregate_status_change as (\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__email_event_status_change\n\n), aggregates as (\n\n    select\n        email_campaign_id,\n        email_send_id,\n        count(case when subscription_status = 'UNSUBSCRIBED' then 1 end) as unsubscribes\n    from base\n    where email_send_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregates\n)select email_send_id\nfrom __dbt__cte__int_hubspot__email_aggregate_status_change\nwhere email_send_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.hubspot.int_hubspot__email_aggregate_status_change", "sql": " __dbt__cte__int_hubspot__email_aggregate_status_change as (\n\n\nwith base as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__email_event_status_change\n\n), aggregates as (\n\n    select\n        email_campaign_id,\n        email_send_id,\n        count(case when subscription_status = 'UNSUBSCRIBED' then 1 end) as unsubscribes\n    from base\n    where email_send_id is not null\n    group by 1,2\n\n)\n\nselect *\nfrom aggregates\n)"}], "relation_name": null, "column_name": "email_send_id", "file_key_name": "models.int_hubspot__email_aggregate_status_change"}, "test.hubspot.unique_int_hubspot__email_metrics__by_contact_list_contact_list_id.095d72d5b8": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_hubspot__email_metr_ee44515cad61aa59cf03c59614b376f2\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('int_hubspot__email_metrics__by_contact_list')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.int_hubspot__email_metrics__by_contact_list"]}, "config": {"enabled": true, "alias": "unique_int_hubspot__email_metr_ee44515cad61aa59cf03c59614b376f2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "intermediate", "unique_int_hubspot__email_metrics__by_contact_list_contact_list_id"], "unique_id": "test.hubspot.unique_int_hubspot__email_metrics__by_contact_list_contact_list_id.095d72d5b8", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_int_hubspot__email_metr_ee44515cad61aa59cf03c59614b376f2.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "name": "unique_int_hubspot__email_metrics__by_contact_list_contact_list_id", "alias": "unique_int_hubspot__email_metr_ee44515cad61aa59cf03c59614b376f2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_hubspot__email_metrics__by_contact_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/intermediate.yml/unique_int_hubspot__email_metr_ee44515cad61aa59cf03c59614b376f2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_hubspot__email_metr_ee44515cad61aa59cf03c59614b376f2"}, "created_at": 1661541350.052067, "compiled_sql": "\n    \n    \n\nselect\n    contact_list_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.hubspot.int_hubspot__email_metrics__by_contact_list\nwhere contact_list_id is not null\ngroup by contact_list_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contact_list_id", "file_key_name": "models.int_hubspot__email_metrics__by_contact_list"}, "test.hubspot.not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id.1d3cf4caf2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_hubspot__email_me_a72a3c877d9529cf35305d2d29199a33\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_list_id", "model": "{{ get_where_subquery(ref('int_hubspot__email_metrics__by_contact_list')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.int_hubspot__email_metrics__by_contact_list"]}, "config": {"enabled": true, "alias": "not_null_int_hubspot__email_me_a72a3c877d9529cf35305d2d29199a33", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "intermediate", "not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id"], "unique_id": "test.hubspot.not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id.1d3cf4caf2", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_int_hubspot__email_me_a72a3c877d9529cf35305d2d29199a33.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "name": "not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id", "alias": "not_null_int_hubspot__email_me_a72a3c877d9529cf35305d2d29199a33", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_hubspot__email_metrics__by_contact_list"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/intermediate.yml/not_null_int_hubspot__email_me_a72a3c877d9529cf35305d2d29199a33.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_hubspot__email_me_a72a3c877d9529cf35305d2d29199a33"}, "created_at": 1661541350.0529761, "compiled_sql": "\n    \n    \n\n\n\nselect contact_list_id\nfrom prod_analytics.hubspot.int_hubspot__email_metrics__by_contact_list\nwhere contact_list_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contact_list_id", "file_key_name": "models.int_hubspot__email_metrics__by_contact_list"}, "test.hubspot.unique_int_hubspot__email_event_aggregates_email_send_id.4deec238f9": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "email_send_id", "model": "{{ get_where_subquery(ref('int_hubspot__email_event_aggregates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.int_hubspot__email_event_aggregates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "intermediate", "unique_int_hubspot__email_event_aggregates_email_send_id"], "unique_id": "test.hubspot.unique_int_hubspot__email_event_aggregates_email_send_id.4deec238f9", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_int_hubspot__email_event_aggregates_email_send_id.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "name": "unique_int_hubspot__email_event_aggregates_email_send_id", "alias": "unique_int_hubspot__email_event_aggregates_email_send_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_hubspot__email_event_aggregates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/intermediate.yml/unique_int_hubspot__email_event_aggregates_email_send_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.05406, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_hubspot__email_event_aggregates as (\n\n\nwith events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), aggregates as (\n\n    select\n        sent_by_event_id as email_send_id,\n        count(case when event_type = 'OPEN' then sent_by_event_id end) as opens,\n        count(case when event_type = 'SENT' then sent_by_event_id end) as sends,\n        count(case when event_type = 'DELIVERED' then sent_by_event_id end) as deliveries,\n        count(case when event_type = 'DROPPED' then sent_by_event_id end) as drops,\n        count(case when event_type = 'CLICK' then sent_by_event_id end) as clicks,\n        count(case when event_type = 'FORWARD' then sent_by_event_id end) as forwards,\n        count(case when event_type = 'DEFERRED' then sent_by_event_id end) as deferrals,\n        count(case when event_type = 'BOUNCE' then sent_by_event_id end) as bounces,\n        count(case when event_type = 'SPAMREPORT' then sent_by_event_id end) as spam_reports,\n        count(case when event_type = 'PRINT' then sent_by_event_id end) as prints\n    from events\n    where sent_by_event_id is not null\n    group by 1\n\n)\n\nselect *\nfrom aggregates\n)select\n    email_send_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_hubspot__email_event_aggregates\nwhere email_send_id is not null\ngroup by email_send_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.hubspot.int_hubspot__email_event_aggregates", "sql": " __dbt__cte__int_hubspot__email_event_aggregates as (\n\n\nwith events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), aggregates as (\n\n    select\n        sent_by_event_id as email_send_id,\n        count(case when event_type = 'OPEN' then sent_by_event_id end) as opens,\n        count(case when event_type = 'SENT' then sent_by_event_id end) as sends,\n        count(case when event_type = 'DELIVERED' then sent_by_event_id end) as deliveries,\n        count(case when event_type = 'DROPPED' then sent_by_event_id end) as drops,\n        count(case when event_type = 'CLICK' then sent_by_event_id end) as clicks,\n        count(case when event_type = 'FORWARD' then sent_by_event_id end) as forwards,\n        count(case when event_type = 'DEFERRED' then sent_by_event_id end) as deferrals,\n        count(case when event_type = 'BOUNCE' then sent_by_event_id end) as bounces,\n        count(case when event_type = 'SPAMREPORT' then sent_by_event_id end) as spam_reports,\n        count(case when event_type = 'PRINT' then sent_by_event_id end) as prints\n    from events\n    where sent_by_event_id is not null\n    group by 1\n\n)\n\nselect *\nfrom aggregates\n)"}], "relation_name": null, "column_name": "email_send_id", "file_key_name": "models.int_hubspot__email_event_aggregates"}, "test.hubspot.not_null_int_hubspot__email_event_aggregates_email_send_id.ac29e6997a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_send_id", "model": "{{ get_where_subquery(ref('int_hubspot__email_event_aggregates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.int_hubspot__email_event_aggregates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "intermediate", "not_null_int_hubspot__email_event_aggregates_email_send_id"], "unique_id": "test.hubspot.not_null_int_hubspot__email_event_aggregates_email_send_id.ac29e6997a", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_int_hubspot__email_event_aggregates_email_send_id.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "name": "not_null_int_hubspot__email_event_aggregates_email_send_id", "alias": "not_null_int_hubspot__email_event_aggregates_email_send_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_hubspot__email_event_aggregates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/intermediate.yml/not_null_int_hubspot__email_event_aggregates_email_send_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.0549061, "compiled_sql": "\n    \n    \n\n\n\nwith __dbt__cte__int_hubspot__email_event_aggregates as (\n\n\nwith events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), aggregates as (\n\n    select\n        sent_by_event_id as email_send_id,\n        count(case when event_type = 'OPEN' then sent_by_event_id end) as opens,\n        count(case when event_type = 'SENT' then sent_by_event_id end) as sends,\n        count(case when event_type = 'DELIVERED' then sent_by_event_id end) as deliveries,\n        count(case when event_type = 'DROPPED' then sent_by_event_id end) as drops,\n        count(case when event_type = 'CLICK' then sent_by_event_id end) as clicks,\n        count(case when event_type = 'FORWARD' then sent_by_event_id end) as forwards,\n        count(case when event_type = 'DEFERRED' then sent_by_event_id end) as deferrals,\n        count(case when event_type = 'BOUNCE' then sent_by_event_id end) as bounces,\n        count(case when event_type = 'SPAMREPORT' then sent_by_event_id end) as spam_reports,\n        count(case when event_type = 'PRINT' then sent_by_event_id end) as prints\n    from events\n    where sent_by_event_id is not null\n    group by 1\n\n)\n\nselect *\nfrom aggregates\n)select email_send_id\nfrom __dbt__cte__int_hubspot__email_event_aggregates\nwhere email_send_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.hubspot.int_hubspot__email_event_aggregates", "sql": " __dbt__cte__int_hubspot__email_event_aggregates as (\n\n\nwith events as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__email_event\n\n), aggregates as (\n\n    select\n        sent_by_event_id as email_send_id,\n        count(case when event_type = 'OPEN' then sent_by_event_id end) as opens,\n        count(case when event_type = 'SENT' then sent_by_event_id end) as sends,\n        count(case when event_type = 'DELIVERED' then sent_by_event_id end) as deliveries,\n        count(case when event_type = 'DROPPED' then sent_by_event_id end) as drops,\n        count(case when event_type = 'CLICK' then sent_by_event_id end) as clicks,\n        count(case when event_type = 'FORWARD' then sent_by_event_id end) as forwards,\n        count(case when event_type = 'DEFERRED' then sent_by_event_id end) as deferrals,\n        count(case when event_type = 'BOUNCE' then sent_by_event_id end) as bounces,\n        count(case when event_type = 'SPAMREPORT' then sent_by_event_id end) as spam_reports,\n        count(case when event_type = 'PRINT' then sent_by_event_id end) as prints\n    from events\n    where sent_by_event_id is not null\n    group by 1\n\n)\n\nselect *\nfrom aggregates\n)"}], "relation_name": null, "column_name": "email_send_id", "file_key_name": "models.int_hubspot__email_event_aggregates"}, "test.hubspot.unique_int_hubspot__engagement_metrics__by_contact_contact_id.1c156b64ed": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('int_hubspot__engagement_metrics__by_contact')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.int_hubspot__engagement_metrics__by_contact"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "intermediate", "unique_int_hubspot__engagement_metrics__by_contact_contact_id"], "unique_id": "test.hubspot.unique_int_hubspot__engagement_metrics__by_contact_contact_id.1c156b64ed", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "unique_int_hubspot__engagement_metrics__by_contact_contact_id.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "name": "unique_int_hubspot__engagement_metrics__by_contact_contact_id", "alias": "unique_int_hubspot__engagement_metrics__by_contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_hubspot__engagement_metrics__by_contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/intermediate.yml/unique_int_hubspot__engagement_metrics__by_contact_contact_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.0557408, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_hubspot__engagement_metrics__by_contact as (\n\n\nwith engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), engagement_contacts as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_contact\n\n), engagement_contacts_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_contacts.contact_id\n    from engagements\n    inner join engagement_contacts\n        using (engagement_id)\n\n), engagement_contacts_agg as (\n\n    \n\n    select\n        contact_id,\n        count(case when engagement_type = 'NOTE' then contact_id end) as count_engagement_notes,\n        count(case when engagement_type = 'TASK' then contact_id end) as count_engagement_tasks,\n        count(case when engagement_type = 'CALL' then contact_id end) as count_engagement_calls,\n        count(case when engagement_type = 'MEETING' then contact_id end) as count_engagement_meetings,\n        count(case when engagement_type = 'EMAIL' then contact_id end) as count_engagement_emails,\n        count(case when engagement_type = 'INCOMING_EMAIL' then contact_id end) as count_engagement_incoming_emails,\n        count(case when engagement_type = 'FORWARDED_EMAIL' then contact_id end) as count_engagement_forwarded_emails\n    from engagement_contacts_joined\n    group by 1\n\n\n\n)\n\nselect *\nfrom engagement_contacts_agg\n)select\n    contact_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_hubspot__engagement_metrics__by_contact\nwhere contact_id is not null\ngroup by contact_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.hubspot.int_hubspot__engagement_metrics__by_contact", "sql": " __dbt__cte__int_hubspot__engagement_metrics__by_contact as (\n\n\nwith engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), engagement_contacts as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_contact\n\n), engagement_contacts_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_contacts.contact_id\n    from engagements\n    inner join engagement_contacts\n        using (engagement_id)\n\n), engagement_contacts_agg as (\n\n    \n\n    select\n        contact_id,\n        count(case when engagement_type = 'NOTE' then contact_id end) as count_engagement_notes,\n        count(case when engagement_type = 'TASK' then contact_id end) as count_engagement_tasks,\n        count(case when engagement_type = 'CALL' then contact_id end) as count_engagement_calls,\n        count(case when engagement_type = 'MEETING' then contact_id end) as count_engagement_meetings,\n        count(case when engagement_type = 'EMAIL' then contact_id end) as count_engagement_emails,\n        count(case when engagement_type = 'INCOMING_EMAIL' then contact_id end) as count_engagement_incoming_emails,\n        count(case when engagement_type = 'FORWARDED_EMAIL' then contact_id end) as count_engagement_forwarded_emails\n    from engagement_contacts_joined\n    group by 1\n\n\n\n)\n\nselect *\nfrom engagement_contacts_agg\n)"}], "relation_name": null, "column_name": "contact_id", "file_key_name": "models.int_hubspot__engagement_metrics__by_contact"}, "test.hubspot.not_null_int_hubspot__engagement_metrics__by_contact_contact_id.4a800df06b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('int_hubspot__engagement_metrics__by_contact')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.hubspot.int_hubspot__engagement_metrics__by_contact"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["hubspot", "marketing", "intermediate", "not_null_int_hubspot__engagement_metrics__by_contact_contact_id"], "unique_id": "test.hubspot.not_null_int_hubspot__engagement_metrics__by_contact_contact_id.4a800df06b", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "not_null_int_hubspot__engagement_metrics__by_contact_contact_id.sql", "original_file_path": "models/marketing/intermediate/intermediate.yml", "name": "not_null_int_hubspot__engagement_metrics__by_contact_contact_id", "alias": "not_null_int_hubspot__engagement_metrics__by_contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_hubspot__engagement_metrics__by_contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/hubspot/models/marketing/intermediate/intermediate.yml/not_null_int_hubspot__engagement_metrics__by_contact_contact_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.056981, "compiled_sql": "\n    \n    \n\n\n\nwith __dbt__cte__int_hubspot__engagement_metrics__by_contact as (\n\n\nwith engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), engagement_contacts as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_contact\n\n), engagement_contacts_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_contacts.contact_id\n    from engagements\n    inner join engagement_contacts\n        using (engagement_id)\n\n), engagement_contacts_agg as (\n\n    \n\n    select\n        contact_id,\n        count(case when engagement_type = 'NOTE' then contact_id end) as count_engagement_notes,\n        count(case when engagement_type = 'TASK' then contact_id end) as count_engagement_tasks,\n        count(case when engagement_type = 'CALL' then contact_id end) as count_engagement_calls,\n        count(case when engagement_type = 'MEETING' then contact_id end) as count_engagement_meetings,\n        count(case when engagement_type = 'EMAIL' then contact_id end) as count_engagement_emails,\n        count(case when engagement_type = 'INCOMING_EMAIL' then contact_id end) as count_engagement_incoming_emails,\n        count(case when engagement_type = 'FORWARDED_EMAIL' then contact_id end) as count_engagement_forwarded_emails\n    from engagement_contacts_joined\n    group by 1\n\n\n\n)\n\nselect *\nfrom engagement_contacts_agg\n)select contact_id\nfrom __dbt__cte__int_hubspot__engagement_metrics__by_contact\nwhere contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.hubspot.int_hubspot__engagement_metrics__by_contact", "sql": " __dbt__cte__int_hubspot__engagement_metrics__by_contact as (\n\n\nwith engagements as (\n\n    select *\n    from prod_analytics.hubspot.hubspot__engagements\n\n), engagement_contacts as (\n\n    select *\n    from prod_analytics.hubspot_source.stg_hubspot__engagement_contact\n\n), engagement_contacts_joined as (\n\n    select\n        engagements.engagement_type,\n        engagement_contacts.contact_id\n    from engagements\n    inner join engagement_contacts\n        using (engagement_id)\n\n), engagement_contacts_agg as (\n\n    \n\n    select\n        contact_id,\n        count(case when engagement_type = 'NOTE' then contact_id end) as count_engagement_notes,\n        count(case when engagement_type = 'TASK' then contact_id end) as count_engagement_tasks,\n        count(case when engagement_type = 'CALL' then contact_id end) as count_engagement_calls,\n        count(case when engagement_type = 'MEETING' then contact_id end) as count_engagement_meetings,\n        count(case when engagement_type = 'EMAIL' then contact_id end) as count_engagement_emails,\n        count(case when engagement_type = 'INCOMING_EMAIL' then contact_id end) as count_engagement_incoming_emails,\n        count(case when engagement_type = 'FORWARDED_EMAIL' then contact_id end) as count_engagement_forwarded_emails\n    from engagement_contacts_joined\n    group by 1\n\n\n\n)\n\nselect *\nfrom engagement_contacts_agg\n)"}], "relation_name": null, "column_name": "contact_id", "file_key_name": "models.int_hubspot__engagement_metrics__by_contact"}, "test.stripe_source.unique_stg_stripe__balance_transaction_balance_transaction_id.2f29c783d0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "balance_transaction_id", "model": "{{ get_where_subquery(ref('stg_stripe__balance_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__balance_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__balance_transaction_balance_transaction_id"], "unique_id": "test.stripe_source.unique_stg_stripe__balance_transaction_balance_transaction_id.2f29c783d0", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__balance_transaction_balance_transaction_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__balance_transaction_balance_transaction_id", "alias": "unique_stg_stripe__balance_transaction_balance_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__balance_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__balance_transaction_balance_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.093458, "compiled_sql": "\n    \n    \n\nselect\n    balance_transaction_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe_source.stg_stripe__balance_transaction\nwhere balance_transaction_id is not null\ngroup by balance_transaction_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "balance_transaction_id", "file_key_name": "models.stg_stripe__balance_transaction"}, "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "balance_transaction_id", "model": "{{ get_where_subquery(ref('stg_stripe__balance_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__balance_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__balance_transaction_balance_transaction_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "not_null_stg_stripe__balance_transaction_balance_transaction_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__balance_transaction_balance_transaction_id", "alias": "not_null_stg_stripe__balance_transaction_balance_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__balance_transaction"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__balance_transaction_balance_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.094505, "compiled_sql": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom prod_analytics.stripe_source.stg_stripe__balance_transaction\nwhere balance_transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "balance_transaction_id", "file_key_name": "models.stg_stripe__balance_transaction"}, "test.stripe_source.unique_stg_stripe__card_card_id.000d85b677": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_stripe__card')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__card"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__card_card_id"], "unique_id": "test.stripe_source.unique_stg_stripe__card_card_id.000d85b677", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__card_card_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__card_card_id", "alias": "unique_stg_stripe__card_card_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__card"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__card_card_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.09537, "compiled_sql": "\n    \n    \n\nselect\n    card_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe_source.stg_stripe__card\nwhere card_id is not null\ngroup by card_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "card_id", "file_key_name": "models.stg_stripe__card"}, "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_stripe__card')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__card"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__card_card_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "not_null_stg_stripe__card_card_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__card_card_id", "alias": "not_null_stg_stripe__card_card_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__card"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__card_card_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.0963662, "compiled_sql": "\n    \n    \n\n\n\nselect card_id\nfrom prod_analytics.stripe_source.stg_stripe__card\nwhere card_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "card_id", "file_key_name": "models.stg_stripe__card"}, "test.stripe_source.unique_stg_stripe__charge_charge_id.04b21ec6e0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "charge_id", "model": "{{ get_where_subquery(ref('stg_stripe__charge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__charge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__charge_charge_id"], "unique_id": "test.stripe_source.unique_stg_stripe__charge_charge_id.04b21ec6e0", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__charge_charge_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__charge_charge_id", "alias": "unique_stg_stripe__charge_charge_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__charge"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__charge_charge_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.097209, "compiled_sql": "\n    \n    \n\nselect\n    charge_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe_source.stg_stripe__charge\nwhere charge_id is not null\ngroup by charge_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "charge_id", "file_key_name": "models.stg_stripe__charge"}, "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "charge_id", "model": "{{ get_where_subquery(ref('stg_stripe__charge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__charge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__charge_charge_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "not_null_stg_stripe__charge_charge_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__charge_charge_id", "alias": "not_null_stg_stripe__charge_charge_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__charge"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__charge_charge_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.098047, "compiled_sql": "\n    \n    \n\n\n\nselect charge_id\nfrom prod_analytics.stripe_source.stg_stripe__charge\nwhere charge_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "charge_id", "file_key_name": "models.stg_stripe__charge"}, "test.stripe_source.unique_stg_stripe__customer_customer_id.a06a928db2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_stripe__customer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__customer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__customer_customer_id"], "unique_id": "test.stripe_source.unique_stg_stripe__customer_customer_id.a06a928db2", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__customer_customer_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__customer_customer_id", "alias": "unique_stg_stripe__customer_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__customer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__customer_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.0990322, "compiled_sql": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe_source.stg_stripe__customer\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_stripe__customer"}, "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_stripe__customer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__customer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__customer_customer_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "not_null_stg_stripe__customer_customer_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__customer_customer_id", "alias": "not_null_stg_stripe__customer_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__customer"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__customer_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.099861, "compiled_sql": "\n    \n    \n\n\n\nselect customer_id\nfrom prod_analytics.stripe_source.stg_stripe__customer\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_stripe__customer"}, "test.stripe_source.unique_stg_stripe__payment_intent_payment_intent_id.02430feefd": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_intent_id", "model": "{{ get_where_subquery(ref('stg_stripe__payment_intent')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_intent"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__payment_intent_payment_intent_id"], "unique_id": "test.stripe_source.unique_stg_stripe__payment_intent_payment_intent_id.02430feefd", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__payment_intent_payment_intent_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__payment_intent_payment_intent_id", "alias": "unique_stg_stripe__payment_intent_payment_intent_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__payment_intent"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__payment_intent_payment_intent_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.100707, "compiled_sql": "\n    \n    \n\nselect\n    payment_intent_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe_source.stg_stripe__payment_intent\nwhere payment_intent_id is not null\ngroup by payment_intent_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payment_intent_id", "file_key_name": "models.stg_stripe__payment_intent"}, "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_intent_id", "model": "{{ get_where_subquery(ref('stg_stripe__payment_intent')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_intent"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__payment_intent_payment_intent_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "not_null_stg_stripe__payment_intent_payment_intent_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__payment_intent_payment_intent_id", "alias": "not_null_stg_stripe__payment_intent_payment_intent_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__payment_intent"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__payment_intent_payment_intent_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.10154, "compiled_sql": "\n    \n    \n\n\n\nselect payment_intent_id\nfrom prod_analytics.stripe_source.stg_stripe__payment_intent\nwhere payment_intent_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payment_intent_id", "file_key_name": "models.stg_stripe__payment_intent"}, "test.stripe_source.unique_stg_stripe__payment_method_payment_method_id.b12d5fcf1b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('stg_stripe__payment_method')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_method"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__payment_method_payment_method_id"], "unique_id": "test.stripe_source.unique_stg_stripe__payment_method_payment_method_id.b12d5fcf1b", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__payment_method_payment_method_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__payment_method_payment_method_id", "alias": "unique_stg_stripe__payment_method_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__payment_method"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__payment_method_payment_method_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.1025338, "compiled_sql": "\n    \n    \n\nselect\n    payment_method_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe_source.stg_stripe__payment_method\nwhere payment_method_id is not null\ngroup by payment_method_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payment_method_id", "file_key_name": "models.stg_stripe__payment_method"}, "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('stg_stripe__payment_method')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_method"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__payment_method_payment_method_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "not_null_stg_stripe__payment_method_payment_method_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__payment_method_payment_method_id", "alias": "not_null_stg_stripe__payment_method_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__payment_method"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__payment_method_payment_method_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.1033611, "compiled_sql": "\n    \n    \n\n\n\nselect payment_method_id\nfrom prod_analytics.stripe_source.stg_stripe__payment_method\nwhere payment_method_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payment_method_id", "file_key_name": "models.stg_stripe__payment_method"}, "test.stripe_source.unique_stg_stripe__payout_payout_id.9d9065d2c5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payout_id", "model": "{{ get_where_subquery(ref('stg_stripe__payout')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payout"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__payout_payout_id"], "unique_id": "test.stripe_source.unique_stg_stripe__payout_payout_id.9d9065d2c5", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__payout_payout_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__payout_payout_id", "alias": "unique_stg_stripe__payout_payout_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__payout"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__payout_payout_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.1041868, "compiled_sql": "\n    \n    \n\nselect\n    payout_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe_source.stg_stripe__payout\nwhere payout_id is not null\ngroup by payout_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payout_id", "file_key_name": "models.stg_stripe__payout"}, "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payout_id", "model": "{{ get_where_subquery(ref('stg_stripe__payout')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payout"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__payout_payout_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "not_null_stg_stripe__payout_payout_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__payout_payout_id", "alias": "not_null_stg_stripe__payout_payout_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__payout"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__payout_payout_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.105317, "compiled_sql": "\n    \n    \n\n\n\nselect payout_id\nfrom prod_analytics.stripe_source.stg_stripe__payout\nwhere payout_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payout_id", "file_key_name": "models.stg_stripe__payout"}, "test.stripe_source.unique_stg_stripe__refund_refund_id.0b7c337204": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "refund_id", "model": "{{ get_where_subquery(ref('stg_stripe__refund')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__refund"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__refund_refund_id"], "unique_id": "test.stripe_source.unique_stg_stripe__refund_refund_id.0b7c337204", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__refund_refund_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__refund_refund_id", "alias": "unique_stg_stripe__refund_refund_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__refund"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__refund_refund_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.106169, "compiled_sql": "\n    \n    \n\nselect\n    refund_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe_source.stg_stripe__refund\nwhere refund_id is not null\ngroup by refund_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "refund_id", "file_key_name": "models.stg_stripe__refund"}, "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "refund_id", "model": "{{ get_where_subquery(ref('stg_stripe__refund')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__refund"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__refund_refund_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "not_null_stg_stripe__refund_refund_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__refund_refund_id", "alias": "not_null_stg_stripe__refund_refund_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__refund"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__refund_refund_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.106984, "compiled_sql": "\n    \n    \n\n\n\nselect refund_id\nfrom prod_analytics.stripe_source.stg_stripe__refund\nwhere refund_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "refund_id", "file_key_name": "models.stg_stripe__refund"}, "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_id.e8805346de": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_id", "model": "{{ get_where_subquery(ref('stg_stripe__invoice_line_item')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__invoice_line_item"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__invoice_line_item_unique_id"], "unique_id": "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_id.e8805346de", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__invoice_line_item_unique_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__invoice_line_item_unique_id", "alias": "unique_stg_stripe__invoice_line_item_unique_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__invoice_line_item"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__invoice_line_item_unique_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.107818, "compiled_sql": "\n    \n    \n\nselect\n    unique_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe_source.stg_stripe__invoice_line_item\nwhere unique_id is not null\ngroup by unique_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "unique_id", "file_key_name": "models.stg_stripe__invoice_line_item"}, "test.stripe_source.unique_stg_stripe__invoice_invoice_id.63b5714c58": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_stripe__invoice')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__invoice"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__invoice_invoice_id"], "unique_id": "test.stripe_source.unique_stg_stripe__invoice_invoice_id.63b5714c58", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__invoice_invoice_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__invoice_invoice_id", "alias": "unique_stg_stripe__invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__invoice"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__invoice_invoice_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.108795, "compiled_sql": "\n    \n    \n\nselect\n    invoice_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe_source.stg_stripe__invoice\nwhere invoice_id is not null\ngroup by invoice_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_id", "file_key_name": "models.stg_stripe__invoice"}, "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_stripe__invoice')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__invoice"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__invoice_invoice_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "not_null_stg_stripe__invoice_invoice_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__invoice_invoice_id", "alias": "not_null_stg_stripe__invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__invoice"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__invoice_invoice_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.109612, "compiled_sql": "\n    \n    \n\n\n\nselect invoice_id\nfrom prod_analytics.stripe_source.stg_stripe__invoice\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_id", "file_key_name": "models.stg_stripe__invoice"}, "test.stripe_source.not_null_stg_stripe__plan_plan_id.f59445523e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_id", "model": "{{ get_where_subquery(ref('stg_stripe__plan')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__plan"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__plan_plan_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__plan_plan_id.f59445523e", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "not_null_stg_stripe__plan_plan_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__plan_plan_id", "alias": "not_null_stg_stripe__plan_plan_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__plan"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__plan_plan_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.110443, "compiled_sql": "\n    \n    \n\n\n\nselect plan_id\nfrom prod_analytics.stripe_source.stg_stripe__plan\nwhere plan_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "plan_id", "file_key_name": "models.stg_stripe__plan"}, "test.stripe_source.unique_stg_stripe__plan_plan_id.b21f08031c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "plan_id", "model": "{{ get_where_subquery(ref('stg_stripe__plan')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__plan"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__plan_plan_id"], "unique_id": "test.stripe_source.unique_stg_stripe__plan_plan_id.b21f08031c", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__plan_plan_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__plan_plan_id", "alias": "unique_stg_stripe__plan_plan_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__plan"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__plan_plan_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.111439, "compiled_sql": "\n    \n    \n\nselect\n    plan_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe_source.stg_stripe__plan\nwhere plan_id is not null\ngroup by plan_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "plan_id", "file_key_name": "models.stg_stripe__plan"}, "test.stripe_source.unique_stg_stripe__credit_note_credit_note_id.135c7cd4a0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "credit_note_id", "model": "{{ get_where_subquery(ref('stg_stripe__credit_note')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__credit_note_credit_note_id"], "unique_id": "test.stripe_source.unique_stg_stripe__credit_note_credit_note_id.135c7cd4a0", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__credit_note_credit_note_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__credit_note_credit_note_id", "alias": "unique_stg_stripe__credit_note_credit_note_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__credit_note"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.112275, "column_name": "credit_note_id", "file_key_name": "models.stg_stripe__credit_note"}, "test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_note_id", "model": "{{ get_where_subquery(ref('stg_stripe__credit_note')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__credit_note_credit_note_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "not_null_stg_stripe__credit_note_credit_note_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__credit_note_credit_note_id", "alias": "not_null_stg_stripe__credit_note_credit_note_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__credit_note"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.113097, "column_name": "credit_note_id", "file_key_name": "models.stg_stripe__credit_note"}, "test.stripe_source.unique_stg_stripe__credit_note_line_item_credit_note_line_item_id.3972a0829e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_stripe__credit_note_bca3c96841994776de40078a094584d4\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "credit_note_line_item_id", "model": "{{ get_where_subquery(ref('stg_stripe__credit_note_line_item')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": "unique_stg_stripe__credit_note_bca3c96841994776de40078a094584d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__credit_note_line_item_credit_note_line_item_id"], "unique_id": "test.stripe_source.unique_stg_stripe__credit_note_line_item_credit_note_line_item_id.3972a0829e", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "unique_stg_stripe__credit_note_bca3c96841994776de40078a094584d4.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__credit_note_line_item_credit_note_line_item_id", "alias": "unique_stg_stripe__credit_note_bca3c96841994776de40078a094584d4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__credit_note_line_item"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_stripe__credit_note_bca3c96841994776de40078a094584d4"}, "created_at": 1661541350.113926, "column_name": "credit_note_line_item_id", "file_key_name": "models.stg_stripe__credit_note_line_item"}, "test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_note_line_item_id", "model": "{{ get_where_subquery(ref('stg_stripe__credit_note_line_item')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": "not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id", "alias": "not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__credit_note_line_item"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d"}, "created_at": 1661541350.114954, "column_name": "credit_note_line_item_id", "file_key_name": "models.stg_stripe__credit_note_line_item"}, "test.dbt_project_evaluator.dbt_utils_accepted_range_fct_documentation_coverage_documentation_coverage_pct___var_documentation_coverage_target_.31ca75dbaa": {"raw_sql": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_accepted_range_fct_d_60fa1e42bcaed7ea1fca15068fe7952f\") }}", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "{{ var('documentation_coverage_target') }}", "column_name": "documentation_coverage_pct", "model": "{{ get_where_subquery(ref('fct_documentation_coverage')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_documentation_coverage"]}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_fct_d_60fa1e42bcaed7ea1fca15068fe7952f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "documentation", "dbt_utils_accepted_range_fct_documentation_coverage_documentation_coverage_pct___var_documentation_coverage_target_"], "unique_id": "test.dbt_project_evaluator.dbt_utils_accepted_range_fct_documentation_coverage_documentation_coverage_pct___var_documentation_coverage_target_.31ca75dbaa", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "dbt_utils_accepted_range_fct_d_60fa1e42bcaed7ea1fca15068fe7952f.sql", "original_file_path": "models/marts/documentation/documentation.yml", "name": "dbt_utils_accepted_range_fct_documentation_coverage_documentation_coverage_pct___var_documentation_coverage_target_", "alias": "dbt_utils_accepted_range_fct_d_60fa1e42bcaed7ea1fca15068fe7952f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_documentation_coverage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/dbt_utils_accepted_range_fct_d_60fa1e42bcaed7ea1fca15068fe7952f.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_accepted_range_fct_d_60fa1e42bcaed7ea1fca15068fe7952f"}, "created_at": 1661541350.1590989, "compiled_sql": "\n\nwith meet_condition as(\n  select *\n  from prod_analytics.dbt_project_evaluator.fct_documentation_coverage\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not documentation_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "documentation_coverage_pct", "file_key_name": "models.fct_documentation_coverage"}, "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_models')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_models"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_models_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_undocumented_models_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "name": "is_empty_fct_undocumented_models_", "alias": "is_empty_fct_undocumented_models_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_undocumented_models"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/documentation/documentation.yml/is_empty_fct_undocumented_models_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.163938, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_undocumented_models\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_undocumented_models"}, "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_direct_join_to_source')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_direct_join_to_source"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_direct_join_to_source_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_direct_join_to_source_.sql", "original_file_path": "models/marts/dag/dag.yml", "name": "is_empty_fct_direct_join_to_source_", "alias": "is_empty_fct_direct_join_to_source_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_direct_join_to_source"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_direct_join_to_source_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.169137, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_direct_join_to_source\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_direct_join_to_source"}, "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_marts_or_intermediate_dependent_on_source')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_marts_or_intermediate_dependent_on_source_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_marts_or_intermediate_dependent_on_source_.sql", "original_file_path": "models/marts/dag/dag.yml", "name": "is_empty_fct_marts_or_intermediate_dependent_on_source_", "alias": "is_empty_fct_marts_or_intermediate_dependent_on_source_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_marts_or_intermediate_dependent_on_source"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_marts_or_intermediate_dependent_on_source_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.171034, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_marts_or_intermediate_dependent_on_source"}, "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_fanout')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_fanout"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_model_fanout_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_model_fanout_.sql", "original_file_path": "models/marts/dag/dag.yml", "name": "is_empty_fct_model_fanout_", "alias": "is_empty_fct_model_fanout_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_model_fanout"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_model_fanout_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.173058, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_model_fanout\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_model_fanout"}, "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_multiple_sources_joined')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_multiple_sources_joined"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_multiple_sources_joined_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_multiple_sources_joined_.sql", "original_file_path": "models/marts/dag/dag.yml", "name": "is_empty_fct_multiple_sources_joined_", "alias": "is_empty_fct_multiple_sources_joined_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_multiple_sources_joined"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_multiple_sources_joined_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.1750531, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_multiple_sources_joined\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_multiple_sources_joined"}, "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_rejoining_of_upstream_concepts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_rejoining_of_upstream_concepts_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_rejoining_of_upstream_concepts_.sql", "original_file_path": "models/marts/dag/dag.yml", "name": "is_empty_fct_rejoining_of_upstream_concepts_", "alias": "is_empty_fct_rejoining_of_upstream_concepts_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_rejoining_of_upstream_concepts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_rejoining_of_upstream_concepts_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.176909, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_rejoining_of_upstream_concepts\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_rejoining_of_upstream_concepts"}, "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_root_models')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_root_models"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_root_models_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_root_models_.sql", "original_file_path": "models/marts/dag/dag.yml", "name": "is_empty_fct_root_models_", "alias": "is_empty_fct_root_models_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_root_models"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_root_models_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.178923, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_root_models\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_root_models"}, "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_source_fanout')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_source_fanout"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_source_fanout_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_source_fanout_.sql", "original_file_path": "models/marts/dag/dag.yml", "name": "is_empty_fct_source_fanout_", "alias": "is_empty_fct_source_fanout_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_source_fanout"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_source_fanout_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.180902, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_source_fanout\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_source_fanout"}, "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_staging_dependent_on_marts_or_intermediate')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_staging_dependent_on_marts_or_intermediate_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_staging_dependent_on_marts_or_intermediate_.sql", "original_file_path": "models/marts/dag/dag.yml", "name": "is_empty_fct_staging_dependent_on_marts_or_intermediate_", "alias": "is_empty_fct_staging_dependent_on_marts_or_intermediate_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_staging_dependent_on_marts_or_intermediate"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_staging_dependent_on_marts_or_intermediate_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.182915, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_staging_dependent_on_marts_or_intermediate"}, "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_staging_dependent_on_staging')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_staging_dependent_on_staging"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_staging_dependent_on_staging_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_staging_dependent_on_staging_.sql", "original_file_path": "models/marts/dag/dag.yml", "name": "is_empty_fct_staging_dependent_on_staging_", "alias": "is_empty_fct_staging_dependent_on_staging_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_staging_dependent_on_staging"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_staging_dependent_on_staging_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.184748, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_staging_dependent_on_staging\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_staging_dependent_on_staging"}, "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_unused_sources')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_unused_sources"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_unused_sources_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_unused_sources_.sql", "original_file_path": "models/marts/dag/dag.yml", "name": "is_empty_fct_unused_sources_", "alias": "is_empty_fct_unused_sources_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_unused_sources"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_unused_sources_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.186715, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_unused_sources\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_unused_sources"}, "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_exposure_parents_materializations')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_exposure_parents_materializations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_exposure_parents_materializations_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_exposure_parents_materializations_.sql", "original_file_path": "models/marts/dag/dag.yml", "name": "is_empty_fct_exposure_parents_materializations_", "alias": "is_empty_fct_exposure_parents_materializations_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_exposure_parents_materializations"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/dag/dag.yml/is_empty_fct_exposure_parents_materializations_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.188685, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_exposure_parents_materializations\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_exposure_parents_materializations"}, "test.dbt_project_evaluator.dbt_utils_accepted_range_fct_test_coverage_test_coverage_pct___var_test_coverage_target_.09c9579c9e": {"raw_sql": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_accepted_range_fct_t_2fb17cd478c8bb66913b01eb1c42e454\") }}", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "{{ var('test_coverage_target') }}", "column_name": "test_coverage_pct", "model": "{{ get_where_subquery(ref('fct_test_coverage')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_test_coverage"]}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_fct_t_2fb17cd478c8bb66913b01eb1c42e454", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "tests", "dbt_utils_accepted_range_fct_test_coverage_test_coverage_pct___var_test_coverage_target_"], "unique_id": "test.dbt_project_evaluator.dbt_utils_accepted_range_fct_test_coverage_test_coverage_pct___var_test_coverage_target_.09c9579c9e", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "dbt_utils_accepted_range_fct_t_2fb17cd478c8bb66913b01eb1c42e454.sql", "original_file_path": "models/marts/tests/testing.yml", "name": "dbt_utils_accepted_range_fct_test_coverage_test_coverage_pct___var_test_coverage_target_", "alias": "dbt_utils_accepted_range_fct_t_2fb17cd478c8bb66913b01eb1c42e454", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_test_coverage"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/testing.yml/dbt_utils_accepted_range_fct_t_2fb17cd478c8bb66913b01eb1c42e454.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_accepted_range_fct_t_2fb17cd478c8bb66913b01eb1c42e454"}, "created_at": 1661541350.192158, "compiled_sql": "\n\nwith meet_condition as(\n  select *\n  from prod_analytics.dbt_project_evaluator.fct_test_coverage\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not test_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "test_coverage_pct", "file_key_name": "models.fct_test_coverage"}, "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_missing_primary_key_tests')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_missing_primary_key_tests"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "tests", "is_empty_fct_missing_primary_key_tests_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_missing_primary_key_tests_.sql", "original_file_path": "models/marts/tests/testing.yml", "name": "is_empty_fct_missing_primary_key_tests_", "alias": "is_empty_fct_missing_primary_key_tests_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_missing_primary_key_tests"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/tests/testing.yml/is_empty_fct_missing_primary_key_tests_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.1945999, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_missing_primary_key_tests\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_missing_primary_key_tests"}, "test.dbt_project_evaluator.dbt_utils_accepted_range_fct_chained_views_dependencies_distance__False___var_chained_views_threshold_.f54ef16663": {"raw_sql": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_utils_accepted_range_fct_c_f4e4ed7d4720ea1b89a90d20835948ae\") }}", "test_metadata": {"name": "accepted_range", "kwargs": {"max_value": "{{ var('chained_views_threshold') }}", "inclusive": false, "column_name": "distance", "model": "{{ get_where_subquery(ref('fct_chained_views_dependencies')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_chained_views_dependencies"]}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_fct_c_f4e4ed7d4720ea1b89a90d20835948ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "performance", "dbt_utils_accepted_range_fct_chained_views_dependencies_distance__False___var_chained_views_threshold_"], "unique_id": "test.dbt_project_evaluator.dbt_utils_accepted_range_fct_chained_views_dependencies_distance__False___var_chained_views_threshold_.f54ef16663", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "dbt_utils_accepted_range_fct_c_f4e4ed7d4720ea1b89a90d20835948ae.sql", "original_file_path": "models/marts/performance/performance.yml", "name": "dbt_utils_accepted_range_fct_chained_views_dependencies_distance__False___var_chained_views_threshold_", "alias": "dbt_utils_accepted_range_fct_c_f4e4ed7d4720ea1b89a90d20835948ae", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_chained_views_dependencies"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/performance/performance.yml/dbt_utils_accepted_range_fct_c_f4e4ed7d4720ea1b89a90d20835948ae.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "dbt_utils_accepted_range_fct_c_f4e4ed7d4720ea1b89a90d20835948ae"}, "created_at": 1661541350.1972191, "compiled_sql": "\n\nwith meet_condition as(\n  select *\n  from prod_analytics.dbt_project_evaluator.fct_chained_views_dependencies\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not distance < 5\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "distance", "file_key_name": "models.fct_chained_views_dependencies"}, "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_directories')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_directories"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_model_directories_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_model_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "name": "is_empty_fct_model_directories_", "alias": "is_empty_fct_model_directories_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_model_directories"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_model_directories_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.200763, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_model_directories\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_model_directories"}, "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_naming_conventions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_naming_conventions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_model_naming_conventions_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_model_naming_conventions_.sql", "original_file_path": "models/marts/structure/structure.yml", "name": "is_empty_fct_model_naming_conventions_", "alias": "is_empty_fct_model_naming_conventions_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_model_naming_conventions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_model_naming_conventions_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.202785, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_model_naming_conventions\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_model_naming_conventions"}, "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_source_directories')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_source_directories"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_source_directories_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_source_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "name": "is_empty_fct_source_directories_", "alias": "is_empty_fct_source_directories_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_source_directories"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_source_directories_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.204747, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_source_directories\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_source_directories"}, "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": {"raw_sql": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_test_directories')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_test_directories"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_test_directories_"], "unique_id": "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "is_empty_fct_test_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "name": "is_empty_fct_test_directories_", "alias": "is_empty_fct_test_directories_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_test_directories"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dbt_project_evaluator/models/marts/structure/structure.yml/is_empty_fct_test_directories_.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1661541350.206582, "compiled_sql": "\n\n    \n\n    select count(*) as n_records\n    from prod_analytics.dbt_project_evaluator.fct_test_directories\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.fct_test_directories"}, "test.linkedin_pages.dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation.d7c3d11ad1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ugc_post_id", "source_relation"], "model": "{{ get_where_subquery(ref('linkedin_pages__posts')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.linkedin_pages.linkedin_pages__posts"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["linkedin_pages", "dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation"], "unique_id": "test.linkedin_pages.dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation.d7c3d11ad1", "package_name": "linkedin_pages", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages", "path": "dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6.sql", "original_file_path": "models/linkedin_pages.yml", "name": "dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation", "alias": "dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["linkedin_pages__posts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/linkedin_pages/models/linkedin_pages.yml/dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_321ceac5241ebed20b1e3af34d1381f6"}, "created_at": 1661541350.2179022, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ugc_post_id, source_relation\n    from prod_analytics.linkedin_pages.linkedin_pages__posts\n    group by ugc_post_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.linkedin_pages__posts"}, "test.stripe.unique_stripe__balance_transactions_balance_transaction_id.313ec591b5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "balance_transaction_id", "model": "{{ get_where_subquery(ref('stripe__balance_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__balance_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe", "unique_stripe__balance_transactions_balance_transaction_id"], "unique_id": "test.stripe.unique_stripe__balance_transactions_balance_transaction_id.313ec591b5", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "unique_stripe__balance_transactions_balance_transaction_id.sql", "original_file_path": "models/stripe.yml", "name": "unique_stripe__balance_transactions_balance_transaction_id", "alias": "unique_stripe__balance_transactions_balance_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stripe__balance_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe/models/stripe.yml/unique_stripe__balance_transactions_balance_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.256722, "compiled_sql": "\n    \n    \n\nselect\n    balance_transaction_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe.stripe__balance_transactions\nwhere balance_transaction_id is not null\ngroup by balance_transaction_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "balance_transaction_id", "file_key_name": "models.stripe__balance_transactions"}, "test.stripe.unique_stripe__invoice_line_items_invoice_line_item_id.6d4544857c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_line_item_id", "model": "{{ get_where_subquery(ref('stripe__invoice_line_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__invoice_line_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe", "unique_stripe__invoice_line_items_invoice_line_item_id"], "unique_id": "test.stripe.unique_stripe__invoice_line_items_invoice_line_item_id.6d4544857c", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "unique_stripe__invoice_line_items_invoice_line_item_id.sql", "original_file_path": "models/stripe.yml", "name": "unique_stripe__invoice_line_items_invoice_line_item_id", "alias": "unique_stripe__invoice_line_items_invoice_line_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stripe__invoice_line_items"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe/models/stripe.yml/unique_stripe__invoice_line_items_invoice_line_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.257799, "compiled_sql": "\n    \n    \n\nselect\n    invoice_line_item_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe.stripe__invoice_line_items\nwhere invoice_line_item_id is not null\ngroup by invoice_line_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_line_item_id", "file_key_name": "models.stripe__invoice_line_items"}, "test.stripe.unique_stripe__subscription_line_items_invoice_line_item_id.a4a7f94547": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_line_item_id", "model": "{{ get_where_subquery(ref('stripe__subscription_line_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__subscription_line_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe", "unique_stripe__subscription_line_items_invoice_line_item_id"], "unique_id": "test.stripe.unique_stripe__subscription_line_items_invoice_line_item_id.a4a7f94547", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "unique_stripe__subscription_line_items_invoice_line_item_id.sql", "original_file_path": "models/stripe.yml", "name": "unique_stripe__subscription_line_items_invoice_line_item_id", "alias": "unique_stripe__subscription_line_items_invoice_line_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stripe__subscription_line_items"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe/models/stripe.yml/unique_stripe__subscription_line_items_invoice_line_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.258898, "compiled_sql": "\n    \n    \n\nselect\n    invoice_line_item_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe.stripe__subscription_line_items\nwhere invoice_line_item_id is not null\ngroup by invoice_line_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_line_item_id", "file_key_name": "models.stripe__subscription_line_items"}, "test.stripe.unique_stripe__subscription_details_subscription_id.8c3bcf1f61": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('stripe__subscription_details')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__subscription_details"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "prod_analytics", "schema": "dbt_test__audit", "fqn": ["stripe", "unique_stripe__subscription_details_subscription_id"], "unique_id": "test.stripe.unique_stripe__subscription_details_subscription_id.8c3bcf1f61", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "unique_stripe__subscription_details_subscription_id.sql", "original_file_path": "models/stripe.yml", "name": "unique_stripe__subscription_details_subscription_id", "alias": "unique_stripe__subscription_details_subscription_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stripe__subscription_details"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe/models/stripe.yml/unique_stripe__subscription_details_subscription_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661541350.259746, "compiled_sql": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom prod_analytics.stripe.stripe__subscription_details\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_id", "file_key_name": "models.stripe__subscription_details"}}, "sources": {"source.hubspot_source.hubspot.calendar_event": {"fqn": ["hubspot_source", "hubspot", "calendar_event"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.calendar_event", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "calendar_event", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "calendar_event", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a calendar event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avatar_url": {"name": "avatar_url", "description": "URL of image associated with social media event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_guid": {"name": "campaign_guid", "description": "Value of campaign GUID associated with Task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Type of event. If the event type is PUBLISHING_TASK, it is one of BLOG_POST, EMAIL, LANDING_PAGE, CUSTOM.\nIf event type is SOCIAL, it is one of twitter, facebook, linkedin, googlepluspages.\nIf event type is CONTENT, it is one of email, recurring-email, blog-post, landing-page, legacy-page, site-page.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_id": {"name": "category_id", "description": "For event type of PUBLISHING_TASK, a numeric value corresponding to the type of task; one of 3 (BLOG_POST), 2 (EMAIL), 1 (LANDING_PAGE), 0 (CUSTOM).\nFor event type of SOCIAL, this is 0.\nIf event type is CONTENT, it is one of 2 (email, recurring-email), 3 (blog-post), 1 (landing-page), 5 (legacy-page), 4 (site-page).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_group_id": {"name": "content_group_id", "description": "The ID of the content group (aka blog) that the associated Blog Post belongs to, if any.\nOtherwise null. Only populated for single task GETs and for Blog Post Tasks.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "ID value of the COS content object associated with the event, null for social or if nothing associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by": {"name": "created_by", "description": "HubSpot ID of the user that the event was created by.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of Event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_date": {"name": "event_date", "description": "If task, When the task is set to be due, otherwise when the event is/ was scheduled for; in milliseconds since the epoch.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "Type of calendar event; for tasks this is PUBLISHING_TASK, for COS Items, this is CONTENT, for social media events, this is SOCIAL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The unique ID of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_recurring": {"name": "is_recurring", "description": "Whether the event is recurring.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of Event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "TASK - HubSpot ID of the user that the task is assigned to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "preview_key": {"name": "preview_key", "description": "Preview key of content object; used for showing previews of unpublished items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "social_display_name": {"name": "social_display_name", "description": "Social media full name associate with event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "social_username": {"name": "social_username", "description": "Social media user name associated with event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "For type publishing task, value of TODO or DONE, for others, a value of SCHEDULED, PUBLISHED, PUBLISHED_OR_SCHEDULED.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "topic_ids": {"name": "topic_ids", "description": "The list of IDs of topics associated with the associated Blog Post, if any. Otherwise null. Only populated for single task GETs and for Blog Post Tasks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "Public URL of content item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.calendar_event", "created_at": 1661541350.260351}, "source.hubspot_source.hubspot.company": {"fqn": ["hubspot_source", "hubspot", "company"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.company", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "company", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "company", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a company in Hubspot.", "columns": {"id": {"name": "id", "description": "The ID of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record has been deleted in Hubspot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_name": {"name": "property_name", "description": "The name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_description": {"name": "property_description", "description": "A short statement about the company's mission and goals.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_createdate": {"name": "property_createdate", "description": "The date the company was added to your account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_industry": {"name": "property_industry", "description": "The type of business the company performs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_address": {"name": "property_address", "description": "The street address of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_address_2": {"name": "property_address_2", "description": "Additional address information for the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_city": {"name": "property_city", "description": "The city where the company is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_state": {"name": "property_state", "description": "The state where the company is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_country": {"name": "property_country", "description": "The country where the company is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_annualrevenue": {"name": "property_annualrevenue", "description": "The actual or estimated annual revenue of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.company", "created_at": 1661541350.260465}, "source.hubspot_source.hubspot.company_property_history": {"fqn": ["hubspot_source", "hubspot", "company_property_history"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.company_property_history", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "company_property_history", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "company_property_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a change to company record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The new value of the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.company_property_history", "created_at": 1661541350.260538}, "source.hubspot_source.hubspot.contact_merge_audit": {"fqn": ["hubspot_source", "hubspot", "contact_merge_audit"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.contact_merge_audit", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "contact_merge_audit", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_merge_audit", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record contains a contact merge event and the contacts effected by the merge.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canonical_vid": {"name": "canonical_vid", "description": "The contact ID of the contact which the vid_to_merge contact was merged into.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "entity_id": {"name": "entity_id", "description": "The ID of the related entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_properties_moved": {"name": "num_properties_moved", "description": "The number of properties which were removed from the merged contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "Timestamp of when the contacts were merged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The ID of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vid_to_merge": {"name": "vid_to_merge", "description": "The ID of the contact which was merged.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.contact_merge_audit", "created_at": 1661541350.260607}, "source.hubspot_source.hubspot.contact": {"fqn": ["hubspot_source", "hubspot", "contact"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.contact", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "contact", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 84, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a contact in Hubspot.", "columns": {"id": {"name": "id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_email": {"name": "property_email", "description": "The contact's email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_company": {"name": "property_company", "description": "The name of the contact's company", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_firstname": {"name": "property_firstname", "description": "The contact's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_lastname": {"name": "property_lastname", "description": "The contact's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_createdate": {"name": "property_createdate", "description": "The date that the contact was created in your HubSpot account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_jobtitle": {"name": "property_jobtitle", "description": "The contact's job title.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_annualrevenue": {"name": "property_annualrevenue", "description": "The contact's annual company revenue.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": "True and True"}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.contact", "created_at": 1661541350.260677}, "source.hubspot_source.hubspot.contact_form_submission": {"fqn": ["hubspot_source", "hubspot", "contact_form_submission"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.contact_form_submission", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "contact_form_submission", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_form_submission", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "TBD", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversion_id": {"name": "conversion_id", "description": "A Unique ID for the specific form conversion.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "form_id": {"name": "form_id", "description": "The GUID of the form that the submission belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_url": {"name": "page_url", "description": "The URL that the form was submitted on, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "A Unix timestamp in milliseconds of the time the submission occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the page that the form was submitted on. This will default to the name of the form if no title is provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.contact_form_submission", "created_at": 1661541350.260743}, "source.hubspot_source.hubspot.contact_list": {"fqn": ["hubspot_source", "hubspot", "contact_list"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.contact_list", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "contact_list", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_list", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a contact list in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp of the time the list was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleteable": {"name": "deleteable", "description": "If this is false, this is a system list and cannot be deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dynamic": {"name": "dynamic", "description": "Whether the contact list is dynamic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the contact list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_error": {"name": "metadata_error", "description": "Any errors that happened the last time the list was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_last_processing_state_change_at": {"name": "metadata_last_processing_state_change_at", "description": "A timestamp of the last time that the processing state changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_last_size_change_at": {"name": "metadata_last_size_change_at", "description": "A timestamp of the last time that the size of the list changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_processing": {"name": "metadata_processing", "description": "One of DONE, REFRESHING, INITIALIZING, or PROCESSING.\nDONE indicates the list has finished processing, any other value indicates that list membership is being evaluated.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata_size": {"name": "metadata_size", "description": "The approximate number of contacts in the list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the contact list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp of the time that the list was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.contact_list", "created_at": 1661541350.260818}, "source.hubspot_source.hubspot.contact_list_member": {"fqn": ["hubspot_source", "hubspot", "contact_list_member"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.contact_list_member", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "contact_list_member", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_list_member", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a contact and a contact list.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "added_at": {"name": "added_at", "description": "The timestamp a contact was added to a list.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_list_id": {"name": "contact_list_id", "description": "The ID of the related contact list.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.contact_list_member", "created_at": 1661541350.260879}, "source.hubspot_source.hubspot.contact_property_history": {"fqn": ["hubspot_source", "hubspot", "contact_property_history"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.contact_property_history", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "contact_property_history", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "contact_property_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 84, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents a change to contact record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The new value of the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": "True and True"}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.contact_property_history", "created_at": 1661541350.2609432}, "source.hubspot_source.hubspot.deal": {"fqn": ["hubspot_source", "hubspot", "deal"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.deal", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "deal", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a deal in Hubspot.", "columns": {"id": {"name": "id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_pipeline_id": {"name": "deal_pipeline_id", "description": "The ID of the deal's pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_pipeline_stage_id": {"name": "deal_pipeline_stage_id", "description": "The ID of the deal's pipeline stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_dealname": {"name": "property_dealname", "description": "The name you have given this deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_description": {"name": "property_description", "description": "A brief description of the deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_amount": {"name": "property_amount", "description": "The total value of the deal in the deal's currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_closedate": {"name": "property_closedate", "description": "The day the deal is expected to close, or was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_createdate": {"name": "property_createdate", "description": "The date the deal was created. This property is set automatically by HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.deal", "created_at": 1661541350.26101}, "source.hubspot_source.hubspot.deal_stage": {"fqn": ["hubspot_source", "hubspot", "deal_stage"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.deal_stage", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "deal_stage", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_stage", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a deal stage.", "columns": {"_fivetran_active": {"name": "_fivetran_active", "description": "Boolean indicating whether the deal stage is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_end": {"name": "_fivetran_end", "description": "The Fivetran calculated exist time of the deal stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_start": {"name": "_fivetran_start", "description": "The date the deal stage was entered.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_entered": {"name": "date_entered", "description": "The timestamp the deal stage was entered.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "Reference to the deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The relevant source of the deal stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "Reference to the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The value of the deal stage. Typically the name of the stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.deal_stage", "created_at": 1661541350.261075}, "source.hubspot_source.hubspot.deal_company": {"fqn": ["hubspot_source", "hubspot", "deal_company"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.deal_company", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "deal_company", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_company", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a deal and company.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.deal_company", "created_at": 1661541350.261133}, "source.hubspot_source.hubspot.deal_contact": {"fqn": ["hubspot_source", "hubspot", "deal_contact"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.deal_contact", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "deal_contact", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_contact", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a deal and a contact.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.deal_contact", "created_at": 1661541350.261193}, "source.hubspot_source.hubspot.deal_pipeline": {"fqn": ["hubspot_source", "hubspot", "deal_pipeline"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.deal_pipeline", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "deal_pipeline", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_pipeline", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a pipeline in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the stage is currently in use.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the pipelines appear when viewed in HubSpot", "meta": {}, "data_type": null, "quote": null, "tags": []}, "label": {"name": "label", "description": "The human-readable label for the pipeline. The label is used when showing the pipeline in HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "The ID of the pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.deal_pipeline", "created_at": 1661541350.261256}, "source.hubspot_source.hubspot.deal_pipeline_stage": {"fqn": ["hubspot_source", "hubspot", "deal_pipeline_stage"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.deal_pipeline_stage", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "deal_pipeline_stage", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_pipeline_stage", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a pipeline stage in Hubspot.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the pipeline stage is currently in use.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "closed_won": {"name": "closed_won", "description": "Whether the stage represents a Closed Won deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "label": {"name": "label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "The ID of the related pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "probability": {"name": "probability", "description": "The probability that the deal will close. Used for the deal forecast.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "The ID of the pipeline stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.deal_pipeline_stage", "created_at": 1661541350.261322}, "source.hubspot_source.hubspot.deal_property_history": {"fqn": ["hubspot_source", "hubspot", "deal_property_history"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.deal_property_history", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "deal_property_history", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "deal_property_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a change to deal record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The new value of the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.deal_property_history", "created_at": 1661541350.2613828}, "source.hubspot_source.hubspot.email_campaign": {"fqn": ["hubspot_source", "hubspot", "email_campaign"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_campaign", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_campaign", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_campaign", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an email campaign in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The app ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "The app name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_id": {"name": "content_id", "description": "The ID of the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_included": {"name": "num_included", "description": "The number of messages included as part of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_queued": {"name": "num_queued", "description": "The number of messages queued as part of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sub_type": {"name": "sub_type", "description": "The email campaign sub-type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject of the email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The email campaign type.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_campaign", "created_at": 1661541350.261448}, "source.hubspot_source.hubspot.email_event": {"fqn": ["hubspot_source", "hubspot", "email_event"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_event", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_event", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 84, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents an email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "The ID of the app that sent the email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "caused_by_created": {"name": "caused_by_created", "description": "The timestamp of the event that caused this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "caused_by_id": {"name": "caused_by_id", "description": "The event ID which uniquely identifies the event which directly caused this event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "The created timestamp of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_campaign_id": {"name": "email_campaign_id", "description": "The ID of the related email campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "filtered_event": {"name": "filtered_event", "description": "A boolean representing whether the event has been filtered out of reporting based on customer reports settings or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "obsoleted_by_created": {"name": "obsoleted_by_created", "description": "The timestamp of the event that made the current event obsolete.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "obsoleted_by_id": {"name": "obsoleted_by_id", "description": "The event ID which uniquely identifies the follow-on event which makes this current event obsolete. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "The email address of the contact related to the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sent_by_created": {"name": "sent_by_created", "description": "The timestamp of the SENT event related to this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sent_by_id": {"name": "sent_by_id", "description": "The event ID which uniquely identifies the email message's SENT event. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of event.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"is_enabled": "True and True"}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_event", "created_at": 1661541350.2615192}, "source.hubspot_source.hubspot.email_event_bounce": {"fqn": ["hubspot_source", "hubspot", "email_event_bounce"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_event_bounce", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_event_bounce", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_bounce", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a BOUNCE email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "The best-guess of the type of bounce encountered.\nIf an appropriate category couldn't be determined, this property is omitted. See below for the possible values.\nNote that this is a derived value, and may be modified at any time to improve the accuracy of classification.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "response": {"name": "response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status code returned from the recipient's email server.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_event_bounce", "created_at": 1661541350.261727}, "source.hubspot_source.hubspot.email_event_click": {"fqn": ["hubspot_source", "hubspot", "email_event_click"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_event_click", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_event_click", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_click", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a CLICK email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referer": {"name": "referer", "description": "The URL of the webpage that linked to the URL clicked. Whether this is provided, and what its value is, is determined by the recipient's email client.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL within the message that the recipient clicked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_event_click", "created_at": 1661541350.261794}, "source.hubspot_source.hubspot.email_event_deferred": {"fqn": ["hubspot_source", "hubspot", "email_event_deferred"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_event_deferred", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_event_deferred", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_deferred", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a DEFERRED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attempt": {"name": "attempt", "description": "The delivery attempt number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "response": {"name": "response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_event_deferred", "created_at": 1661541350.261857}, "source.hubspot_source.hubspot.email_event_delivered": {"fqn": ["hubspot_source", "hubspot", "email_event_delivered"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_event_delivered", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_event_delivered", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_delivered", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a DELIVERED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "response": {"name": "response", "description": "The full response from the recipient's email server.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "smtp_id": {"name": "smtp_id", "description": "An ID attached to the message by HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_event_delivered", "created_at": 1661541350.261918}, "source.hubspot_source.hubspot.email_event_dropped": {"fqn": ["hubspot_source", "hubspot", "email_event_dropped"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_event_dropped", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_event_dropped", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_dropped", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a DROPPED email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bcc": {"name": "bcc", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cc": {"name": "cc", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drop_message": {"name": "drop_message", "description": "The raw message describing why the email message was dropped. This will usually provide additional details beyond 'dropReason'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drop_reason": {"name": "drop_reason", "description": "The reason why the email message was dropped. See below for the possible values.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from": {"name": "from", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reply_to": {"name": "reply_to", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_event_dropped", "created_at": 1661541350.261983}, "source.hubspot_source.hubspot.email_event_forward": {"fqn": ["hubspot_source", "hubspot", "email_event_forward"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_event_forward", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_event_forward", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_forward", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a FORWARD email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_event_forward", "created_at": 1661541350.262044}, "source.hubspot_source.hubspot.email_event_open": {"fqn": ["hubspot_source", "hubspot", "email_event_open"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_event_open", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_event_open", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_open", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a OPEN email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration": {"name": "duration", "description": "If provided and nonzero, the approximate number of milliseconds the user had opened the email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_event_open", "created_at": 1661541350.2621062}, "source.hubspot_source.hubspot.email_event_print": {"fqn": ["hubspot_source", "hubspot", "email_event_print"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_event_print", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_event_print", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_print", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a PRINT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser": {"name": "browser", "description": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_event_print", "created_at": 1661541350.2621682}, "source.hubspot_source.hubspot.email_event_sent": {"fqn": ["hubspot_source", "hubspot", "email_event_sent"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_event_sent", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_event_sent", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_sent", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a SENT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bcc": {"name": "bcc", "description": "The 'cc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cc": {"name": "cc", "description": "The 'bcc' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from": {"name": "from", "description": "The 'from' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reply_to": {"name": "reply_to", "description": "The 'reply-to' field of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject line of the email message.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_event_sent", "created_at": 1661541350.262231}, "source.hubspot_source.hubspot.email_event_spam_report": {"fqn": ["hubspot_source", "hubspot", "email_event_spam_report"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_event_spam_report", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_event_spam_report", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_spam_report", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a SPAM_REPORT email event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The contact's IP address when the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_event_spam_report", "created_at": 1661541350.262291}, "source.hubspot_source.hubspot.email_event_status_change": {"fqn": ["hubspot_source", "hubspot", "email_event_status_change"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_event_status_change", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_event_status_change", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_event_status_change", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a STATUS_CHANGE email event in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bounced": {"name": "bounced", "description": "A HubSpot employee explicitly initiated the status change to block messages to the recipient.\n(Note this usage has been deprecated in favor of dropping messages with a 'dropReason' of BLOCKED_ADDRESS.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_subscription_status": {"name": "portal_subscription_status", "description": "The recipient's portal subscription status.\nNote that if this is 'UNSUBSCRIBED', the property 'subscriptions' is not necessarily an empty array, nor are all\nsubscriptions contained in it necessarily going to have their statuses set to 'UNSUBSCRIBED'.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requested_by": {"name": "requested_by", "description": "The email address of the person requesting the change on behalf of the recipient. If not applicable, this property is omitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the subscription change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscriptions": {"name": "subscriptions", "description": "An array of JSON objects representing the status of subscriptions for the recipient.\nEach JSON subscription object is comprised of the properties: 'id', 'status'.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_event_status_change", "created_at": 1661541350.262354}, "source.hubspot_source.hubspot.email_subscription": {"fqn": ["hubspot_source", "hubspot", "email_subscription"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_subscription", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_subscription", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_subscription", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an email subscription in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the subscription is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "The description of the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the email subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the email subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_subscription", "created_at": 1661541350.2624152}, "source.hubspot_source.hubspot.email_subscription_change": {"fqn": ["hubspot_source", "hubspot", "email_subscription_change"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.email_subscription_change", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "email_subscription_change", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "email_subscription_change", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a change to an email subscription in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "caused_by_event_id": {"name": "caused_by_event_id", "description": "The ID of the event that caused the subscription change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change": {"name": "change", "description": "The change which occurred. This enumeration is specific to the 'changeType'; see below for the possible values.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_type": {"name": "change_type", "description": "The type of change which occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subscription_id": {"name": "email_subscription_id", "description": "The ID of the related email subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "The email address of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the subscription change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "The timestamp when this change occurred. If 'causedByEvent' is present, this will be absent.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.email_subscription_change", "created_at": 1661541350.262478}, "source.hubspot_source.hubspot.engagement": {"fqn": ["hubspot_source", "hubspot", "engagement"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.engagement", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "engagement", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an engagement", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the engagement is currently being shown in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "activity_type": {"name": "activity_type", "description": "The engagement's activity type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp representing when the engagement was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated": {"name": "last_updated", "description": "A timestamp in representing when the engagement was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the engagement's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "A timestamp in representing the time that the engagement should appear in the timeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "One of NOTE, EMAIL, TASK, MEETING, or CALL, the type of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.engagement", "created_at": 1661541350.2625432}, "source.hubspot_source.hubspot.engagement_call": {"fqn": ["hubspot_source", "hubspot", "engagement_call"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.engagement_call", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "engagement_call", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_call", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a CALL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "body": {"name": "body", "description": "The details or notes of the call", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disposition": {"name": "disposition", "description": "The internal ID for the call outcome.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration_milliseconds": {"name": "duration_milliseconds", "description": "The length of the call in milliseconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_account_id": {"name": "external_account_id", "description": "For calls made in HubSpot, this will be the internal ID of the account used to make the call.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_id": {"name": "external_id", "description": "For calls made in HubSpot, this will be the internal ID of the call.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_number": {"name": "from_number", "description": "The phone number that was used as the from number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recording_url": {"name": "recording_url", "description": "The URL of the recording file .", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Will be COMPLETED once the call is finished.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_number": {"name": "to_number", "description": "The phone number that was called.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.engagement_call", "created_at": 1661541350.262613}, "source.hubspot_source.hubspot.engagement_company": {"fqn": ["hubspot_source", "hubspot", "engagement_company"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.engagement_company", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "engagement_company", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_company", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a company and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.engagement_company", "created_at": 1661541350.262672}, "source.hubspot_source.hubspot.engagement_contact": {"fqn": ["hubspot_source", "hubspot", "engagement_contact"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.engagement_contact", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "engagement_contact", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_contact", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a contact and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.engagement_contact", "created_at": 1661541350.262729}, "source.hubspot_source.hubspot.engagement_deal": {"fqn": ["hubspot_source", "hubspot", "engagement_deal"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.engagement_deal", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "engagement_deal", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_deal", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a deal and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.engagement_deal", "created_at": 1661541350.262787}, "source.hubspot_source.hubspot.engagement_email": {"fqn": ["hubspot_source", "hubspot", "engagement_email"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.engagement_email", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "engagement_email", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_email", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an EMAIL engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attached_video_id": {"name": "attached_video_id", "description": "The ID of the video attached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attached_video_opened": {"name": "attached_video_opened", "description": "Whether the the attached video was opened.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attached_video_watched": {"name": "attached_video_watched", "description": "Whether the the attached video was watched.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_event_id_created": {"name": "email_send_event_id_created", "description": "When the SENT event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_send_event_id_id": {"name": "email_send_event_id_id", "description": "The ID of the related SENT email event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_message": {"name": "error_message", "description": "The error message, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_email": {"name": "from_email", "description": "The email address of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_first_name": {"name": "from_first_name", "description": "The first name of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_last_name": {"name": "from_last_name", "description": "The last name of the sender.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "html": {"name": "html", "description": "The body of the HTML email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media_processing_status": {"name": "media_processing_status", "description": "The processing status of the media content in the email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "The ID of the message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sent_via": {"name": "sent_via", "description": "How the email was sent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject of the email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "The body of the text-only email.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "The ID of the email thread.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.engagement_email", "created_at": 1661541350.2628639}, "source.hubspot_source.hubspot.engagement_email_cc": {"fqn": ["hubspot_source", "hubspot", "engagement_email_cc"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.engagement_email_cc", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "engagement_email_cc", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_email_cc", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a CC'd email address as part of an EMAIL engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.engagement_email_cc", "created_at": 1661541350.2629251}, "source.hubspot_source.hubspot.engagement_email_to": {"fqn": ["hubspot_source", "hubspot", "engagement_email_to"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.engagement_email_to", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "engagement_email_to", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_email_to", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a TO email address as part of an EMAIL engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.engagement_email_to", "created_at": 1661541350.262986}, "source.hubspot_source.hubspot.engagement_meeting": {"fqn": ["hubspot_source", "hubspot", "engagement_meeting"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.engagement_meeting", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "engagement_meeting", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_meeting", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a MEETING engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "body": {"name": "body", "description": "The details or body of the meeting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "A timestamp representing the end time of the meeting", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_url": {"name": "external_url", "description": "The external URL of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meeting_outcome": {"name": "meeting_outcome", "description": "The meeting outcome.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pre_meeting_prospect_reminders": {"name": "pre_meeting_prospect_reminders", "description": "TBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the meeting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The internal ID of the meeting source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "A timestamp representing the start time of the meeting", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title or subject of the meeting", "meta": {}, "data_type": null, "quote": null, "tags": []}, "web_conference_meeting_id": {"name": "web_conference_meeting_id", "description": "The ID of the web conference meeting.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.engagement_meeting", "created_at": 1661541350.263065}, "source.hubspot_source.hubspot.engagement_note": {"fqn": ["hubspot_source", "hubspot", "engagement_note"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.engagement_note", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "engagement_note", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_note", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a NOTE engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "body": {"name": "body", "description": "The body of the note. The body has a limit of 65536 characters.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.engagement_note", "created_at": 1661541350.263155}, "source.hubspot_source.hubspot.engagement_task": {"fqn": ["hubspot_source", "hubspot", "engagement_task"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.engagement_task", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "engagement_task", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "engagement_task", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a TASK engagement event.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "body": {"name": "body", "description": "The body or details of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completion_date": {"name": "completion_date", "description": "The timestamp the task was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the engagement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "for_object_type": {"name": "for_object_type", "description": "One of CONTACT or COMPANY, what object type the task is for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_all_day": {"name": "is_all_day", "description": "Whether it is an all day task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority": {"name": "priority", "description": "The priority of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "probability_to_complete": {"name": "probability_to_complete", "description": "The probability that the task will be completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "The subject or title of the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_type": {"name": "task_type", "description": "The type of task", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.engagement_task", "created_at": 1661541350.263223}, "source.hubspot_source.hubspot.form": {"fqn": ["hubspot_source", "hubspot", "form"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.form", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "form", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "form", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a Hubspot form.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp for when the form was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "css_class": {"name": "css_class", "description": "The CSS classes assigned to the form.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "follow_up_id": {"name": "follow_up_id", "description": "This field is no longer used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "guid": {"name": "guid", "description": "The internal ID of the form", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lead_nurturing_campaign_id": {"name": "lead_nurturing_campaign_id", "description": "TBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "method": {"name": "method", "description": "This field is no longer used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the form", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notify_recipients": {"name": "notify_recipients", "description": "A comma-separated list of user IDs that should receive submission notifications.\nEmail addresses will be returned for individuals who aren't users.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "redirect": {"name": "redirect", "description": "The URL that the visitor will be redirected to after filling out the form.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submit_text": {"name": "submit_text", "description": "The text used for the submit button.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp for when the form was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.form", "created_at": 1661541350.263294}, "source.hubspot_source.hubspot.owner": {"fqn": ["hubspot_source", "hubspot", "owner"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.owner", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "owner", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "owner", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an owner/user in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "A timestamp for when the owner was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The email address of the owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The first name of the owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The last name of the owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "The ID of the owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "A timestamp for when the owner was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.owner", "created_at": 1661541350.26336}, "source.hubspot_source.hubspot.ticket_company": {"fqn": ["hubspot_source", "hubspot", "ticket_company"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.ticket_company", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "ticket_company", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_company", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a ticket and company.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "The ID of the related company.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.ticket_company", "created_at": 1661541350.2634182}, "source.hubspot_source.hubspot.ticket_contact": {"fqn": ["hubspot_source", "hubspot", "ticket_contact"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.ticket_contact", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "ticket_contact", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_contact", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a ticket and a contact.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contact_id": {"name": "contact_id", "description": "The ID of the related contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.ticket_contact", "created_at": 1661541350.263475}, "source.hubspot_source.hubspot.ticket_deal": {"fqn": ["hubspot_source", "hubspot", "ticket_deal"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.ticket_deal", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "ticket_deal", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_deal", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a ticket and a deal.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deal_id": {"name": "deal_id", "description": "The ID of the related deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.ticket_deal", "created_at": 1661541350.263531}, "source.hubspot_source.hubspot.ticket_engagement": {"fqn": ["hubspot_source", "hubspot", "ticket_engagement"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.ticket_engagement", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "ticket_engagement", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_engagement", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a 'link' between a ticket and an engagement.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_id": {"name": "engagement_id", "description": "The ID of the related deal.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.ticket_engagement", "created_at": 1661541350.263587}, "source.hubspot_source.hubspot.ticket_pipeline_stage": {"fqn": ["hubspot_source", "hubspot", "ticket_pipeline_stage"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.ticket_pipeline_stage", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "ticket_pipeline_stage", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_pipeline_stage", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a ticket pipeline stage.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether the pipeline stage is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Boolean indicating if the pipeline stage is closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "label": {"name": "label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "The ID of the pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stage_id": {"name": "stage_id", "description": "The ID of the pipeline stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_state": {"name": "ticket_state", "description": "State of the ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.ticket_pipeline_stage", "created_at": 1661541350.263653}, "source.hubspot_source.hubspot.ticket_pipeline": {"fqn": ["hubspot_source", "hubspot", "ticket_pipeline"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.ticket_pipeline", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "ticket_pipeline", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_pipeline", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a ticket pipeline.", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether the pipeline is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_order": {"name": "display_order", "description": "Used to determine the order in which the stages appear when viewed in HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "label": {"name": "label", "description": "The human-readable label for the stage. The label is used when showing the stage in HubSpot.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_type_id": {"name": "object_type_id", "description": "Reference to the object type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pipeline_id": {"name": "pipeline_id", "description": "Reference to the pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.ticket_pipeline", "created_at": 1661541350.263718}, "source.hubspot_source.hubspot.ticket_property_history": {"fqn": ["hubspot_source", "hubspot", "ticket_property_history"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.ticket_property_history", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "ticket_property_history", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket_property_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a change to ticket record in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source (reason) of the change.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The ID of the object that caused the change, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp_instant": {"name": "timestamp_instant", "description": "The timestamp the changed occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ID of the related ticket record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the field being changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "The new value of the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.ticket_property_history", "created_at": 1661541350.2637792}, "source.hubspot_source.hubspot.ticket": {"fqn": ["hubspot_source", "hubspot", "ticket"], "database": "raw", "schema": "hubspot", "unique_id": "source.hubspot_source.hubspot.ticket", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "models/src_hubspot.yml", "original_file_path": "models/src_hubspot.yml", "name": "ticket", "source_name": "hubspot", "source_description": "", "loader": "Fivetran", "identifier": "ticket", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a ticket in Hubspot.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "ID of the ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the record was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portal_id": {"name": "portal_id", "description": "The hub ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_closed_date": {"name": "property_closed_date", "description": "The date the ticket was closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_createdate": {"name": "property_createdate", "description": "The date the ticket was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_first_agent_reply_date": {"name": "property_first_agent_reply_date", "description": "the date for the first agent reply on the ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_hs_pipeline": {"name": "property_hs_pipeline", "description": "The ID of the ticket's pipeline.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_hs_pipeline_stage": {"name": "property_hs_pipeline_stage", "description": "The ID of the ticket's pipeline stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_hs_ticket_priority": {"name": "property_hs_ticket_priority", "description": "The priority of the ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_hs_ticket_category": {"name": "property_hs_ticket_category", "description": "The category of the ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_hubspot_owner_id": {"name": "property_hubspot_owner_id", "description": "The ID of the deal's owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_subject": {"name": "property_subject", "description": "Short summary of ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "property_content": {"name": "property_content", "description": "Text in body of the ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.hubspot.ticket", "created_at": 1661541350.2638478}, "source.linkedin_pages_source.linkedin_pages.share_statistic": {"fqn": ["linkedin_pages_source", "linkedin_pages", "share_statistic"], "database": "raw", "schema": "linkedin_company_pages", "unique_id": "source.linkedin_pages_source.linkedin_pages.share_statistic", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "models/src_linkedin_pages.yml", "original_file_path": "models/src_linkedin_pages.yml", "name": "share_statistic", "source_name": "linkedin_pages", "source_description": "", "loader": "Fivetran", "identifier": "share_statistic", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represnts the performance of a Linkedin share.", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "The Fivetran ID of the record", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_organization_entity_urn": {"name": "_organization_entity_urn", "description": "The organizational entity URN for which the statistics represents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_share_entity_urn": {"name": "_share_entity_urn", "description": "The share URN for describing individual share statistics. Is blank for aggregate share statistics.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_count": {"name": "click_count", "description": "Number of clicks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment_count": {"name": "comment_count", "description": "Number of comments.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement": {"name": "engagement", "description": "Number of organic clicks, likes, comments, and shares over impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "impression_count": {"name": "impression_count", "description": "Number of impressions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "like_count": {"name": "like_count", "description": "Number of likes. This field can become negative when members who liked a sponsored share later unlike it. The like is not counted since it is not organic, but the unlike is counted as organic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_count": {"name": "share_count", "description": "Number of shares.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.linkedin_company_pages.share_statistic", "created_at": 1661541350.2639182}, "source.linkedin_pages_source.linkedin_pages.ugc_post_share_statistic": {"fqn": ["linkedin_pages_source", "linkedin_pages", "ugc_post_share_statistic"], "database": "raw", "schema": "linkedin_company_pages", "unique_id": "source.linkedin_pages_source.linkedin_pages.ugc_post_share_statistic", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "models/src_linkedin_pages.yml", "original_file_path": "models/src_linkedin_pages.yml", "name": "ugc_post_share_statistic", "source_name": "linkedin_pages", "source_description": "", "loader": "Fivetran", "identifier": "ugc_post_share_statistic", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Mapping table between UGC posts and share statistics", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "share_statistic_id": {"name": "share_statistic_id", "description": "The ID of the share statistic record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "The ID of the UGC post record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.linkedin_company_pages.ugc_post_share_statistic", "created_at": 1661541350.263977}, "source.linkedin_pages_source.linkedin_pages.ugc_post_history": {"fqn": ["linkedin_pages_source", "linkedin_pages", "ugc_post_history"], "database": "raw", "schema": "linkedin_company_pages", "unique_id": "source.linkedin_pages_source.linkedin_pages.ugc_post_history", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "models/src_linkedin_pages.yml", "original_file_path": "models/src_linkedin_pages.yml", "name": "ugc_post_history", "source_name": "linkedin_pages", "source_description": "", "loader": "Fivetran", "identifier": "ugc_post_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents a version of a UGC post.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "author": {"name": "author", "description": "Urn of the author of this content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_application": {"name": "client_application", "description": "Urn of the client application that created this content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "container_entity": {"name": "container_entity", "description": "Urn of container entity that contains the user generated content such as a Group or a Story.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_certification_record": {"name": "content_certification_record", "description": "he content certification record associated with this content. Used to maintain information about the content's visibility and spam status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_actor": {"name": "created_actor", "description": "User who created the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_time": {"name": "created_time", "description": "Timestamp when the content was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_actor": {"name": "deleted_actor", "description": "User who deleted the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_time": {"name": "deleted_time", "description": "Timestamp when the content was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "distribution_distributed_via_follow_feed": {"name": "distribution_distributed_via_follow_feed", "description": "Indicates whether the content was distributed via the follow feed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "distribution_external_distribution_channels": {"name": "distribution_external_distribution_channels", "description": "List of external distribution channels that the content was distributed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "distribution_feed_distribution": {"name": "distribution_feed_distribution", "description": "Specifies the type of feed distribution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_published_at": {"name": "first_published_at", "description": "The time at which this content was first published.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique id for this object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_actor": {"name": "last_modified_actor", "description": "User who last modified the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "Timestamp when the content was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lifecycle_state": {"name": "lifecycle_state", "description": "The current state of the content.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "response_context_parent": {"name": "response_context_parent", "description": "The content that a piece of content is a response to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "response_context_root": {"name": "response_context_root", "description": "The greatest ancestor content that a piece of content is a response to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_primary_landing_page_url": {"name": "specific_content_primary_landing_page_url", "description": "The main landing page URL of the share.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_attributes": {"name": "specific_content_share_commentary_attributes", "description": "User generated attributes in the text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_inferred_locale": {"name": "specific_content_share_commentary_inferred_locale", "description": "The locale that may have be inferred for this text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_commentary_text": {"name": "specific_content_share_commentary_text", "description": "The text content that may be attributed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_content_share_media_category": {"name": "specific_content_share_media_category", "description": "The type of media contained within the media field of this object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_audience_targeted_entities": {"name": "target_audience_targeted_entities", "description": "Intended audience or best fit audiences for this content as decided by the owner.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "Version tag of the entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visibility": {"name": "visibility", "description": "Visibility restrictions on content.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.linkedin_company_pages.ugc_post_history", "created_at": 1661541350.264066}, "source.linkedin_pages_source.linkedin_pages.ugc_post_share_content_media": {"fqn": ["linkedin_pages_source", "linkedin_pages", "ugc_post_share_content_media"], "database": "raw", "schema": "linkedin_company_pages", "unique_id": "source.linkedin_pages_source.linkedin_pages.ugc_post_share_content_media", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "models/src_linkedin_pages.yml", "original_file_path": "models/src_linkedin_pages.yml", "name": "ugc_post_share_content_media", "source_name": "linkedin_pages", "source_description": "", "loader": "Fivetran", "identifier": "ugc_post_share_content_media", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents content media shared as part of a UGC post.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_attributes": {"name": "description_attributes", "description": "User generated attributes in the text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_inferred_locale": {"name": "description_inferred_locale", "description": "The locale that may have be inferred for this text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_text": {"name": "description_text", "description": "The text content that may be attributed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page_title": {"name": "landing_page_title", "description": "If present, this content entity will be rendered as a CTA with landingPageTitle as the CTA text and landingPageUrl as the click through url.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page_url": {"name": "landing_page_url", "description": "The click through url. Maximum length is 2000 characters.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_time": {"name": "last_modified_time", "description": "The timestamp when the content was last modified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "media": {"name": "media", "description": "The URN of the media shared.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_url": {"name": "original_url", "description": "URL whose content is summarized", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the availability of this media.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thumbnails": {"name": "thumbnails", "description": "The thumbnail saved from the ingestion of this article.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_attributes": {"name": "title_attributes", "description": "User generated attributes in the text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_inferred_locale": {"name": "title_inferred_locale", "description": "The locale that may have be inferred for this text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title_text": {"name": "title_text", "description": "The text content that may be attributed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "The ID of the UGC post record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.linkedin_company_pages.ugc_post_share_content_media", "created_at": 1661541350.26416}, "source.linkedin_pages_source.linkedin_pages.organization": {"fqn": ["linkedin_pages_source", "linkedin_pages", "organization"], "database": "raw", "schema": "linkedin_company_pages", "unique_id": "source.linkedin_pages_source.linkedin_pages.organization", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "models/src_linkedin_pages.yml", "original_file_path": "models/src_linkedin_pages.yml", "name": "organization", "source_name": "linkedin_pages", "source_description": "", "loader": "Fivetran", "identifier": "organization", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Each record represents an organization.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cover_photo_v_2_crop_info_height": {"name": "cover_photo_v_2_crop_info_height", "description": "The height of the cover photo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cover_photo_v_2_crop_info_width": {"name": "cover_photo_v_2_crop_info_width", "description": "The width of the cover photo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cover_photo_v_2_crop_info_x": {"name": "cover_photo_v_2_crop_info_x", "description": "The X coordinate of the corner of the cover photo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cover_photo_v_2_crop_info_y": {"name": "cover_photo_v_2_crop_info_y", "description": "The Y coordinate of the corner of the cover photo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cover_photo_v_2_cropped": {"name": "cover_photo_v_2_cropped", "description": "Location of the cropped image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cover_photo_v_2_original": {"name": "cover_photo_v_2_original", "description": "Location of the original image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_locale_country": {"name": "default_locale_country", "description": "The default country of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_locale_language": {"name": "default_locale_language", "description": "The default language of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_localized": {"name": "description_localized", "description": "The localized description of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_preferred_locale_country": {"name": "description_preferred_locale_country", "description": "The preferred country of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description_preferred_locale_language": {"name": "description_preferred_locale_language", "description": "The preferred language of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "founded_on_day": {"name": "founded_on_day", "description": "The day of the month that the organization was founded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "founded_on_month": {"name": "founded_on_month", "description": "The month of the year that the organization was founded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "founded_on_year": {"name": "founded_on_year", "description": "The year that the organization was founded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique id for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "localized_description": {"name": "localized_description", "description": "The localized description of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "localized_name": {"name": "localized_name", "description": "The localized name of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "localized_website": {"name": "localized_website", "description": "The localized website of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logo_v_2_crop_info_height": {"name": "logo_v_2_crop_info_height", "description": "The height of the logo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logo_v_2_crop_info_width": {"name": "logo_v_2_crop_info_width", "description": "The width of the logo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logo_v_2_crop_info_x": {"name": "logo_v_2_crop_info_x", "description": "The X coordinate of the corner of the logo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logo_v_2_crop_info_y": {"name": "logo_v_2_crop_info_y", "description": "The Y coordinate of the corner of the logo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logo_v_2_cropped": {"name": "logo_v_2_cropped", "description": "Location of the cropped image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "logo_v_2_original": {"name": "logo_v_2_original", "description": "Location of the original image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_localized": {"name": "name_localized", "description": "The localized name of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_preferred_locale_country": {"name": "name_preferred_locale_country", "description": "The preferred country of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name_preferred_locale_language": {"name": "name_preferred_locale_language", "description": "The preferred language of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_status": {"name": "organization_status", "description": "The status of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_type": {"name": "organization_type", "description": "The type of organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overview_photo_v_2_crop_info_height": {"name": "overview_photo_v_2_crop_info_height", "description": "The height of the overview photo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overview_photo_v_2_crop_info_width": {"name": "overview_photo_v_2_crop_info_width", "description": "The width of the overview photo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overview_photo_v_2_crop_info_x": {"name": "overview_photo_v_2_crop_info_x", "description": "The X coordinate of the corner of the overview photo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overview_photo_v_2_crop_info_y": {"name": "overview_photo_v_2_crop_info_y", "description": "The Y coordinate of the corner of the overview photo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overview_photo_v_2_cropped": {"name": "overview_photo_v_2_cropped", "description": "Location of the cropped image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overview_photo_v_2_original": {"name": "overview_photo_v_2_original", "description": "Location of the original image", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_relationship_parent_id": {"name": "parent_relationship_parent_id", "description": "URN of the parent organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_relationship_status": {"name": "parent_relationship_status", "description": "The status of the parent organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_relationship_type": {"name": "parent_relationship_type", "description": "The type of parent organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_organization_type": {"name": "primary_organization_type", "description": "The primary type of organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_attributes_hierarchy_classification": {"name": "school_attributes_hierarchy_classification", "description": "The classification for school hierarchy.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_attributes_legacy_school": {"name": "school_attributes_legacy_school", "description": "Legacy school urn for the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_attributes_type": {"name": "school_attributes_type", "description": "The type of institution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_attributes_year_level": {"name": "school_attributes_year_level", "description": "Classification of the length of the institution's educational programs. These levels are defined by the National Center for Education Statistics", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staff_count_range": {"name": "staff_count_range", "description": "Range of the number of staff associated with this entity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vanity_name": {"name": "vanity_name", "description": "Entity's unique name used in URLs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_tag": {"name": "version_tag", "description": "Tag indicating version.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website_localized": {"name": "website_localized", "description": "The localized website of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website_preferred_locale_country": {"name": "website_preferred_locale_country", "description": "The preferred country of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website_preferred_locale_language": {"name": "website_preferred_locale_language", "description": "The preferred language of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.linkedin_company_pages.organization", "created_at": 1661541350.264268}, "source.linkedin_pages_source.linkedin_pages.organization_ugc_post": {"fqn": ["linkedin_pages_source", "linkedin_pages", "organization_ugc_post"], "database": "raw", "schema": "linkedin_company_pages", "unique_id": "source.linkedin_pages_source.linkedin_pages.organization_ugc_post", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "models/src_linkedin_pages.yml", "original_file_path": "models/src_linkedin_pages.yml", "name": "organization_ugc_post", "source_name": "linkedin_pages", "source_description": "", "loader": "Fivetran", "identifier": "organization_ugc_post", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Mapping table for organizations and UGC posts.", "columns": {"_fivetran_synced": {"name": "_fivetran_synced", "description": "The timestamp of when the record was last synced by Fivetran", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Unique id for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ugc_post_id": {"name": "ugc_post_id", "description": "Unique id for the UGC post", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.linkedin_company_pages.organization_ugc_post", "created_at": 1661541350.2643268}, "source.stripe_source.stripe.balance_transaction": {"fqn": ["stripe_source", "stripe", "balance_transaction"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.balance_transaction", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "balance_transaction", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "balance_transaction", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of when the transaction was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the amount in currency A, times exchange_rate, would be the amount in currency B.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fee": {"name": "fee", "description": "fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "If the transaction\u2019s net funds are available in the Stripe balance yet. Either 'available' or 'pending'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "the type of transaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.balance_transaction", "created_at": 1661541350.264404}, "source.stripe_source.stripe.card": {"fqn": ["stripe_source", "stripe", "card"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.card", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "card", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "card", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "details of a credit card that has been saved to the system.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\u2019ve collected.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of when the entry for the card was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer that this card belongs to.  NULL if belongs to an account or recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Cardholder name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding": {"name": "funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.card", "created_at": 1661541350.264469}, "source.stripe_source.stripe.charge": {"fqn": ["stripe_source", "stripe", "charge"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.charge", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "charge", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "charge", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_refunded": {"name": "amount_refunded", "description": "The amount of the charge, if any, that has been refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "captured": {"name": "captured", "description": "If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_id": {"name": "card_id", "description": "ID of the card that was charged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of the date the charge was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer this charge is for if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failure_code": {"name": "failure_code", "description": "Error code explaining reason for charge failure if available.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failure_message": {"name": "failure_message", "description": "Message to user further explaining reason for charge failure if available.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid": {"name": "paid", "description": "true if the charge succeeded, or was successfully authorized for later capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "ID of the PaymentIntent associated with this charge, if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "This is the email address that the receipt for this charge was sent to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refunded": {"name": "refunded", "description": "Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the payment is either succeeded, pending, or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.charge", "created_at": 1661541350.264555}, "source.stripe_source.stripe.customer": {"fqn": ["stripe_source", "stripe", "customer"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.customer", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "customer", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "customer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of when the customer entry was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID for the default card used by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delinquent": {"name": "delinquent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The customer\u2019s email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.customer", "created_at": 1661541350.264627}, "source.stripe_source.stripe.fee": {"fqn": ["stripe_source", "stripe", "fee"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.fee", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "fee", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "fee", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "The details of a fee associated with a balance_transaction", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction entry the fee applies to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount of the fee, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that earned the fee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of the fee, can be application_fee, stripe_fee or tax.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.fee", "created_at": 1661541350.264687}, "source.stripe_source.stripe.payment_intent": {"fqn": ["stripe_source", "stripe", "payment_intent"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.payment_intent", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "payment_intent", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "payment_intent", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "A Payment Intent guides you through the process of collecting a payment from your customer.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_capturable": {"name": "amount_capturable", "description": "Amount that can be captured from this PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_received": {"name": "amount_received", "description": "Amount that was collected by this PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that created the PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the resulting payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "Populated when status is canceled, this is the time at which the PaymentIntent was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancellation_reason": {"name": "cancellation_reason", "description": "Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "capture_method": {"name": "capture_method", "description": "Controls when the funds will be captured from the customer\u2019s account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "confirmation_method": {"name": "confirmation_method", "description": "Whether confirmed automatically or manually", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the Customer this PaymentIntent belongs to, if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method used in this PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "Email address that the receipt for the resulting payment will be sent to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "For non-card charges, you can use this value as the complete description that appears on your customers\u2019 statements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test payment intent.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.payment_intent", "created_at": 1661541350.264761}, "source.stripe_source.stripe.payment_method_card": {"fqn": ["stripe_source", "stripe", "payment_method_card"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.payment_method_card", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "payment_method_card", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "payment_method_card", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table with the relationships between a payment methods and a card", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding": {"name": "funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.payment_method_card", "created_at": 1661541350.264819}, "source.stripe_source.stripe.payment_method": {"fqn": ["stripe_source", "stripe", "payment_method"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.payment_method", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "payment_method", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "payment_method", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.payment_method", "created_at": 1661541350.264878}, "source.stripe_source.stripe.payout": {"fqn": ["stripe_source", "stripe", "payout"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.payout", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "payout", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "payout", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount (in cents) to be transferred to your bank account or debit card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "arrival_date": {"name": "arrival_date", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "automatic": {"name": "automatic", "description": "true if the payout was created by an automated payout schedule, and false if it was requested manually.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this payout on your account balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "method": {"name": "method", "description": "The method used to send this payout, which can be standard or instant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The source balance this payout came from. One of card, fpx, or bank_account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Can be bank_account or card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test payout.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.payout", "created_at": 1661541350.264951}, "source.stripe_source.stripe.refund": {"fqn": ["stripe_source", "stripe", "refund"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.refund", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "refund", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "refund", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Details of transactions that have been refunded", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID for the balance transaction that describes the impact on your account balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the charge that was refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.refund", "created_at": 1661541350.265037}, "source.stripe_source.stripe.invoice_line_item": {"fqn": ["stripe_source", "stripe", "invoice_line_item"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.invoice_line_item", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "invoice_line_item", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "invoice_line_item", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "The different items that an invoice contains", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The ID of the invoice this item is a part of", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discountable": {"name": "discountable", "description": "If true, discounts will apply to this line item. Always false for prorations.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID of the plan of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "proration": {"name": "proration", "description": "Whether this is a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The ID of the subscription that the invoice item pertains to, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_item_id": {"name": "subscription_item_id", "description": "The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "A string identifying the type of the source of this line item, either an invoice item or a subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_id": {"name": "unique_id", "description": "A unique id generated for old invoice ID's from a past version of the API", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test invoice line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.invoice_line_item", "created_at": 1661541350.265103}, "source.stripe_source.stripe.invoice": {"fqn": ["stripe_source", "stripe", "invoice"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.invoice", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "invoice", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "invoice", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "Final amount due at this time for this invoice. If the invoice\u2019s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, in cents, that was paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount remaining, in cents, that is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_advance": {"name": "auto_advance", "description": "Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice\u2019s state will not automatically advance without an explicit action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_reason": {"name": "billing_reason", "description": "Indicates the reason why the invoice was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the latest charge generated for this invoice, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the customer who will be billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. Referenced as \u2018memo\u2019 in the Dashboard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date on which payment for this invoice is due. This value will be null for invoices where collection_method=charge_automatically.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid": {"name": "paid", "description": "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer\u2019s account balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_percent": {"name": "tax_percent", "description": "The percent used to calculate the tax amount.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total": {"name": "total", "description": "Total after discounts and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.invoice", "created_at": 1661541350.265182}, "source.stripe_source.stripe.subscription_history": {"fqn": ["stripe_source", "stripe", "subscription_history"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.subscription_history", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "subscription_history", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "subscription_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Subscriptions allow you to charge a customer on a recurring basis. Please note this source table is used only on connectors setup **after** February 09, 2022.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing": {"name": "billing", "description": "How the invoice is billed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_at_period_end": {"name": "cancel_at_period_end", "description": "Boolean indicating whether this subscription should cancel at the end of the current period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_active": {"name": "_fivetran_active", "description": "Boolean indicating if the record is the latest.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.subscription_history", "created_at": 1661541350.26525}, "source.stripe_source.stripe.subscription": {"fqn": ["stripe_source", "stripe", "subscription"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.subscription", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "subscription", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "subscription", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Subscriptions allow you to charge a customer on a recurring basis. Please note this source table is only present in connectors setup **before** February 09, 2022.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing": {"name": "billing", "description": "How the invoice is billed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_at_period_end": {"name": "cancel_at_period_end", "description": "Boolean indicating whether this subscription should cancel at the end of the current period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.subscription", "created_at": 1661541350.265318}, "source.stripe_source.stripe.plan": {"fqn": ["stripe_source", "stripe", "plan"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.plan", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "plan", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "plan", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Plans define the base price, currency, and billing cycle for recurring purchases of products.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the plan can be used for new purchases.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The unit amount in cents to be charged, represented as a whole integer if possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interval": {"name": "interval", "description": "The frequency at which a subscription is billed. One of day, week, month or year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interval_count": {"name": "interval_count", "description": "The number of intervals between subscription billings. For example, interval_count=3 bills every 3 months.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nickname": {"name": "nickname", "description": "A brief description of the plan, hidden from customers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product": {"name": "product", "description": "The product whose pricing this plan determines.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.plan", "created_at": 1661541350.2653818}, "source.stripe_source.stripe.credit_note": {"fqn": ["stripe_source", "stripe", "credit_note"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.credit_note", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "credit_note", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "credit_note", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Credit notes are documents that decrease the amount owed on an invoice. They\u2019re the only way to adjust the amount of a finalized invoice other than voiding and recreating the invoice.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The integer amount in cents representing the total amount of the credit note, including tax.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of the when the credit_note was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the charge. Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_amount": {"name": "discount_amount", "description": "The integer amount in cents representing the total amount of discount that was credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "The integer amount in cents representing the amount of the credit note, excluding tax and invoice level discounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total": {"name": "total", "description": "The integer amount in cents representing the total amount of the credit note, including tax and all discount.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Has the value true if the object exists in live mode or the value false if the object exists in test mode.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "Customer-facing text that appears on the credit note PDF.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pdf": {"name": "pdf", "description": "The link to download the PDF of the credit note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "Reason for issuing this credit note, one of duplicate, fraudulent, order_change, or product_unsatisfactory", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of this credit note, one of issued or void. Learn more about voiding credit notes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of this credit note, one of pre_payment or post_payment. A pre_payment credit note means it was issued when the invoice was open. A post_payment credit note means it was issued when the invoice was paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voided_at": {"name": "voided_at", "description": "The time that the credit note was voided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_balance_transaction": {"name": "customer_balance_transaction", "description": "Customer balance transaction related to this credit note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with this credit note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "The id of the refund associated with this credit note.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.credit_note", "created_at": 1661541350.265453}, "source.stripe_source.stripe.credit_note_line_item": {"fqn": ["stripe_source", "stripe", "credit_note_line_item"], "database": "raw", "schema": "stripe", "unique_id": "source.stripe_source.stripe.credit_note_line_item", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "credit_note_line_item", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "credit_note_line_item", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "The different items that a credit note contains.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_note_id": {"name": "credit_note_id", "description": "The ID of the credit note this item is a part of.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The integer amount in cents representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_amount": {"name": "discount_amount", "description": "The integer amount in cents representing the discount being credited for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the item being credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Has the value true if the object exists in live mode or the value false if the object exists in test mode.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The number of units of product being credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the credit note line item, one of invoice_line_item or custom_line_item. When the type is invoice_line_item there is an additional invoice_line_item property on the resource the value of which is the id of the credited line item on the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "The cost of each unit of product being credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_amount_decimal": {"name": "unit_amount_decimal", "description": "Same as unit_amount, but contains a decimal value with at most 12 decimal places.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "raw.stripe.credit_note_line_item", "created_at": 1661541350.265515}}, "macros": {"macro.metaplane_dbt.generate_schema_name": {"unique_id": "macro.metaplane_dbt.generate_schema_name", "package_name": "metaplane_dbt", "root_path": "/Users/david/metaplane-dbt", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ generate_schema_name_for_env(custom_schema_name, node) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.generate_schema_name_for_env"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.287691}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.288705}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.301568}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.302347}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.302649}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3034399}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.30425}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.304827}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.305351}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3057039}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3057878}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.305968}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3060732}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.306268}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3065321}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.306742}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.307358}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.307552}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.307721}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.308218}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.308408}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.308913}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.309698}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3099241}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.310176}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3103821}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3104908}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.311899}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.312203}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3124712}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.31471}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.315105}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3157692}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3175502}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3190389}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3196}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% set  grant_config = config.get('grants') %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.322017}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.322547}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.322817}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.323116}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3233469}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.32354}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.324675}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.324884}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.325032}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.325176}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.325332}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.325788}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.326116}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.326433}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.326926}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.327202}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3307111}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3308952}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.331126}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3312771}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.331376}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.332126}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3323011}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.332478}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.33393}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.335368}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.339205}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.339506}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.339691}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.339781}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.339932}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3400488}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.340263}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3411682}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3413692}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3416262}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.342072}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.348207}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3504598}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.351011}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.35133}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.351773}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3521721}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.353031}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.353605}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.354243}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.359201}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.360783}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.361117}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.361897}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.36218}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.362829}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.363636}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3685188}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.373237}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.374573}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.37587}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.376659}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3794932}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.380061}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.380264}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.380482}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.380924}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.383651}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.384077}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.384319}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.385993}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.386455}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3866298}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3868291}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.38711}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3906162}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.395408}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.396399}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.396651}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.397148}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3973482}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.39749}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.397635}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.397749}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3979158}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3980339}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.3985338}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.398734}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4000762}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4006279}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.400865}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4014468}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.401718}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.402016}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4024801}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.402744}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.403158}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.403521}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.403827}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4044511}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.405626}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.406232}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.406544}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.408331}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.409662}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4104698}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.410718}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.411079}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.41116}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4115698}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.411743}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.412058}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.41219}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.412512}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.412619}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.413023}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.41319}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.41348}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.413558}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.413888}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4140348}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4143932}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4145339}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.415207}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.415724}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.416129}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4162939}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.416646}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.416791}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.417115}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.417278}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.417592}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4177558}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.418072}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.41818}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4185321}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.418676}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4189959}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.419102}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.420036}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.420195}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.420363}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4205198}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.420765}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.420925}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.421092}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.421278}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.421443}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.421602}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.421769}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.421917}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.422282}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.42239}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4227982}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.42308}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.423233}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.423807}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.423975}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.424198}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4245708}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.424709}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4251819}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.425389}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.425558}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4258418}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.426361}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.426503}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.426666}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.427092}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.430201}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.43038}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4306118}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.430918}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.431178}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.43151}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.431702}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.431927}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.432117}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.432279}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.432485}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.432773}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.433033}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.433695}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.433944}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.434092}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.434297}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.434895}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.435049}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.435294}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4357362}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.437412}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.437535}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.437706}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.437817}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4381702}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.438366}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.438467}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4387}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.43889}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4391239}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.439316}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4395552}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.440346}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.440546}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.440798}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.441039}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.442224}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.44302}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.443198}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.443413}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.443585}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.44387}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.444382}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.445863}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4461389}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.446337}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.446495}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4466822}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.446938}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4471521}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4474628}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.447658}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.447822}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4495192}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.44978}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.45011}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.450305}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.450658}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.450897}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.451536}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.451804}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4526238}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.453247}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.453486}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4537878}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.45408}, "macro.hubspot_source.get_contact_columns": {"unique_id": "macro.hubspot_source.get_contact_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_contact_columns.sql", "original_file_path": "macros/get_contact_columns.sql", "name": "get_contact_columns", "macro_sql": "{% macro get_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"property_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_company\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_firstname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_lastname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_createdate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"property_jobtitle\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_annualrevenue\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('hubspot__contact_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.455486}, "macro.hubspot_source.get_email_event_open_columns": {"unique_id": "macro.hubspot_source.get_email_event_open_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_event_open_columns.sql", "original_file_path": "macros/get_email_event_open_columns.sql", "name": "get_email_event_open_columns", "macro_sql": "{% macro get_email_event_open_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"browser\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"duration\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.45648}, "macro.hubspot_source.get_email_event_spam_report_columns": {"unique_id": "macro.hubspot_source.get_email_event_spam_report_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_event_spam_report_columns.sql", "original_file_path": "macros/get_email_event_spam_report_columns.sql", "name": "get_email_event_spam_report_columns", "macro_sql": "{% macro get_email_event_spam_report_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.45716}, "macro.hubspot_source.get_email_event_bounce_columns": {"unique_id": "macro.hubspot_source.get_email_event_bounce_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_event_bounce_columns.sql", "original_file_path": "macros/get_email_event_bounce_columns.sql", "name": "get_email_event_bounce_columns", "macro_sql": "{% macro get_email_event_bounce_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"response\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.457938}, "macro.hubspot_source.get_ticket_pipeline_stage_columns": {"unique_id": "macro.hubspot_source.get_ticket_pipeline_stage_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_ticket_pipeline_stage_columns.sql", "original_file_path": "macros/get_ticket_pipeline_stage_columns.sql", "name": "get_ticket_pipeline_stage_columns", "macro_sql": "{% macro get_ticket_pipeline_stage_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"display_order\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"is_closed\", \"datatype\": \"boolean\"},\n    {\"name\": \"label\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pipeline_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"stage_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ticket_state\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.459074}, "macro.hubspot_source.get_company_columns": {"unique_id": "macro.hubspot_source.get_company_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_company_columns.sql", "original_file_path": "macros/get_company_columns.sql", "name": "get_company_columns", "macro_sql": "{% macro get_company_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"property_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_createdate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"property_industry\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_address_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_annualrevenue\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('hubspot__company_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.460852}, "macro.hubspot_source.get_ticket_deal_columns": {"unique_id": "macro.hubspot_source.get_ticket_deal_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_ticket_deal_columns.sql", "original_file_path": "macros/get_ticket_deal_columns.sql", "name": "get_ticket_deal_columns", "macro_sql": "{% macro get_ticket_deal_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"deal_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.461448}, "macro.hubspot_source.get_ticket_pipeline_columns": {"unique_id": "macro.hubspot_source.get_ticket_pipeline_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_ticket_pipeline_columns.sql", "original_file_path": "macros/get_ticket_pipeline_columns.sql", "name": "get_ticket_pipeline_columns", "macro_sql": "{% macro get_ticket_pipeline_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"display_order\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"label\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"object_type_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pipeline_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.462396}, "macro.hubspot_source.get_email_event_dropped_columns": {"unique_id": "macro.hubspot_source.get_email_event_dropped_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_event_dropped_columns.sql", "original_file_path": "macros/get_email_event_dropped_columns.sql", "name": "get_email_event_dropped_columns", "macro_sql": "{% macro get_email_event_dropped_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"bcc\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cc\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"drop_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"drop_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"reply_to\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{% if target.type == 'snowflake' %}\n {{ columns.append({\"name\": \"FROM\", \"datatype\": dbt_utils.type_string(), \"quote\": True, \"alias\": \"from_email\"}) }}\n{% else %}\n {{ columns.append({\"name\": \"from\", \"datatype\": dbt_utils.type_string(), \"quote\": True, \"alias\": \"from_email\"}) }}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.464028}, "macro.hubspot_source.get_engagement_email_columns": {"unique_id": "macro.hubspot_source.get_engagement_email_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_engagement_email_columns.sql", "original_file_path": "macros/get_engagement_email_columns.sql", "name": "get_engagement_email_columns", "macro_sql": "{% macro get_engagement_email_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"attached_video_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"attached_video_opened\", \"datatype\": \"boolean\"},\n    {\"name\": \"attached_video_watched\", \"datatype\": \"boolean\"},\n    {\"name\": \"email_send_event_id_created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"email_send_event_id_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"error_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"facsimile_send_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"from_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"from_first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"from_last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"html\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"logged_from\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"media_processing_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"member_of_forwarded_subthread\", \"datatype\": \"boolean\"},\n    {\"name\": \"message_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"post_send_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"recipient_drop_reasons\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sent_via\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"text\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"thread_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tracker_key\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"validation_skipped\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.467075}, "macro.hubspot_source.get_email_event_forward_columns": {"unique_id": "macro.hubspot_source.get_email_event_forward_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_event_forward_columns.sql", "original_file_path": "macros/get_email_event_forward_columns.sql", "name": "get_email_event_forward_columns", "macro_sql": "{% macro get_email_event_forward_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"browser\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.468011}, "macro.hubspot_source.get_deal_pipeline_columns": {"unique_id": "macro.hubspot_source.get_deal_pipeline_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_deal_pipeline_columns.sql", "original_file_path": "macros/get_deal_pipeline_columns.sql", "name": "get_deal_pipeline_columns", "macro_sql": "{% macro get_deal_pipeline_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"display_order\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"label\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pipeline_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.468867}, "macro.hubspot_source.get_email_event_click_columns": {"unique_id": "macro.hubspot_source.get_email_event_click_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_event_click_columns.sql", "original_file_path": "macros/get_email_event_click_columns.sql", "name": "get_email_event_click_columns", "macro_sql": "{% macro get_email_event_click_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"browser\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"referer\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4699361}, "macro.hubspot_source.get_email_event_deferred_columns": {"unique_id": "macro.hubspot_source.get_email_event_deferred_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_event_deferred_columns.sql", "original_file_path": "macros/get_email_event_deferred_columns.sql", "name": "get_email_event_deferred_columns", "macro_sql": "{% macro get_email_event_deferred_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"attempt\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"response\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.470613}, "macro.hubspot_source.get_deal_columns": {"unique_id": "macro.hubspot_source.get_deal_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_deal_columns.sql", "original_file_path": "macros/get_deal_columns.sql", "name": "get_deal_columns", "macro_sql": "{% macro get_deal_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"deal_pipeline_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deal_pipeline_stage_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"owner_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"portal_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"property_dealname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"property_closedate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"property_createdate\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('hubspot__deal_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.472196}, "macro.hubspot_source.get_engagement_columns": {"unique_id": "macro.hubspot_source.get_engagement_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_engagement_columns.sql", "original_file_path": "macros/get_engagement_columns.sql", "name": "get_engagement_columns", "macro_sql": "{% macro get_engagement_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"activity_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"last_updated\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"owner_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"portal_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"timestamp\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"occurred_timestamp\"},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string(), \"alias\": \"engagement_type\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.473552}, "macro.hubspot_source.get_engagement_contact_columns": {"unique_id": "macro.hubspot_source.get_engagement_contact_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_engagement_contact_columns.sql", "original_file_path": "macros/get_engagement_contact_columns.sql", "name": "get_engagement_contact_columns", "macro_sql": "{% macro get_engagement_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"contact_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.474122}, "macro.hubspot_source.get_email_event_columns": {"unique_id": "macro.hubspot_source.get_email_event_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_event_columns.sql", "original_file_path": "macros/get_email_event_columns.sql", "name": "get_email_event_columns", "macro_sql": "{% macro get_email_event_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"app_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"caused_by_created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"caused_by_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"email_campaign_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"filtered_event\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"obsoleted_by_created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"obsoleted_by_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"portal_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"recipient\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sent_by_created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"sent_by_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.475987}, "macro.hubspot_source.get_contact_merge_audit_columns": {"unique_id": "macro.hubspot_source.get_contact_merge_audit_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_contact_merge_audit_columns.sql", "original_file_path": "macros/get_contact_merge_audit_columns.sql", "name": "get_contact_merge_audit_columns", "macro_sql": "{% macro get_contact_merge_audit_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"canonical_vid\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"contact_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"entity_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"num_properties_moved\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"timestamp\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"user_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"vid_to_merge\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.477294}, "macro.hubspot_source.get_engagement_company_columns": {"unique_id": "macro.hubspot_source.get_engagement_company_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_engagement_company_columns.sql", "original_file_path": "macros/get_engagement_company_columns.sql", "name": "get_engagement_company_columns", "macro_sql": "{% macro get_engagement_company_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"company_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.477878}, "macro.hubspot_source.get_deal_pipeline_stage_columns": {"unique_id": "macro.hubspot_source.get_deal_pipeline_stage_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_deal_pipeline_stage_columns.sql", "original_file_path": "macros/get_deal_pipeline_stage_columns.sql", "name": "get_deal_pipeline_stage_columns", "macro_sql": "{% macro get_deal_pipeline_stage_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"closed_won\", \"datatype\": \"boolean\"},\n    {\"name\": \"display_order\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"label\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pipeline_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"probability\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"stage_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.479006}, "macro.hubspot_source.get_email_campaign_columns": {"unique_id": "macro.hubspot_source.get_email_campaign_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_campaign_columns.sql", "original_file_path": "macros/get_email_campaign_columns.sql", "name": "get_email_campaign_columns", "macro_sql": "{% macro get_email_campaign_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"app_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"app_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"content_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"num_included\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"num_queued\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"sub_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4803882}, "macro.hubspot_source.get_email_event_sent_columns": {"unique_id": "macro.hubspot_source.get_email_event_sent_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_event_sent_columns.sql", "original_file_path": "macros/get_email_event_sent_columns.sql", "name": "get_email_event_sent_columns", "macro_sql": "{% macro get_email_event_sent_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"bcc\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cc\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"reply_to\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{% if target.type == 'snowflake' %}\n {{ columns.append({\"name\": \"FROM\", \"datatype\": dbt_utils.type_string(), \"quote\": True, \"alias\": \"from_email\"}) }}\n{% else %}\n {{ columns.append({\"name\": \"from\", \"datatype\": dbt_utils.type_string(), \"quote\": True, \"alias\": \"from_email\"}) }}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.481811}, "macro.hubspot_source.get_deal_stage_columns": {"unique_id": "macro.hubspot_source.get_deal_stage_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_deal_stage_columns.sql", "original_file_path": "macros/get_deal_stage_columns.sql", "name": "get_deal_stage_columns", "macro_sql": "{% macro get_deal_stage_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_active\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"_fivetran_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"date_entered\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"value\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.48299}, "macro.hubspot_source.get_contact_list_columns": {"unique_id": "macro.hubspot_source.get_contact_list_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_contact_list_columns.sql", "original_file_path": "macros/get_contact_list_columns.sql", "name": "get_contact_list_columns", "macro_sql": "{% macro get_contact_list_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"deleteable\", \"datatype\": \"boolean\"},\n    {\"name\": \"dynamic\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"metadata_error\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"metadata_last_processing_state_change_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"metadata_last_size_change_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"metadata_processing\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"metadata_size\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"portal_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4846668}, "macro.hubspot_source.get_ticket_property_history_columns": {"unique_id": "macro.hubspot_source.get_ticket_property_history_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_ticket_property_history_columns.sql", "original_file_path": "macros/get_ticket_property_history_columns.sql", "name": "get_ticket_property_history_columns", "macro_sql": "{% macro get_ticket_property_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timestamp_instant\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"value\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4856708}, "macro.hubspot_source.get_owner_columns": {"unique_id": "macro.hubspot_source.get_owner_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_owner_columns.sql", "original_file_path": "macros/get_owner_columns.sql", "name": "get_owner_columns", "macro_sql": "{% macro get_owner_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"first_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"owner_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"portal_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.486847}, "macro.hubspot_source.get_engagement_deal_columns": {"unique_id": "macro.hubspot_source.get_engagement_deal_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_engagement_deal_columns.sql", "original_file_path": "macros/get_engagement_deal_columns.sql", "name": "get_engagement_deal_columns", "macro_sql": "{% macro get_engagement_deal_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4874308}, "macro.hubspot_source.get_email_event_status_change_columns": {"unique_id": "macro.hubspot_source.get_email_event_status_change_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_event_status_change_columns.sql", "original_file_path": "macros/get_email_event_status_change_columns.sql", "name": "get_email_event_status_change_columns", "macro_sql": "{% macro get_email_event_status_change_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"bounced\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"portal_subscription_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"requested_by\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subscriptions\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.488371}, "macro.hubspot_source.get_deal_contact_columns": {"unique_id": "macro.hubspot_source.get_deal_contact_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_deal_contact_columns.sql", "original_file_path": "macros/get_deal_contact_columns.sql", "name": "get_deal_contact_columns", "macro_sql": "{% macro get_deal_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"contact_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.488937}, "macro.hubspot_source.get_engagement_task_columns": {"unique_id": "macro.hubspot_source.get_engagement_task_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_engagement_task_columns.sql", "original_file_path": "macros/get_engagement_task_columns.sql", "name": "get_engagement_task_columns", "macro_sql": "{% macro get_engagement_task_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"body\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"completion_date\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"for_object_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_all_day\", \"datatype\": \"boolean\"},\n    {\"name\": \"priority\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"probability_to_complete\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subject\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"task_type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4902909}, "macro.hubspot_source.get_ticket_contact_columns": {"unique_id": "macro.hubspot_source.get_ticket_contact_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_ticket_contact_columns.sql", "original_file_path": "macros/get_ticket_contact_columns.sql", "name": "get_ticket_contact_columns", "macro_sql": "{% macro get_ticket_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"contact_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.490864}, "macro.hubspot_source.get_ticket_company_columns": {"unique_id": "macro.hubspot_source.get_ticket_company_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_ticket_company_columns.sql", "original_file_path": "macros/get_ticket_company_columns.sql", "name": "get_ticket_company_columns", "macro_sql": "{% macro get_ticket_company_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"company_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.491423}, "macro.hubspot_source.get_ticket_columns": {"unique_id": "macro.hubspot_source.get_ticket_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_ticket_columns.sql", "original_file_path": "macros/get_ticket_columns.sql", "name": "get_ticket_columns", "macro_sql": "{% macro get_ticket_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"property_closed_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"property_createdate\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"property_first_agent_reply_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"property_hs_pipeline\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_hs_pipeline_stage\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_hs_ticket_category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_hs_ticket_priority\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_hubspot_owner_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"property_subject\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"property_content\", \"datatype\": dbt_utils.type_string()}  \n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('hubspot__ticket_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.493409}, "macro.hubspot_source.get_deal_company_columns": {"unique_id": "macro.hubspot_source.get_deal_company_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_deal_company_columns.sql", "original_file_path": "macros/get_deal_company_columns.sql", "name": "get_deal_company_columns", "macro_sql": "{% macro get_deal_company_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"company_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.494011}, "macro.hubspot_source.get_deal_property_history_columns": {"unique_id": "macro.hubspot_source.get_deal_property_history_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_deal_property_history_columns.sql", "original_file_path": "macros/get_deal_property_history_columns.sql", "name": "get_deal_property_history_columns", "macro_sql": "{% macro get_deal_property_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"deal_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timestamp\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"change_timestamp\"},\n    {\"name\": \"value\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.495004}, "macro.hubspot_source.get_ticket_engagement_columns": {"unique_id": "macro.hubspot_source.get_ticket_engagement_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_ticket_engagement_columns.sql", "original_file_path": "macros/get_ticket_engagement_columns.sql", "name": "get_ticket_engagement_columns", "macro_sql": "{% macro get_ticket_engagement_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ticket_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.495577}, "macro.hubspot_source.get_company_property_history_columns": {"unique_id": "macro.hubspot_source.get_company_property_history_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_company_property_history_columns.sql", "original_file_path": "macros/get_company_property_history_columns.sql", "name": "get_company_property_history_columns", "macro_sql": "{% macro get_company_property_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"company_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timestamp\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"change_timestamp\"},\n    {\"name\": \"value\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4965792}, "macro.hubspot_source.get_engagement_note_columns": {"unique_id": "macro.hubspot_source.get_engagement_note_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_engagement_note_columns.sql", "original_file_path": "macros/get_engagement_note_columns.sql", "name": "get_engagement_note_columns", "macro_sql": "{% macro get_engagement_note_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"body\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4971552}, "macro.hubspot_source.get_engagement_meeting_columns": {"unique_id": "macro.hubspot_source.get_engagement_meeting_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_engagement_meeting_columns.sql", "original_file_path": "macros/get_engagement_meeting_columns.sql", "name": "get_engagement_meeting_columns", "macro_sql": "{% macro get_engagement_meeting_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"body\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_from_link_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"end_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"external_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"meeting_outcome\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pre_meeting_prospect_reminders\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"web_conference_meeting_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.4988642}, "macro.hubspot_source.get_contact_list_member_columns": {"unique_id": "macro.hubspot_source.get_contact_list_member_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_contact_list_member_columns.sql", "original_file_path": "macros/get_contact_list_member_columns.sql", "name": "get_contact_list_member_columns", "macro_sql": "{% macro get_contact_list_member_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"added_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"contact_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"contact_list_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.49965}, "macro.hubspot_source.get_email_event_delivered_columns": {"unique_id": "macro.hubspot_source.get_email_event_delivered_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_event_delivered_columns.sql", "original_file_path": "macros/get_email_event_delivered_columns.sql", "name": "get_email_event_delivered_columns", "macro_sql": "{% macro get_email_event_delivered_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"response\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"smtp_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.500316}, "macro.hubspot_source.get_contact_property_history_columns": {"unique_id": "macro.hubspot_source.get_contact_property_history_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_contact_property_history_columns.sql", "original_file_path": "macros/get_contact_property_history_columns.sql", "name": "get_contact_property_history_columns", "macro_sql": "{% macro get_contact_property_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"contact_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"timestamp\", \"datatype\": dbt_utils.type_timestamp(), \"alias\": \"change_timestamp\"},\n    {\"name\": \"value\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.501326}, "macro.hubspot_source.get_email_event_print_columns": {"unique_id": "macro.hubspot_source.get_email_event_print_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_email_event_print_columns.sql", "original_file_path": "macros/get_email_event_print_columns.sql", "name": "get_email_event_print_columns", "macro_sql": "{% macro get_email_event_print_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"browser\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"location\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"user_agent\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.502187}, "macro.hubspot_source.get_engagement_call_columns": {"unique_id": "macro.hubspot_source.get_engagement_call_columns", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "macros/get_engagement_call_columns.sql", "original_file_path": "macros/get_engagement_call_columns.sql", "name": "get_engagement_call_columns", "macro_sql": "{% macro get_engagement_call_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"body\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"callee_object_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"callee_object_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"disposition\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"duration_milliseconds\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"engagement_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"external_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"external_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"from_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"recording_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"to_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transcription_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"unknown_visitor_conversation\", \"datatype\": \"boolean\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.50398}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5043352}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.504411}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5044842}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.504884}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.505051}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.505373}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.505505}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.506321}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5064}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5064719}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.50654}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.50661}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.506776}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.50685}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.506921}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.506988}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.507157}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.507231}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5073001}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.507464}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.507539}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5076082}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.50777}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5078459}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.507915}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.508076}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.508149}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.508218}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.508856}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5093231}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5094662}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5097861}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.509928}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5100338}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5104032}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5105112}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.510613}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5112221}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.51139}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.511561}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.511721}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5119228}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.512251}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5123289}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5124018}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.512796}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.512939}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5130749}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.513293}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.513886}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.514027}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.514185}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.514343}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.516593}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.517022}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.517308}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5177128}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.518711}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.521326}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.521497}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.521662}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.523515}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.523735}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5242481}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5243928}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.524522}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.524649}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.525013}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.525156}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.525292}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.525661}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.525803}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5259311}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.526468}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.526578}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.526679}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5270379}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.527143}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.527251}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.52767}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.527818}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5279539}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5283442}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5284522}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.529048}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.529166}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.529237}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.52931}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.529472}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.529587}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.529734}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5298529}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.529985}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5314329}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.531918}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5323882}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.532584}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.533055}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5331929}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.533327}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5334558}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.533851}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.533958}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.534139}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.534241}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.534854}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.535133}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.535297}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.535712}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.535895}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5373719}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.537544}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.537769}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.538118}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.538458}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5388339}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.539274}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.539408}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.539542}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5401092}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.540363}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5405078}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.540649}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.540787}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.541785}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5422258}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.54236}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.542551}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5427468}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.548407}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.548954}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.549293}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.549811}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.555181}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5557508}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.556266}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5568168}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.557506}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.557906}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.558239}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.558837}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.559072}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.559525}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.559842}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.560551}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.560897}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5613692}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.561723}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.562101}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5622778}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.562929}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.563509}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.564118}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5645099}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.564992}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5651689}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.56557}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5657542}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.566411}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5670788}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5677068}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.568058}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.568587}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.56889}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.56937}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5699131}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5706282}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.571344}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.57184}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.572018}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.572812}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.573745}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.57684}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5783832}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5787761}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.57895}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.579296}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.579502}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.579823}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.580004}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.58054}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5812821}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5819058}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.582149}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.582519}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5829198}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.583551}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.584278}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5851672}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.586043}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.586474}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5866728}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.587204}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.5879822}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.588879}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.58937}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.589667}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.590404}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.591462}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.593243}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.619133}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.6219132}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.625095}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.625597}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.625866}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.628374}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.6286159}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.62883}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.629031}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.629199}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.629378}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.630089}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.631077}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.631577}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.631872}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.632291}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.632642}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.634186}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.634468}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.635326}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.6358669}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.6370711}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.638676}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.63984}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.6407292}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.641289}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.6420538}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.642514}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.643146}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.643677}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.643766}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.643862}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.6439512}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.645016}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.64532}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.645948}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.6468968}, "macro.linkedin_pages_source.get_ugc_post_share_statistic_columns": {"unique_id": "macro.linkedin_pages_source.get_ugc_post_share_statistic_columns", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "macros/get_ugc_post_share_statistic_columns.sql", "original_file_path": "macros/get_ugc_post_share_statistic_columns.sql", "name": "get_ugc_post_share_statistic_columns", "macro_sql": "{% macro get_ugc_post_share_statistic_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"share_statistic_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ugc_post_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.647538}, "macro.linkedin_pages_source.get_ugc_post_share_content_media_columns": {"unique_id": "macro.linkedin_pages_source.get_ugc_post_share_content_media_columns", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "macros/get_ugc_post_share_content_media_columns.sql", "original_file_path": "macros/get_ugc_post_share_content_media_columns.sql", "name": "get_ugc_post_share_content_media_columns", "macro_sql": "{% macro get_ugc_post_share_content_media_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"description_attributes\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description_inferred_locale\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description_text\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"landing_page_title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"landing_page_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"media\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"original_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"thumbnails\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"title_attributes\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"title_inferred_locale\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"title_text\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ugc_post_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.6493802}, "macro.linkedin_pages_source.get_organization_ugc_post_columns": {"unique_id": "macro.linkedin_pages_source.get_organization_ugc_post_columns", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "macros/get_organization_ugc_post_columns.sql", "original_file_path": "macros/get_organization_ugc_post_columns.sql", "name": "get_organization_ugc_post_columns", "macro_sql": "{% macro get_organization_ugc_post_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"organization_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"ugc_post_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.6499991}, "macro.linkedin_pages_source.get_share_statistic_columns": {"unique_id": "macro.linkedin_pages_source.get_share_statistic_columns", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "macros/get_share_statistic_columns.sql", "original_file_path": "macros/get_share_statistic_columns.sql", "name": "get_share_statistic_columns", "macro_sql": "{% macro get_share_statistic_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"_organization_entity_urn\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_share_entity_urn\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"click_count\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"comment_count\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"engagement\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"impression_count\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"like_count\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"share_count\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.651288}, "macro.linkedin_pages_source.get_organization_columns": {"unique_id": "macro.linkedin_pages_source.get_organization_columns", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "macros/get_organization_columns.sql", "original_file_path": "macros/get_organization_columns.sql", "name": "get_organization_columns", "macro_sql": "{% macro get_organization_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"cover_photo_v_2_crop_info_height\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cover_photo_v_2_crop_info_width\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cover_photo_v_2_crop_info_x\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cover_photo_v_2_crop_info_y\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"cover_photo_v_2_cropped\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cover_photo_v_2_original\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"default_locale_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"default_locale_language\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description_localized\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description_preferred_locale_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description_preferred_locale_language\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"founded_on_day\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"founded_on_month\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"founded_on_year\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"localized_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"localized_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"localized_website\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"logo_v_2_crop_info_height\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"logo_v_2_crop_info_width\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"logo_v_2_crop_info_x\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"logo_v_2_crop_info_y\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"logo_v_2_cropped\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"logo_v_2_original\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name_localized\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name_preferred_locale_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name_preferred_locale_language\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"organization_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"organization_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"overview_photo_v_2_crop_info_height\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"overview_photo_v_2_crop_info_width\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"overview_photo_v_2_crop_info_x\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"overview_photo_v_2_crop_info_y\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"overview_photo_v_2_cropped\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"overview_photo_v_2_original\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_relationship_parent_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"parent_relationship_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_relationship_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"primary_organization_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"school_attributes_hierarchy_classification\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"school_attributes_legacy_school\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"school_attributes_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"school_attributes_year_level\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"staff_count_range\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vanity_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"website_localized\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"website_preferred_locale_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"website_preferred_locale_language\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.657681}, "macro.linkedin_pages_source.get_ugc_post_history_columns": {"unique_id": "macro.linkedin_pages_source.get_ugc_post_history_columns", "package_name": "linkedin_pages_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/linkedin_pages_source", "path": "macros/get_ugc_post_history_columns.sql", "original_file_path": "macros/get_ugc_post_history_columns.sql", "name": "get_ugc_post_history_columns", "macro_sql": "{% macro get_ugc_post_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"author\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"client_application\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"container_entity\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"content_certification_record\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_actor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"deleted_actor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deleted_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"distribution_distributed_via_follow_feed\", \"datatype\": \"boolean\"},\n    {\"name\": \"distribution_external_distribution_channels\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"distribution_feed_distribution\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"first_published_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_modified_actor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_modified_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"lifecycle_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"response_context_parent\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"response_context_root\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"specific_content_primary_landing_page_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"specific_content_share_commentary_attributes\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"specific_content_share_commentary_inferred_locale\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"specific_content_share_commentary_text\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"specific_content_share_media_category\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"target_audience_targeted_entities\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"version_tag\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"visibility\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.662379}, "macro.spark_utils.get_tables": {"unique_id": "macro.spark_utils.get_tables", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.682307}, "macro.spark_utils.get_delta_tables": {"unique_id": "macro.spark_utils.get_delta_tables", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.683062}, "macro.spark_utils.get_statistic_columns": {"unique_id": "macro.spark_utils.get_statistic_columns", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.683996}, "macro.spark_utils.spark_optimize_delta_tables": {"unique_id": "macro.spark_utils.spark_optimize_delta_tables", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.684788}, "macro.spark_utils.spark_vacuum_delta_tables": {"unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.685567}, "macro.spark_utils.spark_analyze_tables": {"unique_id": "macro.spark_utils.spark_analyze_tables", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "name": "spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.68653}, "macro.spark_utils.spark__concat": {"unique_id": "macro.spark_utils.spark__concat", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "name": "spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.686919}, "macro.spark_utils.spark__type_numeric": {"unique_id": "macro.spark_utils.spark__type_numeric", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "name": "spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.687096}, "macro.spark_utils.spark__dateadd": {"unique_id": "macro.spark_utils.spark__dateadd", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "name": "spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.689971}, "macro.spark_utils.spark__datediff": {"unique_id": "macro.spark_utils.spark__datediff", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "name": "spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.697717}, "macro.spark_utils.spark__current_timestamp": {"unique_id": "macro.spark_utils.spark__current_timestamp", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "name": "spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.698039}, "macro.spark_utils.spark__current_timestamp_in_utc": {"unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "name": "spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.698119}, "macro.spark_utils.spark__split_part": {"unique_id": "macro.spark_utils.spark__split_part", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "name": "spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.698849}, "macro.spark_utils.spark__get_relations_by_pattern": {"unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.700617}, "macro.spark_utils.spark__get_relations_by_prefix": {"unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.701004}, "macro.spark_utils.spark__get_tables_by_pattern": {"unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7013152}, "macro.spark_utils.spark__get_tables_by_prefix": {"unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "name": "spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.701622}, "macro.spark_utils.assert_not_null": {"unique_id": "macro.spark_utils.assert_not_null", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "name": "assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.702096}, "macro.spark_utils.default__assert_not_null": {"unique_id": "macro.spark_utils.default__assert_not_null", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "name": "default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.702317}, "macro.spark_utils.spark__convert_timezone": {"unique_id": "macro.spark_utils.spark__convert_timezone", "package_name": "spark_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7026079}, "macro.codegen.generate_column_yaml": {"unique_id": "macro.codegen.generate_column_yaml", "package_name": "codegen", "root_path": "/Users/david/metaplane-dbt/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7044811}, "macro.codegen.generate_model_yaml": {"unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "/Users/david/metaplane-dbt/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name, upstream_descriptions=False) %}\n\n{% set model_yaml=[] %}\n{% set column_desc_dict =  codegen.build_dict_column_descriptions(model_name) if upstream_descriptions else {} %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.705812}, "macro.codegen.generate_base_model": {"unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "/Users/david/metaplane-dbt/dbt_packages/codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.707977}, "macro.codegen.get_tables_in_schema": {"unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "/Users/david/metaplane-dbt/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.710031}, "macro.codegen.generate_source": {"unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "/Users/david/metaplane-dbt/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='', name=schema_name, table_names=None) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.712519}, "macro.codegen.get_model_dependencies": {"unique_id": "macro.codegen.get_model_dependencies", "package_name": "codegen", "root_path": "/Users/david/metaplane-dbt/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7132668}, "macro.codegen.add_model_column_descriptions_to_dict": {"unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "package_name": "codegen", "root_path": "/Users/david/metaplane-dbt/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.713802}, "macro.codegen.build_dict_column_descriptions": {"unique_id": "macro.codegen.build_dict_column_descriptions", "package_name": "codegen", "root_path": "/Users/david/metaplane-dbt/dbt_packages/codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "name": "build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7142751}, "macro.hubspot.engagements_joined": {"unique_id": "macro.hubspot.engagements_joined", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "macros/engagements_joined.sql", "original_file_path": "macros/engagements_joined.sql", "name": "engagements_joined", "macro_sql": "{% macro engagements_joined(base_model) %}\n\nwith base as (\n\n    select *\n    from {{ base_model }}\n\n), engagements as (\n\n    select *\n    from {{ ref('hubspot__engagements') }}\n\n), joined as (\n\n    select \n        base.*,\n        {% if fivetran_utils.enabled_vars(['hubspot_engagement_contact_enabled']) %} engagements.contact_ids, {% endif %}\n        {% if fivetran_utils.enabled_vars(['hubspot_engagement_deal_enabled']) %} engagements.deal_ids, {% endif %}\n        {% if fivetran_utils.enabled_vars(['hubspot_engagement_company_enabled']) %} engagements.company_ids, {% endif %}\n        engagements.is_active,\n        engagements.created_timestamp,\n        engagements.occurred_timestamp,\n        engagements.owner_id\n    from base\n    left join engagements\n        using (engagement_id)\n\n)\n\nselect *\nfrom joined\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7150369}, "macro.hubspot.email_events_joined": {"unique_id": "macro.hubspot.email_events_joined", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "macros/email_events_joined.sql", "original_file_path": "macros/email_events_joined.sql", "name": "email_events_joined", "macro_sql": "{% macro email_events_joined(base_model) %}\n\nwith base as (\n\n    select *\n    from {{ base_model }}\n\n), events as (\n\n    select *\n    from {{ var('email_event') }}\n\n), contacts as (\n\n    select *\n    from {% if var('hubspot_contact_merge_audit_enabled', false) %} \n            {{ ref('int_hubspot__contact_merge_adjust') }} \n        {% else %} \n            {{ var('contact') }} \n        {% endif %}\n\n), events_joined as (\n\n    select \n        base.*,\n        events.created_timestamp,\n        events.email_campaign_id,\n        events.recipient_email_address,\n        events.sent_timestamp as email_send_timestamp,\n        events.sent_by_event_id as email_send_id\n    from base\n    left join events\n        using (event_id)\n\n), contacts_joined as (\n\n    select \n        events_joined.*,\n        contacts.contact_id\n    from events_joined\n    left join contacts\n        on events_joined.recipient_email_address = contacts.email\n\n)\n\nselect *\nfrom contacts_joined\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7157629}, "macro.hubspot.engagements_aggregated": {"unique_id": "macro.hubspot.engagements_aggregated", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "macros/engagements_aggregated.sql", "original_file_path": "macros/engagements_aggregated.sql", "name": "engagements_aggregated", "macro_sql": "{% macro engagements_aggregated(from_ref, primary_key) %}\n\n    select\n        {{ primary_key }},\n        count(case when engagement_type = 'NOTE' then {{ primary_key }} end) as count_engagement_notes,\n        count(case when engagement_type = 'TASK' then {{ primary_key }} end) as count_engagement_tasks,\n        count(case when engagement_type = 'CALL' then {{ primary_key }} end) as count_engagement_calls,\n        count(case when engagement_type = 'MEETING' then {{ primary_key }} end) as count_engagement_meetings,\n        count(case when engagement_type = 'EMAIL' then {{ primary_key }} end) as count_engagement_emails,\n        count(case when engagement_type = 'INCOMING_EMAIL' then {{ primary_key }} end) as count_engagement_incoming_emails,\n        count(case when engagement_type = 'FORWARDED_EMAIL' then {{ primary_key }} end) as count_engagement_forwarded_emails\n    from {{ from_ref }}\n    group by 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.716563}, "macro.hubspot.engagement_metrics": {"unique_id": "macro.hubspot.engagement_metrics", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "macros/engagements_aggregated.sql", "original_file_path": "macros/engagements_aggregated.sql", "name": "engagement_metrics", "macro_sql": "{% macro engagement_metrics() %}\n\n{% set metrics = [\n    'count_engagement_notes',\n    'count_engagement_tasks',\n    'count_engagement_calls',\n    'count_engagement_meetings',\n    'count_engagement_emails',\n    'count_engagement_incoming_emails',\n    'count_engagement_forwarded_emails'\n] %}\n\n{{ return(metrics) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7168572}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.717364}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__percentile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7184372}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.718626}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.718797}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.718972}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.719122}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.719288}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7198458}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.720618}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.721735}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.721994}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.722374}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.722616}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.722867}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.723157}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7234461}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7239301}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.724045}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.724153}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.724261}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.724736}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.725442}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.726176}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7267342}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.726879}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.727016}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.727159}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.727306}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.730263}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.730446}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7308102}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.731005}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7330189}, "macro.fivetran_utils.try_cast": {"unique_id": "macro.fivetran_utils.try_cast", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.734116}, "macro.fivetran_utils.default__safe_cast": {"unique_id": "macro.fivetran_utils.default__safe_cast", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.734268}, "macro.fivetran_utils.redshift__try_cast": {"unique_id": "macro.fivetran_utils.redshift__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.734566}, "macro.fivetran_utils.postgres__try_cast": {"unique_id": "macro.fivetran_utils.postgres__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.734868}, "macro.fivetran_utils.snowflake__try_cast": {"unique_id": "macro.fivetran_utils.snowflake__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.735003}, "macro.fivetran_utils.bigquery__try_cast": {"unique_id": "macro.fivetran_utils.bigquery__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7351308}, "macro.fivetran_utils.spark__try_cast": {"unique_id": "macro.fivetran_utils.spark__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.735265}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.735861}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt_utils.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.736486}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.737065}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7372742}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.737505}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.737845}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% if column.alias %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n\n      {% else %}\n\n      {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n        \n      {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.738783}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.742919}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.743304}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.743807}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.745346}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7459}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7464929}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.746645}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.746799}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.746968}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.747117}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.747267}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.747974}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.748991}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7497332}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7499}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.750054}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7502122}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.75037}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt_utils.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7505438}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.750846}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.750944}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7510378}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.751779}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.752984}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=var(database_variable, default_database),\n        schema=schema,\n        identifier=table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=database,\n        schema=var(schema_variable, default_schema),\n        identifier=table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.754741}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.756196}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7565172}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.756617}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.756716}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.757165}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/david/metaplane-dbt/dbt_packages/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.757607}, "macro.stripe_source.get_credit_note_columns": {"unique_id": "macro.stripe_source.get_credit_note_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_credit_note_columns.sql", "original_file_path": "macros/get_credit_note_columns.sql", "name": "get_credit_note_columns", "macro_sql": "{% macro get_credit_note_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"subtotal\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"total\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"memo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pdf\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"voided_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"customer_balance_transaction\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"refund_id\", \"datatype\": dbt_utils.type_string()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.759834}, "macro.stripe_source.get_plan_columns": {"unique_id": "macro.stripe_source.get_plan_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_plan_columns.sql", "original_file_path": "macros/get_plan_columns.sql", "name": "get_plan_columns", "macro_sql": "{% macro get_plan_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"aggregate_usage\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"billing_scheme\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"interval_count\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"nickname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"product_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tiers_mode\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transform_usage_divide_by\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"transform_usage_round\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"trial_period_days\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"usage_type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{% if target.type == 'bigquery' %}\n    {{ columns.append( {\"name\": 'interval', \"datatype\": dbt_utils.type_string(), \"quote\": True } ) }}\n\n{% else %}\n    {{ columns.append( {\"name\": \"interval\", \"datatype\": dbt_utils.type_string()} ) }}\n\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7626271}, "macro.stripe_source.get_refund_columns": {"unique_id": "macro.stripe_source.get_refund_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_refund_columns.sql", "original_file_path": "macros/get_refund_columns.sql", "name": "get_refund_columns", "macro_sql": "{% macro get_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"charge_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_balance_transaction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.76426}, "macro.stripe_source.get_payment_method_columns": {"unique_id": "macro.stripe_source.get_payment_method_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_payment_method_columns.sql", "original_file_path": "macros/get_payment_method_columns.sql", "name": "get_payment_method_columns", "macro_sql": "{% macro get_payment_method_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"billing_detail_address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_address_line_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_address_line_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_address_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_address_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7660868}, "macro.stripe_source.get_credit_note_line_item_columns": {"unique_id": "macro.stripe_source.get_credit_note_line_item_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_credit_note_line_item_columns.sql", "original_file_path": "macros/get_credit_note_line_item_columns.sql", "name": "get_credit_note_line_item_columns", "macro_sql": "{% macro get_credit_note_line_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_note_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"discount_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unit_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"unit_amount_decimal\", \"datatype\": dbt_utils.type_int()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7674}, "macro.stripe_source.livemode_predicate": {"unique_id": "macro.stripe_source.livemode_predicate", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/livemode_predicate.sql", "original_file_path": "macros/livemode_predicate.sql", "name": "livemode_predicate", "macro_sql": "{% macro livemode_predicate() %}\n\n    where livemode = {{ var('using_livemode', true) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.767623}, "macro.stripe_source.get_card_columns": {"unique_id": "macro.stripe_source.get_card_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_card_columns.sql", "original_file_path": "macros/get_card_columns.sql", "name": "get_card_columns", "macro_sql": "{% macro get_card_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_line_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_line_1_check\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_line_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_zip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_zip_check\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"brand\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cvc_check\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"dynamic_last_4\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exp_month\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"exp_year\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"fingerprint\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"funding\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"last_4\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"network\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"recipient\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tokenization_method\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.770873}, "macro.stripe_source.get_customer_columns": {"unique_id": "macro.stripe_source.get_customer_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_customer_columns.sql", "original_file_path": "macros/get_customer_columns.sql", "name": "get_customer_columns", "macro_sql": "{% macro get_customer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_balance\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_line_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_line_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bank_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"default_card_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"delinquent\", \"datatype\": \"boolean\"},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_prefix\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_settings_default_payment_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_settings_footer\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_line_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_line_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_carrier\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_tracking_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_exempt\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_info_tax_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_info_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_info_verification_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_info_verification_verified_name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.775593}, "macro.stripe_source.get_invoice_columns": {"unique_id": "macro.stripe_source.get_invoice_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_invoice_columns.sql", "original_file_path": "macros/get_invoice_columns.sql", "name": "get_invoice_columns", "macro_sql": "{% macro get_invoice_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount_due\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_paid\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_remaining\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"application_fee_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"attempt_count\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"attempted\", \"datatype\": \"boolean\"},\n    {\"name\": \"auto_advance\", \"datatype\": \"boolean\"},\n    {\"name\": \"billing\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"charge_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"default_source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"due_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ending_balance\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"finalized_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"footer\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"hosted_invoice_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_pdf\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"next_payment_attempt\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"paid\", \"datatype\": \"boolean\"},\n    {\"name\": \"period_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"period_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"receipt_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"starting_balance\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"statement_descriptor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status_transitions_finalized_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status_transitions_marked_uncollectible_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status_transitions_paid_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status_transitions_voided_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"subscription_proration_date\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"subtotal\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"tax\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"tax_percent\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"threshold_reason_amount_gte\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"total\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"webhooks_delivered_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.78103}, "macro.stripe_source.get_subscription_columns": {"unique_id": "macro.stripe_source.get_subscription_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_subscription_columns.sql", "original_file_path": "macros/get_subscription_columns.sql", "name": "get_subscription_columns", "macro_sql": "{% macro get_subscription_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"_fivetran_active\", \"datatype\": \"boolean\"},\n    {\"name\": \"application_fee_percent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"billing\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_cycle_anchor\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"billing_threshold_amount_gte\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"billing_threshold_reset_billing_cycle_anchor\", \"datatype\": \"boolean\"},\n    {\"name\": \"cancel_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"cancel_at_period_end\", \"datatype\": \"boolean\"},\n    {\"name\": \"canceled_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"current_period_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"current_period_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"days_until_due\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"default_source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ended_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"start_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_percent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"trial_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"trial_start\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_float", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.783917}, "macro.stripe_source.get_payment_method_card_columns": {"unique_id": "macro.stripe_source.get_payment_method_card_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_payment_method_card_columns.sql", "original_file_path": "macros/get_payment_method_card_columns.sql", "name": "get_payment_method_card_columns", "macro_sql": "{% macro get_payment_method_card_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"brand\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"charge_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fingerprint\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"funding\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"wallet_type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.785036}, "macro.stripe_source.get_charge_columns": {"unique_id": "macro.stripe_source.get_charge_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_charge_columns.sql", "original_file_path": "macros/get_charge_columns.sql", "name": "get_charge_columns", "macro_sql": "{% macro get_charge_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_refunded\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"application\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"application_fee_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bank_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"calculated_statement_descriptor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"captured\", \"datatype\": \"boolean\"},\n    {\"name\": \"card_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"destination\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fraud_details_stripe_report\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fraud_details_user_report\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"on_behalf_of\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"outcome_network_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"outcome_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"outcome_risk_level\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"outcome_risk_score\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"outcome_seller_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"outcome_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"paid\", \"datatype\": \"boolean\"},\n    {\"name\": \"payment_intent_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"refunded\", \"datatype\": \"boolean\"},\n    {\"name\": \"shipping_address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_line_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_line_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_carrier\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_tracking_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_transfer\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"statement_descriptor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transfer_data_destination\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transfer_group\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transfer_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7914398}, "macro.stripe_source.get_invoice_line_item_columns": {"unique_id": "macro.stripe_source.get_invoice_line_item_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_invoice_line_item_columns.sql", "original_file_path": "macros/get_invoice_line_item_columns.sql", "name": "get_invoice_line_item_columns", "macro_sql": "{% macro get_invoice_line_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discountable\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"period_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"period_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"plan_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"proration\", \"datatype\": \"boolean\"},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subscription_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unique_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.793372}, "macro.stripe_source.get_payment_intent_columns": {"unique_id": "macro.stripe_source.get_payment_intent_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_payment_intent_columns.sql", "original_file_path": "macros/get_payment_intent_columns.sql", "name": "get_payment_intent_columns", "macro_sql": "{% macro get_payment_intent_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_capturable\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_received\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"application\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"application_fee_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"canceled_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"cancellation_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"capture_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"confirmation_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_charge_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_decline_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_doc_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_param\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"on_behalf_of\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"statement_descriptor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transfer_data_destination\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transfer_group\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.797111}, "macro.stripe_source.get_fee_columns": {"unique_id": "macro.stripe_source.get_fee_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_fee_columns.sql", "original_file_path": "macros/get_fee_columns.sql", "name": "get_fee_columns", "macro_sql": "{% macro get_fee_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"application\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.798246}, "macro.stripe_source.get_balance_transaction_columns": {"unique_id": "macro.stripe_source.get_balance_transaction_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_balance_transaction_columns.sql", "original_file_path": "macros/get_balance_transaction_columns.sql", "name": "get_balance_transaction_columns", "macro_sql": "{% macro get_balance_transaction_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"available_on\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"fee\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"net\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"payout_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.7999911}, "macro.stripe_source.get_payout_columns": {"unique_id": "macro.stripe_source.get_payout_columns", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "macros/get_payout_columns.sql", "original_file_path": "macros/get_payout_columns.sql", "name": "get_payout_columns", "macro_sql": "{% macro get_payout_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"arrival_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"automatic\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"destination_bank_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"destination_card_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_balance_transaction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"statement_descriptor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8024619}, "macro.dbt_project_evaluator.spark__listagg": {"unique_id": "macro.dbt_project_evaluator.spark__listagg", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/spark_shim.sql", "original_file_path": "macros/spark_shim.sql", "name": "spark__listagg", "macro_sql": "{% macro spark__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {# \n        This is not the full support for listagg on databricks but it allows tests to pass/fail for this package\n    #}\n\n    {% if limit_num -%}\n        {%- do exceptions.raise_compiler_error(\"listagg on databricks doesn't support limit_num\") -%}\n    {%- endif %}\n    array_join(\n        sort_array(\n            array_agg(\n                {{ measure }}\n                )\n        )\n        ,\n        {{ delimiter_text }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.803033}, "macro.dbt_project_evaluator.spark__array_construct": {"unique_id": "macro.dbt_project_evaluator.spark__array_construct", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/spark_shim.sql", "original_file_path": "macros/spark_shim.sql", "name": "spark__array_construct", "macro_sql": "{% macro spark__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.803175}, "macro.dbt_project_evaluator.spark__array_concat": {"unique_id": "macro.dbt_project_evaluator.spark__array_concat", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/spark_shim.sql", "original_file_path": "macros/spark_shim.sql", "name": "spark__array_concat", "macro_sql": "{% macro spark__array_concat(array_1, array_2) -%}\n    concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8032992}, "macro.dbt_project_evaluator.spark__array_append": {"unique_id": "macro.dbt_project_evaluator.spark__array_append", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/spark_shim.sql", "original_file_path": "macros/spark_shim.sql", "name": "spark__array_append", "macro_sql": "{% macro spark__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8034828}, "macro.dbt_project_evaluator.select_from_values": {"unique_id": "macro.dbt_project_evaluator.select_from_values", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/select_from_values.sql", "original_file_path": "macros/select_from_values.sql", "name": "select_from_values", "macro_sql": "{%- macro select_from_values(values, columns) %}\n\n    {%- set column_names = [] -%}\n\n    {%- set null_values  = [] -%}\n\n    {%- set type_string = dbt_utils.type_string() | trim -%}\n\n    {%- for column in columns %}\n\n        {%- if column is string -%}\n            {%- set column_name = column -%}\n            {%- set column_type = type_string -%}\n        {%- else -%}\n            {%- set column_name, column_type = column -%}\n        {%- endif -%}\n        {% do column_names.append(column_name) %}\n        {% do null_values.append(\"cast(null as \" ~ column_type | trim ~\" )\")  %}\n        \n    {%- endfor -%}\n\n    {%- if values %}\n        {{ return(adapter.dispatch('select_from_values', 'dbt_project_evaluator')(values, column_names)) }}\n    {%- else -%} -- if values is an empty list, return an empty table\n        -- Creates a one-record table with NULL for every column. Then, filters out the NULL records so the final table is empty.\n        {{ return(adapter.dispatch('select_from_values', 'dbt_project_evaluator')([null_values], column_names) ~ 'where ' ~ column_names[0] ~ ' is not null') }}\n\n    {% endif -%}\n\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_project_evaluator.default__select_from_values"]}, "description": "A macro to generate the SQL to create models where the data comes from a Jinja variable", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/staging/graph/graph.yml", "arguments": [{"name": "columns", "type": "list", "description": "The names of the columns, in the same order as the values.\nCan be either column_name or tuple (column_name, data type). \nIf values list is empty these data types are used to define correct type in empty model, \nin case of no data type provided column will be created as string\n"}, {"name": "values", "type": "list", "description": "The list of values to be inserted in the view/table. Each item of the list is a list itself, like ['value_col1', 'value_col2', 'value_col3']"}], "created_at": 1661541350.157094}, "macro.dbt_project_evaluator.default__select_from_values": {"unique_id": "macro.dbt_project_evaluator.default__select_from_values", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/select_from_values.sql", "original_file_path": "macros/select_from_values.sql", "name": "default__select_from_values", "macro_sql": "{%- macro default__select_from_values(values,column_names) %}\n\n    {#-\n    The default implementation leverages the following syntax\n\n    select * from ( values ('val1a','val2a','val3a'), ('val1b','val2b','val3b') ) as t (col_name1, col_name2, col_name3)\n    -#}\n\n    {%- set column_names_string = column_names | join(\", \\n\") -%}\n\n    {%- set values_list_of_strings = [] -%}\n\n    {%- for indiv_values in values -%}\n      {%- do values_list_of_strings.append( indiv_values | join(\", \\n\")) -%}\n    {%- endfor -%}\n\n    {%- set values_string = '(' ~ values_list_of_strings | join(\"), \\n\\n(\") ~ ')' -%}\n\n        with cte as (\n\n            select * from ( \n                    values {{ values_string }} \n                ) as t ({{ column_names_string }})\n\n        )\n\n        select * from cte\n\n{% endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.806325}, "macro.dbt_project_evaluator.bigquery__select_from_values": {"unique_id": "macro.dbt_project_evaluator.bigquery__select_from_values", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/select_from_values.sql", "original_file_path": "macros/select_from_values.sql", "name": "bigquery__select_from_values", "macro_sql": "{%- macro bigquery__select_from_values(values,column_names) -%}\n\n    {# \n    The bigquery implementation leverages the following syntax\n\n    select * from unnest( [ struct('val1a' as col_name1, 'val2a' as col_name2, 'val3a' as col_name3), ('val1b','val2b','val3b') ] )\n    #}\n\n    {%- if execute and values -%}\n\n        {%- set first_row = values[0] -%}\n        {%- set following_rows_list_of_strings = [] -%}\n\n        {%- for values_row in values[1:] -%}\n            {%- do following_rows_list_of_strings.append( values_row | join(\", \\n\")) -%}\n        {%- endfor -%}\n\n        {%- set following_rows = '(' ~ following_rows_list_of_strings | join(\"), \\n\\n(\") ~ ')' -%}\n\n        {%- set struct_header = [] %}\n        {%- for column in column_names -%}\n\n            {%- set name %}\n                {{ first_row[loop.index0] }} as {{ column }}\n            {% endset -%}\n            {%- do struct_header.append(name) -%}\n        \n        {%- endfor -%}\n\n        {%- set struct_header_string = struct_header | join(', ') -%}\n\n        select \n            * \n        from \n            unnest([    \n                struct( {{ struct_header_string }} )\n                {% if following_rows != '()' %}\n                , {{ following_rows }}\n                {% endif %}\n        ])\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.807235}, "macro.dbt_project_evaluator.redshift__select_from_values": {"unique_id": "macro.dbt_project_evaluator.redshift__select_from_values", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/select_from_values.sql", "original_file_path": "macros/select_from_values.sql", "name": "redshift__select_from_values", "macro_sql": "{%- macro redshift__select_from_values(values,column_names) -%}\n\n    {# \n    Redshift does not support the values keyword\n    The Redshift implementation falls back on using the following syntax, which had poor performance on other DWs\n    \n    select \n        'val1a' as col_name1,\n        'val2a' as col_name2,\n        'val3a' as col_name3\n    union all\n    select\n        'val1b' as col_name1,\n        'val2b' as col_name2,\n        'val3b' as col_name3\n    #}\n\n    {% set all_select_to_union = [] %}\n\n    {%- for value in values %}\n\n        {%- set all_statements_in_union = [] %}\n        {%- set individual_values = value %}\n\n        {%- for column_value in individual_values %}\n\n            {%- set column_value_and_name %}\n                {{ column_value }} as {{ column_names[loop.index0] }}\n            {%- endset %}\n            {%- do all_statements_in_union.append(column_value_and_name) %}    \n   \n        {%- endfor %}\n        {%- do all_select_to_union.append(all_statements_in_union | join(', ')) %}\n      \n    {%- endfor %}\n\nselect \n{{ all_select_to_union | join(' \n    union all \n    select \n    ') \n}}\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.807843}, "macro.dbt_project_evaluator.recursive_dag": {"unique_id": "macro.dbt_project_evaluator.recursive_dag", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "name": "recursive_dag", "macro_sql": "{% macro recursive_dag() %}\n    {{ return(adapter.dispatch('recursive_dag', 'dbt_project_evaluator')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.default__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8101912}, "macro.dbt_project_evaluator.default__recursive_dag": {"unique_id": "macro.dbt_project_evaluator.default__recursive_dag", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "name": "default__recursive_dag", "macro_sql": "{% macro default__recursive_dag() %}\n\nwith recursive direct_relationships as (\n    select  \n        *\n    from {{ ref('int_direct_relationships') }}\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor \n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        0 as distance,\n        {{ dbt_utils.array_construct(['resource_name']) }} as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null {# optional lever to change filtering of anchor clause to only include root resources #}\n    \n    union all\n\n    -- recursive clause\n    select  \n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        all_relationships.distance+1 as distance, \n        {{ dbt_utils.array_append('all_relationships.path', 'direct_relationships.resource_name') }} as path,\n        case \n            when \n                all_relationships.child_materialized in ('view', 'ephemeral') \n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true) \n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_construct", "macro.dbt_utils.array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8106098}, "macro.dbt_project_evaluator.bigquery__recursive_dag": {"unique_id": "macro.dbt_project_evaluator.bigquery__recursive_dag", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "name": "bigquery__recursive_dag", "macro_sql": "{% macro bigquery__recursive_dag() %}\n\n-- as of Feb 2022 BigQuery doesn't support with recursive in the same way as other DWs\n{% set max_depth = var('max_depth_dag',9) %}\n\nwith direct_relationships as (\n    select  \n        *\n    from {{ ref('int_direct_relationships') }}\n    where resource_type <> 'test'\n)\n\n-- must do distinct prior to creating array because BigQuery doesn't support distinct on array type\n, get_distinct as (\n    select distinct\n        resource_id as parent_id,\n        resource_id as child_id,\n        resource_name,\n        materialized as child_materialized\n    from direct_relationships\n)\n\n, cte_0 as (\n    select \n        parent_id,\n        child_id,\n        child_materialized,\n        0 as distance,\n        {{ dbt_utils.array_construct(['resource_name']) }} as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n    from get_distinct\n)\n\n{% for i in range(1,max_depth) %}\n{% set prev_cte_path %}cte_{{ i - 1 }}.path{% endset %}\n, cte_{{i}} as (\n    select \n        cte_{{i - 1}}.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        cte_{{i - 1}}.distance+1 as distance, \n        {{ dbt_utils.array_append(prev_cte_path, 'direct_relationships.resource_name') }} as path,\n        case \n            when \n                cte_{{i - 1}}.child_materialized in ('view', 'ephemeral') \n                and coalesce(cte_{{i - 1}}.is_dependent_on_chain_of_views, true) \n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_{{i - 1}}\n            on cte_{{i - 1}}.child_id = direct_relationships.direct_parent_id\n)\n{% endfor %}\n\n, all_relationships_unioned as (\n    {% for i in range(max_depth) %}\n    select * from cte_{{i}}\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n)\n\n, resource_info as (\n    select * from {{ ref('int_all_graph_resources') }}\n)\n\n\n, all_relationships as (\n    select\n        parent.resource_id as parent_id,\n        parent.resource_name as parent,\n        parent.resource_type as parent_resource_type,\n        parent.model_type as parent_model_type,\n        parent.materialized as parent_materialized,\n        parent.source_name as parent_source_name,\n        parent.file_path as parent_file_path,\n        parent.directory_path as parent_directory_path,\n        parent.file_name as parent_file_name,\n        child.resource_id as child_id,\n        child.resource_name as child,\n        child.resource_type as child_resource_type,\n        child.model_type as child_model_type,\n        child.materialized as child_materialized,\n        child.source_name as child_source_name,\n        child.file_path as child_file_path,\n        child.directory_path as child_directory_path,\n        child.file_name as child_file_name,\n        all_relationships_unioned.distance,\n        all_relationships_unioned.path,\n        all_relationships_unioned.is_dependent_on_chain_of_views\n\n    from all_relationships_unioned\n    left join resource_info as parent\n        on all_relationships_unioned.parent_id = parent.resource_id\n    left join resource_info as child\n        on all_relationships_unioned.child_id = child.resource_id\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_construct", "macro.dbt_utils.array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.811695}, "macro.dbt_project_evaluator.spark__recursive_dag": {"unique_id": "macro.dbt_project_evaluator.spark__recursive_dag", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "name": "spark__recursive_dag", "macro_sql": "{% macro spark__recursive_dag() %}\n-- as of June 2022 databricks SQL doesn't support \"with recursive\" in the same way as other DWs\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.811832}, "macro.dbt_project_evaluator.wrap_string_with_quotes": {"unique_id": "macro.dbt_project_evaluator.wrap_string_with_quotes", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/wrap_string_with_quotes.sql", "original_file_path": "macros/wrap_string_with_quotes.sql", "name": "wrap_string_with_quotes", "macro_sql": "{% macro wrap_string_with_quotes(str) %}\n  {{ return(\"'\" ~ str ~ \"'\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8120809}, "macro.dbt_project_evaluator.loop_vars": {"unique_id": "macro.dbt_project_evaluator.loop_vars", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/loop_vars.sql", "original_file_path": "macros/loop_vars.sql", "name": "loop_vars", "macro_sql": "{% macro loop_vars(vars) %}\n    {{ return(adapter.dispatch('loop_vars', 'dbt_project_evaluator')(vars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.default__loop_vars"]}, "description": "A macro that loops through variables and returns them as a SQL query to be used in a model", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_project_evaluator://models/staging/variables/variables.yml", "arguments": [{"name": "vars", "type": "list|string", "description": "A list of variables from dbt_project.yml"}], "created_at": 1661541350.157676}, "macro.dbt_project_evaluator.default__loop_vars": {"unique_id": "macro.dbt_project_evaluator.default__loop_vars", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/loop_vars.sql", "original_file_path": "macros/loop_vars.sql", "name": "default__loop_vars", "macro_sql": "{% macro default__loop_vars(vars) %}\n{%- set sql_query = [] -%}\n{%- for var_name in vars -%}\n    {%- if var(var_name,[]) is not string -%}\n        {%- for var_value in var(var_name,[]) -%}\n            {% set sql_command %}\n            select '{{ var_name }}' as var_name, '{{ var_value }}' as var_value\n            {% endset %}\n            {%- do sql_query.append(sql_command) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {% set sql_command %}\n        select '{{ var_name }}' as var_name, '{{ var(var_name,[]) }}' as var_value\n        {% endset %}\n        {%- do sql_query.append(sql_command) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- if sql_query -%}\n{{ sql_query | join('union all') }}\n{%- else -%}\nselect '' as var_name, '' as var_value\nlimit 0\n{%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.813465}, "macro.dbt_project_evaluator.filter_exceptions": {"unique_id": "macro.dbt_project_evaluator.filter_exceptions", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/filter_exceptions.sql", "original_file_path": "macros/filter_exceptions.sql", "name": "filter_exceptions", "macro_sql": "{% macro filter_exceptions(model_ref) %}\n\n{% set query_filters %}\nselect \n    column_name, \n    id_to_exclude \nfrom {{ ref('dbt_project_evaluator_exceptions') }}\nwhere fct_name = '{{ model_ref.name }}'\n{% endset %}\n\n{% if execute %}\n    where 1 = 1\n    {% for row_filter in run_query(query_filters) %}\n        and {{ row_filter[0] }} not like '{{ row_filter[1] }}'\n    {% endfor %}\n{% endif %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8140538}, "macro.dbt_project_evaluator.is_not_empty_string": {"unique_id": "macro.dbt_project_evaluator.is_not_empty_string", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/is_not_empty_string.sql", "original_file_path": "macros/is_not_empty_string.sql", "name": "is_not_empty_string", "macro_sql": "{% macro is_not_empty_string(str) %}\n    {{ return(adapter.dispatch('is_not_empty_string', 'dbt_project_evaluator')(str)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.default__is_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.814389}, "macro.dbt_project_evaluator.default__is_not_empty_string": {"unique_id": "macro.dbt_project_evaluator.default__is_not_empty_string", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/is_not_empty_string.sql", "original_file_path": "macros/is_not_empty_string.sql", "name": "default__is_not_empty_string", "macro_sql": "{% macro default__is_not_empty_string(str) %}\n\n    {% if str %}\n    {{ true }}\n    {% else %}\n    {{ false }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8145752}, "macro.dbt_project_evaluator.get_sources": {"unique_id": "macro.dbt_project_evaluator.get_sources", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/unpack/get_sources.sql", "original_file_path": "macros/unpack/get_sources.sql", "name": "get_sources", "macro_sql": "{%- macro get_sources() -%}\n    {{ return(adapter.dispatch('get_sources', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_sources"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.815716}, "macro.dbt_project_evaluator.default__get_sources": {"unique_id": "macro.dbt_project_evaluator.default__get_sources", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/unpack/get_sources.sql", "original_file_path": "macros/unpack/get_sources.sql", "name": "default__get_sources", "macro_sql": "{%- macro default__get_sources() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.sources.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n         {%- set values_line = \n            [\n              wrap_string_with_quotes(node.unique_id),\n              wrap_string_with_quotes(node.name),\n              wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n              wrap_string_with_quotes(node.alias),\n              wrap_string_with_quotes(node.resource_type),\n              wrap_string_with_quotes(node.source_name),\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.source_description) | trim ~ \" as boolean)\",\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as boolean)\",\n              \"cast(\" ~ node.config.enabled ~ \" as boolean)\",\n              wrap_string_with_quotes(node.loaded_at_field | replace(\"'\", \"_\")),\n              wrap_string_with_quotes(node.database),\n              wrap_string_with_quotes(node.schema),\n              wrap_string_with_quotes(node.package_name),\n              wrap_string_with_quotes(node.loader),\n              wrap_string_with_quotes(node.identifier),\n              wrap_string_with_quotes(node.meta | tojson)\n            ]\n        %}\n            \n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n\n    {{ return(\n        dbt_project_evaluator.select_from_values(\n            values = values,\n            columns = [\n              'unique_id',\n              'name',\n              'file_path',\n              'alias',\n              'resource_type',\n              'source_name',\n              ('is_source_described', 'boolean'),\n              ('is_described', 'boolean'),\n              ('is_enabled', 'boolean'),\n              'loaded_at_field',\n              'database',\n              'schema',\n              'package_name',\n              'loader',\n              'identifier',\n              'meta'\n            ]\n         )\n    ) }}\n \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt_project_evaluator.select_from_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.817259}, "macro.dbt_project_evaluator.get_exposures": {"unique_id": "macro.dbt_project_evaluator.get_exposures", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/unpack/get_exposures.sql", "original_file_path": "macros/unpack/get_exposures.sql", "name": "get_exposures", "macro_sql": "{%- macro get_exposures() -%}\n    {{ return(adapter.dispatch('get_exposures', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_exposures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8181891}, "macro.dbt_project_evaluator.default__get_exposures": {"unique_id": "macro.dbt_project_evaluator.default__get_exposures", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/unpack/get_exposures.sql", "original_file_path": "macros/unpack/get_exposures.sql", "name": "default__get_exposures", "macro_sql": "{%- macro default__get_exposures() -%}\n\n    {%- if execute -%}\n\n        {%- set nodes_list = graph.exposures.values() -%}\n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n\n          {%- set values_line = \n            [\n              wrap_string_with_quotes(node.unique_id),\n              wrap_string_with_quotes(node.name),\n              wrap_string_with_quotes(node.resource_type),\n              wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as boolean)\",\n              wrap_string_with_quotes(node.type),\n              wrap_string_with_quotes(node.maturity),\n              wrap_string_with_quotes(node.package_name),\n              wrap_string_with_quotes(node.url),\n              wrap_string_with_quotes(node.owner.name),\n              wrap_string_with_quotes(node.owner.email),\n              wrap_string_with_quotes(node.meta | tojson)\n            ]\n          %}\n\n          {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(\n        dbt_project_evaluator.select_from_values(\n            values = values,\n            columns = [\n              'unique_id', \n              'name', \n              'resource_type',\n              'file_path', \n              ('is_described', 'boolean'),\n              'exposure_type', \n              'maturity', \n              'package_name', \n              'url',\n              'owner_name',\n              'owner_email',\n              'meta'\n            ]\n         )\n    ) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt_project_evaluator.select_from_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.819487}, "macro.dbt_project_evaluator.get_nodes": {"unique_id": "macro.dbt_project_evaluator.get_nodes", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/unpack/get_nodes.sql", "original_file_path": "macros/unpack/get_nodes.sql", "name": "get_nodes", "macro_sql": "{%- macro get_nodes() -%}\n    {{ return(adapter.dispatch('get_nodes', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_nodes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8206131}, "macro.dbt_project_evaluator.default__get_nodes": {"unique_id": "macro.dbt_project_evaluator.default__get_nodes", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/unpack/get_nodes.sql", "original_file_path": "macros/unpack/get_nodes.sql", "name": "default__get_nodes", "macro_sql": "{%- macro default__get_nodes() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.nodes.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n        {%- set values_line  = \n            [\n                wrap_string_with_quotes(node.unique_id),\n                wrap_string_with_quotes(node.name),\n                wrap_string_with_quotes(node.resource_type),\n                wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n                \"cast(\" ~ node.config.enabled | trim ~ \" as boolean)\",\n                wrap_string_with_quotes(node.config.materialized),\n                wrap_string_with_quotes(node.config.on_schema_change),\n                wrap_string_with_quotes(node.database),\n                wrap_string_with_quotes(node.schema),\n                wrap_string_with_quotes(node.package_name),\n                wrap_string_with_quotes(node.alias),\n                \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as boolean)\",\n                \"''\" if not node.column_name else wrap_string_with_quotes(dbt_utils.escape_single_quotes(node.column_name)),\n                wrap_string_with_quotes(node.meta | tojson)\n            ]\n        %}\n\n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(\n        dbt_project_evaluator.select_from_values(\n            values = values,\n            columns = [\n              'unique_id',\n              'name',\n              'resource_type',\n              'file_path',\n              ('is_enabled', 'boolean'),\n              'materialized',\n              'on_schema_change',\n              'database',\n              'schema',\n              'package_name',\n              'alias',\n              ('is_described', 'boolean'),\n              'column_name',\n              'meta'\n            ]\n         )\n    ) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt_utils.escape_single_quotes", "macro.dbt_project_evaluator.select_from_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8221939}, "macro.dbt_project_evaluator.get_metrics": {"unique_id": "macro.dbt_project_evaluator.get_metrics", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/unpack/get_metrics.sql", "original_file_path": "macros/unpack/get_metrics.sql", "name": "get_metrics", "macro_sql": "{%- macro get_metrics() -%}\n    {{ return(adapter.dispatch('get_metrics', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_metrics"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.824002}, "macro.dbt_project_evaluator.default__get_metrics": {"unique_id": "macro.dbt_project_evaluator.default__get_metrics", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/unpack/get_metrics.sql", "original_file_path": "macros/unpack/get_metrics.sql", "name": "default__get_metrics", "macro_sql": "{%- macro default__get_metrics() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.metrics.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n          {% set metric_filters %}\n            {%- if node.filters|length -%}\n              {%- for filt in node.filters %}\n                '{{ filt.field }}'||'{{ filt.operator }}'||'''{{ dbt_utils.escape_single_quotes(filt.value) }}'''\n                {% if not loop.last %}|| ' - ' ||{% endif %}\n              {% endfor -%}\n            {%- else -%}\n                ''\n            {% endif -%}\n          {% endset %}\n\n          {%- set values_line = \n            [\n            wrap_string_with_quotes(node.unique_id),\n            wrap_string_with_quotes(node.name),\n            wrap_string_with_quotes(node.resource_type),\n            wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n            \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as boolean)\",\n            wrap_string_with_quotes(node.type),\n            wrap_string_with_quotes(node.model.identifier),\n            wrap_string_with_quotes(node.label),\n            wrap_string_with_quotes(node.sql),\n            wrap_string_with_quotes(node.timestamp),\n            wrap_string_with_quotes(node.package_name),\n            wrap_string_with_quotes(node.dimensions|join(' - ')),\n            metric_filters,\n            wrap_string_with_quotes(node.meta | tojson)\n            ]\n          %}\n\n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(\n        dbt_project_evaluator.select_from_values(\n            values = values,\n            columns = [\n              'unique_id', \n              'name', \n              'resource_type', \n              'file_path', \n              ('is_described', 'boolean'),\n              'metric_type', \n              'model',\n              'label', \n              'sql', \n              'timestamp', \n              'package_name',\n              'dimensions',\n              'filters',\n              'meta'\n            ]\n         )\n    ) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt_project_evaluator.select_from_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.825718}, "macro.dbt_project_evaluator.get_relationships": {"unique_id": "macro.dbt_project_evaluator.get_relationships", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/unpack/get_relationships.sql", "original_file_path": "macros/unpack/get_relationships.sql", "name": "get_relationships", "macro_sql": "{%- macro get_relationships(node_type) -%}\n    {{ return(adapter.dispatch('get_relationships', 'dbt_project_evaluator')(node_type)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.827651}, "macro.dbt_project_evaluator.default__get_relationships": {"unique_id": "macro.dbt_project_evaluator.default__get_relationships", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "macros/unpack/get_relationships.sql", "original_file_path": "macros/unpack/get_relationships.sql", "name": "default__get_relationships", "macro_sql": "{%- macro default__get_relationships(node_type) -%}\n\n    {%- if execute -%}\n        {%- if node_type == 'nodes' %}\n            {% set nodes_list = graph.nodes.values() %}   \n        {%- elif node_type == 'exposures' -%}\n            {% set nodes_list = graph.exposures.values() %}\n        {%- elif node_type == 'metrics' -%}\n            {% set nodes_list = graph.metrics.values() %}\n        {%- else -%}\n            {{ exceptions.raise_compiler_error(\"node_type needs to be either nodes, exposures or metrics, got \" ~ node_type) }}\n        {% endif -%}\n        \n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n\n            {%- if node.depends_on.nodes|length == 0 -%}\n\n                {%- set values_line = \n                  [\n                    \"cast('\" ~ node.unique_id ~ \"' as \" ~ dbt_utils.type_string() ~ \")\",\n                    \"cast(NULL as \" ~ dbt_utils.type_string() ~ \")\",\n                    \"FALSE\",\n                  ] \n                %}\n                  \n                {%- do values.append(values_line) -%}\n\n            {%- else -%}       \n\n                {%- for parent in node.depends_on.nodes -%}\n\n                    {%- set values_line = \n                        [\n                            \"cast('\" ~ node.unique_id ~ \"' as \" ~ dbt_utils.type_string() ~ \")\",\n                            \"cast('\" ~ parent ~ \"' as \" ~ dbt_utils.type_string() ~ \")\",\n                            \"\" ~ loop.last ~ \"\"\n                        ]\n                    %}\n                      \n                    {%- do values.append(values_line) -%}\n\n                {%- endfor -%}\n\n            {%- endif -%}\n\n        {%- endfor -%}\n    \n    {{ return(\n        dbt_project_evaluator.select_from_values(\n            values = values,\n            columns = [\n                'resource_id',\n                'direct_parent_id',\n                'is_primary_relationship'\n            ]\n         )\n    ) }}\n\n    {%- endif -%}\n  \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_project_evaluator.select_from_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8291461}, "macro.dbt_project_evaluator.test_is_empty": {"unique_id": "macro.dbt_project_evaluator.test_is_empty", "package_name": "dbt_project_evaluator", "root_path": "/Users/david/metaplane-dbt/dbt_packages/dbt_project_evaluator", "path": "tests/generic/test_is_empty.sql", "original_file_path": "tests/generic/test_is_empty.sql", "name": "test_is_empty", "macro_sql": "{% test is_empty(model) %}\n\n    {{ config (\n        severity = 'warn',\n        fail_calc = \"n_records\"\n    ) }}\n\n    select count(*) as n_records\n    from {{ model }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.829539}, "macro.stripe.date_timezone": {"unique_id": "macro.stripe.date_timezone", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "name": "date_timezone", "macro_sql": "{% macro date_timezone(column) -%}\n\n{{ adapter.dispatch('date_timezone', 'stripe')(column)  }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.stripe.default__date_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8304589}, "macro.stripe.bigquery__date_timezone": {"unique_id": "macro.stripe.bigquery__date_timezone", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "name": "bigquery__date_timezone", "macro_sql": "{% macro bigquery__date_timezone(column) -%}\n\ndate(\n    {{ column }}\n    {% if var('stripe_timezone', none) %} , \"{{ var('stripe_timezone') }}\" {% endif %}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8307}, "macro.stripe.postgres__date_timezone": {"unique_id": "macro.stripe.postgres__date_timezone", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "name": "postgres__date_timezone", "macro_sql": "{% macro postgres__date_timezone(column) -%}\n\n{% set converted_date %}\n\n{% if var('stripe_timezone', none) %}\n    {{ column }} at time zone '{{ var('stripe_timezone') }}'\n{% else %}\n    {{ column }}\n{% endif %}\n\n{% endset %}\n\n{{ dbt_utils.date_trunc('day',converted_date) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.831075}, "macro.stripe.redshift__date_timezone": {"unique_id": "macro.stripe.redshift__date_timezone", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "name": "redshift__date_timezone", "macro_sql": "{% macro redshift__date_timezone(column) -%}\n\n{% set converted_date %}\n\n{% if var('stripe_timezone', none) %}\n    convert_timezone('{{ var(\"stripe_timezone\") }}', {{ column }})\n{% else %}\n    {{ column }}\n{% endif %}\n\n{% endset %}\n\n{{ dbt_utils.date_trunc('day',converted_date) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.831458}, "macro.stripe.default__date_timezone": {"unique_id": "macro.stripe.default__date_timezone", "package_name": "stripe", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "name": "default__date_timezone", "macro_sql": "{% macro default__date_timezone(column) -%}\n\n{% set converted_date %}\n\n{% if var('stripe_timezone', none) %}\n    convert_timezone('{{ var(\"stripe_timezone\") }}', {{ column }})\n{% else %}\n    {{ column }}\n{% endif %}\n\n{% endset %}\n\n{{ dbt_utils.date_trunc('day',converted_date) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661541347.8318348}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "hubspot_source._fivetran_synced": {"unique_id": "hubspot_source._fivetran_synced", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_synced", "block_contents": "Timestamp of when Fivetran synced a record."}, "hubspot_source._fivetran_deleted": {"unique_id": "hubspot_source._fivetran_deleted", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "_fivetran_deleted", "block_contents": "Timestamp of when Fivetran marked a record as deleted."}, "hubspot_source.portal_id": {"unique_id": "hubspot_source.portal_id", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "portal_id", "block_contents": "The hub ID."}, "hubspot_source.is_deleted": {"unique_id": "hubspot_source.is_deleted", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "is_deleted", "block_contents": "Whether the record has been deleted in Hubspot."}, "hubspot_source.history_name": {"unique_id": "hubspot_source.history_name", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "history_name", "block_contents": "The name of the field being changed."}, "hubspot_source.history_source": {"unique_id": "hubspot_source.history_source", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "history_source", "block_contents": "The source (reason) of the change."}, "hubspot_source.history_source_id": {"unique_id": "hubspot_source.history_source_id", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "history_source_id", "block_contents": "The ID of the object that caused the change, if applicable."}, "hubspot_source.history_timestamp": {"unique_id": "hubspot_source.history_timestamp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "history_timestamp", "block_contents": "The timestamp the changed occurred."}, "hubspot_source.history_value": {"unique_id": "hubspot_source.history_value", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "history_value", "block_contents": "The new value of the field."}, "hubspot_source.email_event_browser": {"unique_id": "hubspot_source.email_event_browser", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "email_event_browser", "block_contents": "A JSON object representing the browser which serviced the event. Its comprised of the properties: 'name', 'family', 'producer', 'producer_url', 'type', 'url', 'version'."}, "hubspot_source.email_event_ip_address": {"unique_id": "hubspot_source.email_event_ip_address", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "email_event_ip_address", "block_contents": "The contact's IP address when the event occurred."}, "hubspot_source.email_event_location": {"unique_id": "hubspot_source.email_event_location", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "email_event_location", "block_contents": "A JSON object representing the location where the event occurred. It's comprised of the properties: 'city', 'state', 'country'."}, "hubspot_source.email_event_user_agent": {"unique_id": "hubspot_source.email_event_user_agent", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "docs.md", "original_file_path": "models/docs.md", "name": "email_event_user_agent", "block_contents": "The user agent responsible for the event, e.g. \u201cMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\u201d"}, "hubspot.bounces": {"unique_id": "hubspot.bounces", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "bounces", "block_contents": "The total number of bounce email events."}, "hubspot.clicks": {"unique_id": "hubspot.clicks", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "clicks", "block_contents": "The total number of click email events."}, "hubspot.deferrals": {"unique_id": "hubspot.deferrals", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "deferrals", "block_contents": "The total number of deferral email events."}, "hubspot.deliveries": {"unique_id": "hubspot.deliveries", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "deliveries", "block_contents": "The total number of delivery email events."}, "hubspot.drops": {"unique_id": "hubspot.drops", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "drops", "block_contents": "The total number of drop email events."}, "hubspot.forwards": {"unique_id": "hubspot.forwards", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "forwards", "block_contents": "The total number of forward email events."}, "hubspot.opens": {"unique_id": "hubspot.opens", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "opens", "block_contents": "The total number of open email events."}, "hubspot.prints": {"unique_id": "hubspot.prints", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "prints", "block_contents": "The total number of print email events."}, "hubspot.spam_reports": {"unique_id": "hubspot.spam_reports", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "spam_reports", "block_contents": "The total number of spam report email events."}, "hubspot.unsubscribes": {"unique_id": "hubspot.unsubscribes", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "unsubscribes", "block_contents": "The total number of unsubscribe email events."}, "hubspot.unique_bounces": {"unique_id": "hubspot.unique_bounces", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "unique_bounces", "block_contents": "The total number of unique email sends with a bounce email event."}, "hubspot.unique_clicks": {"unique_id": "hubspot.unique_clicks", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "unique_clicks", "block_contents": "The total number of unique email sends with a click email event."}, "hubspot.unique_deferrals": {"unique_id": "hubspot.unique_deferrals", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "unique_deferrals", "block_contents": "The total number of unique email sends with a deferral email event."}, "hubspot.unique_deliveries": {"unique_id": "hubspot.unique_deliveries", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "unique_deliveries", "block_contents": "The total number of unique email sends with a delivery email event."}, "hubspot.unique_drops": {"unique_id": "hubspot.unique_drops", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "unique_drops", "block_contents": "The total number of unique email sends with a drop email event."}, "hubspot.unique_forwards": {"unique_id": "hubspot.unique_forwards", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "unique_forwards", "block_contents": "The total number of unique email sends with a forward email event."}, "hubspot.unique_opens": {"unique_id": "hubspot.unique_opens", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "unique_opens", "block_contents": "The total number of unique email sends with a opens email event."}, "hubspot.unique_prints": {"unique_id": "hubspot.unique_prints", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "unique_prints", "block_contents": "The total number of unique email sends with a print email event."}, "hubspot.unique_spam_reports": {"unique_id": "hubspot.unique_spam_reports", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "unique_spam_reports", "block_contents": "The total number of unique email sends with a spam report email event."}, "hubspot.unique_unsubscribes": {"unique_id": "hubspot.unique_unsubscribes", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "unique_unsubscribes", "block_contents": "The total number of unique email sends with a unsubscribe email event."}, "hubspot.count_engagement_notes": {"unique_id": "hubspot.count_engagement_notes", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "count_engagement_notes", "block_contents": "The total number of related note engagements."}, "hubspot.count_engagement_tasks": {"unique_id": "hubspot.count_engagement_tasks", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "count_engagement_tasks", "block_contents": "The total number of related task engagements."}, "hubspot.count_engagement_calls": {"unique_id": "hubspot.count_engagement_calls", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "count_engagement_calls", "block_contents": "The total number of related call engagements."}, "hubspot.count_engagement_meetings": {"unique_id": "hubspot.count_engagement_meetings", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "count_engagement_meetings", "block_contents": "The total number of related meeting engagements."}, "hubspot.count_engagement_emails": {"unique_id": "hubspot.count_engagement_emails", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "count_engagement_emails", "block_contents": "The total number of related email engagements."}, "hubspot.count_engagement_incoming_emails": {"unique_id": "hubspot.count_engagement_incoming_emails", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "count_engagement_incoming_emails", "block_contents": "The total number of related incoming email engagements."}, "hubspot.count_engagement_forwarded_emails": {"unique_id": "hubspot.count_engagement_forwarded_emails", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "docs.md", "original_file_path": "models/docs.md", "name": "count_engagement_forwarded_emails", "block_contents": "The total number of related forwarded email engagements."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"model.hubspot_source.stg_hubspot__ticket_contact": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_contact_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_contact_tmp')),\n                staging_columns=get_ticket_contact_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        ticket_id,\n        contact_id\n\n    from macro\n\n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": ["macro.hubspot_source.get_ticket_contact_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__ticket_contact"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_contact", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__ticket_contact.sql", "original_file_path": "models/stg_hubspot__ticket_contact.sql", "name": "stg_hubspot__ticket_contact", "alias": "stg_hubspot__ticket_contact", "checksum": {"name": "sha256", "checksum": "8b4ea45115ac9528415e6e70165c58a88ecaada0c684632e4a8437ca43f87081"}, "tags": [], "refs": [["stg_hubspot__ticket_contact_tmp"], ["stg_hubspot__ticket_contact_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.267158, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_pipeline": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_pipeline_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_pipeline_tmp')),\n                staging_columns=get_ticket_pipeline_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(pipeline_id as {{ dbt_utils.type_int() }} ) as ticket_pipeline_id,\n        _fivetran_deleted,\n        _fivetran_synced,\n        active as is_active,\n        display_order,\n        label as pipeline_label,\n        object_type_id\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "resource_type": "model", "depends_on": {"macros": ["macro.hubspot_source.get_ticket_pipeline_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__ticket_pipeline"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_pipeline", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__ticket_pipeline.sql", "original_file_path": "models/stg_hubspot__ticket_pipeline.sql", "name": "stg_hubspot__ticket_pipeline", "alias": "stg_hubspot__ticket_pipeline", "checksum": {"name": "sha256", "checksum": "7d5bb602ccb8e3c291d9591de97fe4b5bfcf288d4f2c3f1f2165e33506e597c9"}, "tags": [], "refs": [["stg_hubspot__ticket_pipeline_tmp"], ["stg_hubspot__ticket_pipeline_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.3555279, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__email_event_spam_report": [{"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_spam_report_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_spam_report_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_spam_report_tmp')),\n                staging_columns=get_email_event_spam_report_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        id as event_id,\n        ip_address,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_spam_report_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_event_spam_report"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_spam_report", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_event_spam_report.sql", "original_file_path": "models/stg_hubspot__email_event_spam_report.sql", "name": "stg_hubspot__email_event_spam_report", "alias": "stg_hubspot__email_event_spam_report", "checksum": {"name": "sha256", "checksum": "85421198bb7bbdce49003dbf19fccf4704af2b5f9725d4bce09b5d4bbee33826"}, "tags": [], "refs": [["stg_hubspot__email_event_spam_report_tmp"], ["stg_hubspot__email_event_spam_report_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.362174, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__email_event_forward": [{"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_forward_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_forward_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_forward_tmp')),\n                staging_columns=get_email_event_forward_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_forward_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_event_forward"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_forward", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_event_forward.sql", "original_file_path": "models/stg_hubspot__email_event_forward.sql", "name": "stg_hubspot__email_event_forward", "alias": "stg_hubspot__email_event_forward", "checksum": {"name": "sha256", "checksum": "00813368b7860a58153dc20ec275a28fc00a8dd68d9713af5f7d2ea784f8d205"}, "tags": [], "refs": [["stg_hubspot__email_event_forward_tmp"], ["stg_hubspot__email_event_forward_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.398572, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_deal": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_deal_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_deal_tmp')),\n                staging_columns=get_ticket_deal_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        ticket_id,\n        deal_id\n\n    from macro\n\n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": ["macro.hubspot_source.get_ticket_deal_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__ticket_deal"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_deal", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__ticket_deal.sql", "original_file_path": "models/stg_hubspot__ticket_deal.sql", "name": "stg_hubspot__ticket_deal", "alias": "stg_hubspot__ticket_deal", "checksum": {"name": "sha256", "checksum": "3619012836ee6540ec7bc0f8a6f8c36b4866eebadaaf15443b6477978a47a30c"}, "tags": [], "refs": [["stg_hubspot__ticket_deal_tmp"], ["stg_hubspot__ticket_deal_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.405045, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_engagement": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_engagement_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_engagement_tmp')),\n                staging_columns=get_ticket_engagement_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        ticket_id,\n        engagement_id\n\n    from macro\n\n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": ["macro.hubspot_source.get_ticket_engagement_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__ticket_engagement"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_engagement", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__ticket_engagement.sql", "original_file_path": "models/stg_hubspot__ticket_engagement.sql", "name": "stg_hubspot__ticket_engagement", "alias": "stg_hubspot__ticket_engagement", "checksum": {"name": "sha256", "checksum": "80a21d05bc43aae084adc9211f637bb29c7cab32359d7e1b70643895c67f8d2b"}, "tags": [], "refs": [["stg_hubspot__ticket_engagement_tmp"], ["stg_hubspot__ticket_engagement_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.417079, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_pipeline_stage": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_pipeline_stage_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_pipeline_stage_tmp')),\n                staging_columns=get_ticket_pipeline_stage_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        _fivetran_deleted,\n        _fivetran_synced,\n        active as is_active,\n        display_order,\n        is_closed,\n        label as pipeline_stage_label,\n        cast(pipeline_id as {{ dbt_utils.type_int() }} ) as ticket_pipeline_id,\n        cast(stage_id as {{ dbt_utils.type_int() }} ) as ticket_pipeline_stage_id,\n        ticket_state\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "resource_type": "model", "depends_on": {"macros": ["macro.hubspot_source.get_ticket_pipeline_stage_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__ticket_pipeline_stage"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_pipeline_stage", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__ticket_pipeline_stage.sql", "original_file_path": "models/stg_hubspot__ticket_pipeline_stage.sql", "name": "stg_hubspot__ticket_pipeline_stage", "alias": "stg_hubspot__ticket_pipeline_stage", "checksum": {"name": "sha256", "checksum": "65699f68036cde9b656bfeee2d67138411734270b81bac2d0e5319ed4124cfe0"}, "tags": [], "refs": [["stg_hubspot__ticket_pipeline_stage_tmp"], ["stg_hubspot__ticket_pipeline_stage_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.4223511, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__contact_merge_audit": [{"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_merge_audit_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__contact_merge_audit_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__contact_merge_audit_tmp')),\n                staging_columns=get_contact_merge_audit_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        canonical_vid,\n        contact_id,\n        entity_id,\n        first_name,\n        last_name,\n        num_properties_moved,\n        {% if target.type == 'redshift' %}\n        \"timestamp\"\n        {% else %} \n        timestamp {% endif %}\n        as timestamp_at,\n        user_id,\n        vid_to_merge,\n        _fivetran_synced\n    from macro\n    \n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_contact_merge_audit_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__contact_merge_audit"], "unique_id": "model.hubspot_source.stg_hubspot__contact_merge_audit", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__contact_merge_audit.sql", "original_file_path": "models/stg_hubspot__contact_merge_audit.sql", "name": "stg_hubspot__contact_merge_audit", "alias": "stg_hubspot__contact_merge_audit", "checksum": {"name": "sha256", "checksum": "8bd751735d98a3d08762ca3bd79e9ff9b756d7fa26b84e97b1974ba8cd6e98df"}, "tags": [], "refs": [["stg_hubspot__contact_merge_audit_tmp"], ["stg_hubspot__contact_merge_audit_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__contact.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.509365, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_company": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_company_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_company_tmp')),\n                staging_columns=get_ticket_company_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        ticket_id,\n        company_id\n\n    from macro\n\n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": ["macro.hubspot_source.get_ticket_company_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__ticket_company"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_company", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__ticket_company.sql", "original_file_path": "models/stg_hubspot__ticket_company.sql", "name": "stg_hubspot__ticket_company", "alias": "stg_hubspot__ticket_company", "checksum": {"name": "sha256", "checksum": "546903116d5a8e4505345c48c4eba23b6126c4d0ebeba3bb936db69dce2b5395"}, "tags": [], "refs": [["stg_hubspot__ticket_company_tmp"], ["stg_hubspot__ticket_company_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.517388, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__email_event_print": [{"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_print_enabled'])) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__email_event_print_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__email_event_print_tmp')),\n                staging_columns=get_email_event_print_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        browser,\n        id as event_id,\n        ip_address,\n        location as geo_location,\n        user_agent\n    from macro\n    \n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot_source.get_email_event_print_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__email_event_print"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_print", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__email_event_print.sql", "original_file_path": "models/stg_hubspot__email_event_print.sql", "name": "stg_hubspot__email_event_print", "alias": "stg_hubspot__email_event_print", "checksum": {"name": "sha256", "checksum": "4f85478e5950ad6676e59750250108ce65c0419781a741346e461f1a5f949fd2"}, "tags": [], "refs": [["stg_hubspot__email_event_print_tmp"], ["stg_hubspot__email_event_print_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__email.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.52978, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_property_history": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_property_history_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_property_history_tmp')),\n                staging_columns=get_ticket_property_history_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        _fivetran_synced,\n        ticket_id,\n        name as field_name,\n        source as change_source,\n        source_id as change_source_id,\n        timestamp_instant as change_timestamp,\n        value as new_value\n\n    from macro\n\n)\n\nselect *\nfrom fields", "resource_type": "model", "depends_on": {"macros": ["macro.hubspot_source.get_ticket_property_history_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__ticket_property_history"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_property_history", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__ticket_property_history.sql", "original_file_path": "models/stg_hubspot__ticket_property_history.sql", "name": "stg_hubspot__ticket_property_history", "alias": "stg_hubspot__ticket_property_history", "checksum": {"name": "sha256", "checksum": "0d94a7503e79169b585536da66cf8c8c2c138f0aa769ff800e147392c5dadb5a"}, "tags": [], "refs": [["stg_hubspot__ticket_property_history_tmp"], ["stg_hubspot__ticket_property_history_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.542651, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_hubspot__ticket_tmp') }}\n\n), macro as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_tmp')),\n                staging_columns=get_ticket_columns()\n            )\n        }}\n    from base\n\n), fields as (\n\n    select\n        id as ticket_id,\n\n{% if var('hubspot__pass_through_all_columns', false) %}\n        -- just pass everything through\n        {{ \n            fivetran_utils.remove_prefix_from_columns(\n                columns=adapter.get_columns_in_relation(ref('stg_hubspot__ticket_tmp')), \n                prefix='property_', exclude=['id']) \n        }}\n    from base\n\n{% else %}\n        -- just default columns + explicitly configured passthrough columns\n        _fivetran_synced,\n        is_deleted,\n        property_closed_date as closed_at,\n        property_createdate as created_at,\n        property_first_agent_reply_date as first_agent_reply_at,\n        property_hs_pipeline as ticket_pipeline_id,\n        property_hs_pipeline_stage as ticket_pipeline_stage_id,\n        property_hs_ticket_category as ticket_category,\n        property_hs_ticket_priority as ticket_priority,\n        property_hubspot_owner_id as owner_id,\n        property_subject as ticket_subject,\n        property_content as ticket_content\n\n        --The below macro adds the fields defined within your hubspot__ticket_pass_through_columns variable into the staging model\n        {{ fivetran_utils.fill_pass_through_columns('hubspot__ticket_pass_through_columns') }}\n\n        -- The below macro add the ability to create calculated fields using the hubspot__ticket_calculated_fields variable.\n        {{ fivetran_utils.calculated_fields('hubspot__ticket_calculated_fields') }}\n        \n    from macro\n{% endif %}\n\n)\n\nselect *\nfrom fields\nwhere not coalesce(is_deleted, false)", "resource_type": "model", "depends_on": {"macros": ["macro.hubspot_source.get_ticket_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns", "macro.fivetran_utils.calculated_fields"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "stg_hubspot__ticket"], "unique_id": "model.hubspot_source.stg_hubspot__ticket", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "stg_hubspot__ticket.sql", "original_file_path": "models/stg_hubspot__ticket.sql", "name": "stg_hubspot__ticket", "alias": "stg_hubspot__ticket", "checksum": {"name": "sha256", "checksum": "e346495b3b0e7a9e5b66ddf31a34363b4430a064d13c70fbc260f6177a72420a"}, "tags": [], "refs": [["stg_hubspot__ticket_tmp"], ["stg_hubspot__ticket_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot_source://models/stg_hubspot__ticket.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.562492, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_company_tmp": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', True)) }}\n\nselect *\nfrom {{ var('ticket_company') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_company_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_company_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__ticket_company_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_company_tmp.sql", "name": "stg_hubspot__ticket_company_tmp", "alias": "stg_hubspot__ticket_company_tmp", "checksum": {"name": "sha256", "checksum": "ab866a39ca7843eb128425f98bca66a6e8242dd2f5fe84af179d68fcab7d5ac4"}, "tags": [], "refs": [], "sources": [["hubspot", "ticket_company"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.5846348, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_tmp": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', True)) }}\n\nselect *\nfrom {{ var('ticket') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__ticket_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_tmp.sql", "name": "stg_hubspot__ticket_tmp", "alias": "stg_hubspot__ticket_tmp", "checksum": {"name": "sha256", "checksum": "dbdffdb858fa36e96eebbd51cf045349e7681163d8b5e8c54cc120b72a77a56b"}, "tags": [], "refs": [], "sources": [["hubspot", "ticket"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.607407, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_property_history_tmp": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', True)) }}\n\nselect *\nfrom {{ var('ticket_property_history') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_property_history_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_property_history_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__ticket_property_history_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_property_history_tmp.sql", "name": "stg_hubspot__ticket_property_history_tmp", "alias": "stg_hubspot__ticket_property_history_tmp", "checksum": {"name": "sha256", "checksum": "853d46ebcf3774eb8c899e344655ece1ee9aec1495b5487e45a78ae921d95af8"}, "tags": [], "refs": [], "sources": [["hubspot", "ticket_property_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.610513, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_pipeline_tmp": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect * \nfrom {{ var('ticket_pipeline') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_pipeline_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_pipeline_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__ticket_pipeline_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_pipeline_tmp.sql", "name": "stg_hubspot__ticket_pipeline_tmp", "alias": "stg_hubspot__ticket_pipeline_tmp", "checksum": {"name": "sha256", "checksum": "6d288825ed33116c29e43605b52be8b6d49c182536ca3830dcc034653b74e359"}, "tags": [], "refs": [], "sources": [["hubspot", "ticket_pipeline"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.613466, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_contact_tmp": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', True)) }}\n\nselect *\nfrom {{ var('ticket_contact') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_contact_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_contact_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__ticket_contact_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_contact_tmp.sql", "name": "stg_hubspot__ticket_contact_tmp", "alias": "stg_hubspot__ticket_contact_tmp", "checksum": {"name": "sha256", "checksum": "f9f143f93f0b5a0a431686e75ea785ee7ca7454287c9722ac1f7107e35539595"}, "tags": [], "refs": [], "sources": [["hubspot", "ticket_contact"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.6323478, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__contact_merge_audit_tmp": [{"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_merge_audit_enabled'])) }}\n\nselect *\nfrom {{ var('contact_merge_audit') }}", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__contact_merge_audit_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__contact_merge_audit_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__contact_merge_audit_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__contact_merge_audit_tmp.sql", "name": "stg_hubspot__contact_merge_audit_tmp", "alias": "stg_hubspot__contact_merge_audit_tmp", "checksum": {"name": "sha256", "checksum": "e4c90596f9d02c0ea5101ebf96a310534b6e21bfa6268340d2287f3a036795e8"}, "tags": [], "refs": [], "sources": [["hubspot", "contact_merge_audit"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.639607, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__email_event_print_tmp": [{"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_print_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_print') }}", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_print_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_print_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_event_print_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_print_tmp.sql", "name": "stg_hubspot__email_event_print_tmp", "alias": "stg_hubspot__email_event_print_tmp", "checksum": {"name": "sha256", "checksum": "e1492dcb7f40e0a445b55f116658d58a9380ec0cf1dcbc0237b77e0d7b37e34a"}, "tags": [], "refs": [], "sources": [["hubspot", "email_event_print"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.646546, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__email_event_forward_tmp": [{"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_forward_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_forward') }}", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_forward_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_forward_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_event_forward_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_forward_tmp.sql", "name": "stg_hubspot__email_event_forward_tmp", "alias": "stg_hubspot__email_event_forward_tmp", "checksum": {"name": "sha256", "checksum": "e84459ef11badbd945ca410cbdeccb77f66ce169f85e3c9ee7384798669ea5c6"}, "tags": [], "refs": [], "sources": [["hubspot", "email_event_forward"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.68727, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__email_event_spam_report_tmp": [{"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_spam_report_enabled'])) }}\n\nselect *\nfrom {{ var('email_event_spam_report') }}", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__email_event_spam_report_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__email_event_spam_report_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__email_event_spam_report_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__email_event_spam_report_tmp.sql", "name": "stg_hubspot__email_event_spam_report_tmp", "alias": "stg_hubspot__email_event_spam_report_tmp", "checksum": {"name": "sha256", "checksum": "86e3d74a05d22e93b2031516eb80c73cc43c061c804f52d16d35a11bfae1a468"}, "tags": [], "refs": [], "sources": [["hubspot", "email_event_spam_report"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.690698, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_engagement_tmp": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', True)) }}\n\nselect *\nfrom {{ var('ticket_engagement') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_engagement_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_engagement_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__ticket_engagement_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_engagement_tmp.sql", "name": "stg_hubspot__ticket_engagement_tmp", "alias": "stg_hubspot__ticket_engagement_tmp", "checksum": {"name": "sha256", "checksum": "ca941bf35a2fe42b308d809bc5742bfa83198620fb031bcc8f20f09163efe38e"}, "tags": [], "refs": [], "sources": [["hubspot", "ticket_engagement"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.69417, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_pipeline_stage_tmp": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', False)) }}\n\nselect * \nfrom {{ var('ticket_pipeline_stage') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_pipeline_stage_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_pipeline_stage_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__ticket_pipeline_stage_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_pipeline_stage_tmp.sql", "name": "stg_hubspot__ticket_pipeline_stage_tmp", "alias": "stg_hubspot__ticket_pipeline_stage_tmp", "checksum": {"name": "sha256", "checksum": "cb25ff2d6490eaf08d7c136559ce3cc8eaf04bc27005c99c2b3b0997ad6b67cd"}, "tags": [], "refs": [], "sources": [["hubspot", "ticket_pipeline_stage"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.705257, "config_call_dict": {"enabled": false}}], "model.hubspot_source.stg_hubspot__ticket_deal_tmp": [{"raw_sql": "{{ config(enabled=var('hubspot_service_enabled', True)) }}\n\nselect *\nfrom {{ var('ticket_deal') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot_source", "fqn": ["hubspot_source", "tmp", "stg_hubspot__ticket_deal_tmp"], "unique_id": "model.hubspot_source.stg_hubspot__ticket_deal_tmp", "package_name": "hubspot_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot_source", "path": "tmp/stg_hubspot__ticket_deal_tmp.sql", "original_file_path": "models/tmp/stg_hubspot__ticket_deal_tmp.sql", "name": "stg_hubspot__ticket_deal_tmp", "alias": "stg_hubspot__ticket_deal_tmp", "checksum": {"name": "sha256", "checksum": "294e6e8090e0238cf87a927a3e95b0a7f7de7255a4e6a80c66ad8227181a8a3e"}, "tags": [], "refs": [], "sources": [["hubspot", "ticket_deal"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "hubspot_source", "enabled": false}, "created_at": 1661541348.730266, "config_call_dict": {"enabled": false}}], "model.hubspot.hubspot__email_event_spam_report": [{"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_spam_report_enabled'])) }}\n\n{{ email_events_joined(var('email_event_spam_report')) }}", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_spam_report"], "unique_id": "model.hubspot.hubspot__email_event_spam_report", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/email_events/hubspot__email_event_spam_report.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_spam_report.sql", "name": "hubspot__email_event_spam_report", "alias": "hubspot__email_event_spam_report", "checksum": {"name": "sha256", "checksum": "ff144be07b2e2a466f3dbf5ed2d3b97f4cbb9080d369fbc04d5bde57b65964df"}, "tags": [], "refs": [["stg_hubspot__email_event_spam_report"], ["stg_hubspot__email_event"], ["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1661541348.9796102, "config_call_dict": {"enabled": false}}], "model.hubspot.hubspot__email_event_print": [{"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_print_enabled'])) }}\n\n{{ email_events_joined(var('email_event_print')) }}", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_print"], "unique_id": "model.hubspot.hubspot__email_event_print", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/email_events/hubspot__email_event_print.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_print.sql", "name": "hubspot__email_event_print", "alias": "hubspot__email_event_print", "checksum": {"name": "sha256", "checksum": "f704a54b54554e3c6de87df4d1d2162c3b870f2693f9f422325fdbb3d9f009d7"}, "tags": [], "refs": [["stg_hubspot__email_event_print"], ["stg_hubspot__email_event"], ["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1661541349.002293, "config_call_dict": {"enabled": false}}], "model.hubspot.hubspot__email_event_forward": [{"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled','hubspot_email_event_enabled','hubspot_email_event_forward_enabled'])) }}\n\n{{ email_events_joined(var('email_event_forward')) }}", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars", "macro.hubspot.email_events_joined"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "email_events", "hubspot__email_event_forward"], "unique_id": "model.hubspot.hubspot__email_event_forward", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/email_events/hubspot__email_event_forward.sql", "original_file_path": "models/marketing/email_events/hubspot__email_event_forward.sql", "name": "hubspot__email_event_forward", "alias": "hubspot__email_event_forward", "checksum": {"name": "sha256", "checksum": "5a2e3978e5b098a1e2a5a469c47d0eb79c5af03225ea9076ef5d0048b6b9c775"}, "tags": [], "refs": [["stg_hubspot__email_event_forward"], ["stg_hubspot__email_event"], ["stg_hubspot__contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "hubspot://models/marketing/email_events/email_events.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "hubspot", "enabled": false}, "created_at": 1661541349.011936, "config_call_dict": {"enabled": false}}], "model.hubspot.int_hubspot__contact_merge_adjust": [{"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['hubspot_marketing_enabled', 'hubspot_contact_enabled', 'hubspot_contact_merge_audit_enabled'])) }}\n\nwith contacts as (\n\n    select *\n    from {{ var('contact') }}\n\n), contact_merge_audit as (\n    select *\n    from {{ var('contact_merge_audit') }}\n\n), contact_merge_removal as (\n    select \n        contacts.*\n    from contacts\n    \n    left join contact_merge_audit\n        on contacts.contact_id = contact_merge_audit.vid_to_merge\n    \n    where contact_merge_audit.vid_to_merge is null\n)\n\nselect *\nfrom contact_merge_removal", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "hubspot", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "hubspot", "fqn": ["hubspot", "marketing", "intermediate", "int_hubspot__contact_merge_adjust"], "unique_id": "model.hubspot.int_hubspot__contact_merge_adjust", "package_name": "hubspot", "root_path": "/Users/david/metaplane-dbt/dbt_packages/hubspot", "path": "marketing/intermediate/int_hubspot__contact_merge_adjust.sql", "original_file_path": "models/marketing/intermediate/int_hubspot__contact_merge_adjust.sql", "name": "int_hubspot__contact_merge_adjust", "alias": "int_hubspot__contact_merge_adjust", "checksum": {"name": "sha256", "checksum": "78f2fe13a1aefc977c705df993089a9f05371e9ac4d89abb6492dc982ea4317b"}, "tags": [], "refs": [["stg_hubspot__contact"], ["stg_hubspot__contact_merge_audit"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "hubspot", "enabled": false}, "created_at": 1661541349.026004, "config_call_dict": {"enabled": false}}], "model.stripe_source.stg_stripe__credit_note": [{"raw_sql": "{{ config(enabled=var('using_credit_notes', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__credit_note_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__credit_note_tmp')),\n                staging_columns=get_credit_note_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_note_id,\n        amount,\n        created as created_at,\n        currency,\n        discount_amount,\n        subtotal,\n        total,\n        memo,\n        metadata,\n        number,\n        pdf,\n        reason,\n        status,\n        type,\n        voided_at,\n        customer_balance_transaction,\n        invoice_id,\n        refund_id\n    from fields\n)\n\nselect * \nfrom final", "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_credit_note_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__credit_note"], "unique_id": "model.stripe_source.stg_stripe__credit_note", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__credit_note.sql", "original_file_path": "models/stg_stripe__credit_note.sql", "name": "stg_stripe__credit_note", "alias": "stg_stripe__credit_note", "checksum": {"name": "sha256", "checksum": "c1d62cc3a13515443fb02f12bdda23fcab741c1f8a65f39010558f271c066a45"}, "tags": [], "refs": [["stg_stripe__credit_note_tmp"], ["stg_stripe__credit_note_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source", "enabled": false}, "created_at": 1661541349.1648362, "config_call_dict": {"enabled": false}}], "model.stripe_source.stg_stripe__credit_note_line_item": [{"raw_sql": "{{ config(enabled=var('using_credit_notes', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__credit_note_line_item_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__credit_note_line_item_tmp')),\n                staging_columns=get_credit_note_line_item_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_note_line_item_id,\n        credit_note_id,\n        amount,\n        discount_amount,\n        description,\n        quantity,\n        type,\n        unit_amount,\n        unit_amount_decimal\n    from fields\n)\n\nselect * \nfrom final", "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_credit_note_line_item_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "stg_stripe__credit_note_line_item"], "unique_id": "model.stripe_source.stg_stripe__credit_note_line_item", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "stg_stripe__credit_note_line_item.sql", "original_file_path": "models/stg_stripe__credit_note_line_item.sql", "name": "stg_stripe__credit_note_line_item", "alias": "stg_stripe__credit_note_line_item", "checksum": {"name": "sha256", "checksum": "e8f68e1d72840fe80ba22587ac89c6f9ed345d143e70bdcc19d443fca7f80c69"}, "tags": [], "refs": [["stg_stripe__credit_note_line_item_tmp"], ["stg_stripe__credit_note_line_item_tmp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stripe_source", "enabled": false}, "created_at": 1661541349.2625659, "config_call_dict": {"enabled": false}}], "model.stripe_source.stg_stripe__credit_note_line_item_tmp": [{"raw_sql": "{{ config(enabled=var('using_credit_notes', False)) }}\n\nselect * \nfrom {{ var('credit_note_line_item') }}\n{{ livemode_predicate() }}", "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__credit_note_line_item_tmp"], "unique_id": "model.stripe_source.stg_stripe__credit_note_line_item_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__credit_note_line_item_tmp.sql", "original_file_path": "models/tmp/stg_stripe__credit_note_line_item_tmp.sql", "name": "stg_stripe__credit_note_line_item_tmp", "alias": "stg_stripe__credit_note_line_item_tmp", "checksum": {"name": "sha256", "checksum": "834f959295d3c447429080e659cce2c951d77b4a874f7751b4fa00c3d9ed50a2"}, "tags": [], "refs": [], "sources": [["stripe", "credit_note_line_item"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source", "enabled": false}, "created_at": 1661541349.286231, "config_call_dict": {"enabled": false}}], "model.stripe_source.stg_stripe__credit_note_tmp": [{"raw_sql": "{{ config(enabled=var('using_credit_notes', False)) }}\n\nselect * \nfrom {{ var('credit_note') }}\n{{ livemode_predicate() }}", "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stripe_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "prod_analytics", "schema": "stripe_source", "fqn": ["stripe_source", "tmp", "stg_stripe__credit_note_tmp"], "unique_id": "model.stripe_source.stg_stripe__credit_note_tmp", "package_name": "stripe_source", "root_path": "/Users/david/metaplane-dbt/dbt_packages/stripe_source", "path": "tmp/stg_stripe__credit_note_tmp.sql", "original_file_path": "models/tmp/stg_stripe__credit_note_tmp.sql", "name": "stg_stripe__credit_note_tmp", "alias": "stg_stripe__credit_note_tmp", "checksum": {"name": "sha256", "checksum": "6b65dc1a06fe207413f044dba2d9ae92d1eb68993697e9258d22faf22e5f9e7b"}, "tags": [], "refs": [], "sources": [["stripe", "credit_note"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stripe_source", "enabled": false}, "created_at": 1661541349.299211, "config_call_dict": {"enabled": false}}]}, "parent_map": {"model.hubspot_source.stg_hubspot__engagement_task": ["model.hubspot_source.stg_hubspot__engagement_task_tmp", "model.hubspot_source.stg_hubspot__engagement_task_tmp"], "model.hubspot_source.stg_hubspot__engagement_deal": ["model.hubspot_source.stg_hubspot__engagement_deal_tmp", "model.hubspot_source.stg_hubspot__engagement_deal_tmp"], "model.hubspot_source.stg_hubspot__company_property_history": ["model.hubspot_source.stg_hubspot__company_property_history_tmp", "model.hubspot_source.stg_hubspot__company_property_history_tmp"], "model.hubspot_source.stg_hubspot__email_event_delivered": ["model.hubspot_source.stg_hubspot__email_event_delivered_tmp", "model.hubspot_source.stg_hubspot__email_event_delivered_tmp"], "model.hubspot_source.stg_hubspot__owner": ["model.hubspot_source.stg_hubspot__owner_tmp", "model.hubspot_source.stg_hubspot__owner_tmp"], "model.hubspot_source.stg_hubspot__email_event": ["model.hubspot_source.stg_hubspot__email_event_tmp", "model.hubspot_source.stg_hubspot__email_event_tmp"], "model.hubspot_source.stg_hubspot__engagement_meeting": ["model.hubspot_source.stg_hubspot__engagement_meeting_tmp", "model.hubspot_source.stg_hubspot__engagement_meeting_tmp"], "model.hubspot_source.stg_hubspot__engagement_email": ["model.hubspot_source.stg_hubspot__engagement_email_tmp", "model.hubspot_source.stg_hubspot__engagement_email_tmp"], "model.hubspot_source.stg_hubspot__email_event_status_change": ["model.hubspot_source.stg_hubspot__email_event_status_change_tmp", "model.hubspot_source.stg_hubspot__email_event_status_change_tmp"], "model.hubspot_source.stg_hubspot__contact_list_member": ["model.hubspot_source.stg_hubspot__contact_list_member_tmp", "model.hubspot_source.stg_hubspot__contact_list_member_tmp"], "model.hubspot_source.stg_hubspot__contact": ["model.hubspot_source.stg_hubspot__contact_tmp", "model.hubspot_source.stg_hubspot__contact_tmp"], "model.hubspot_source.stg_hubspot__deal": ["model.hubspot_source.stg_hubspot__deal_tmp", "model.hubspot_source.stg_hubspot__deal_tmp"], "model.hubspot_source.stg_hubspot__deal_pipeline": ["model.hubspot_source.stg_hubspot__deal_pipeline_tmp", "model.hubspot_source.stg_hubspot__deal_pipeline_tmp"], "model.hubspot_source.stg_hubspot__deal_company": ["model.hubspot_source.stg_hubspot__deal_company_tmp", "model.hubspot_source.stg_hubspot__deal_company_tmp"], "model.hubspot_source.stg_hubspot__engagement_note": ["model.hubspot_source.stg_hubspot__engagement_note_tmp", "model.hubspot_source.stg_hubspot__engagement_note_tmp"], "model.hubspot_source.stg_hubspot__engagement_contact": ["model.hubspot_source.stg_hubspot__engagement_contact_tmp", "model.hubspot_source.stg_hubspot__engagement_contact_tmp"], "model.hubspot_source.stg_hubspot__contact_list": ["model.hubspot_source.stg_hubspot__contact_list_tmp", "model.hubspot_source.stg_hubspot__contact_list_tmp"], "model.hubspot_source.stg_hubspot__deal_pipeline_stage": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp", "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp"], "model.hubspot_source.stg_hubspot__email_event_dropped": ["model.hubspot_source.stg_hubspot__email_event_dropped_tmp", "model.hubspot_source.stg_hubspot__email_event_dropped_tmp"], "model.hubspot_source.stg_hubspot__deal_stage": ["model.hubspot_source.stg_hubspot__deal_stage_tmp", "model.hubspot_source.stg_hubspot__deal_stage_tmp"], "model.hubspot_source.stg_hubspot__deal_property_history": ["model.hubspot_source.stg_hubspot__deal_property_history_tmp", "model.hubspot_source.stg_hubspot__deal_property_history_tmp"], "model.hubspot_source.stg_hubspot__email_event_bounce": ["model.hubspot_source.stg_hubspot__email_event_bounce_tmp", "model.hubspot_source.stg_hubspot__email_event_bounce_tmp"], "model.hubspot_source.stg_hubspot__engagement_company": ["model.hubspot_source.stg_hubspot__engagement_company_tmp", "model.hubspot_source.stg_hubspot__engagement_company_tmp"], "model.hubspot_source.stg_hubspot__email_event_deferred": ["model.hubspot_source.stg_hubspot__email_event_deferred_tmp", "model.hubspot_source.stg_hubspot__email_event_deferred_tmp"], "model.hubspot_source.stg_hubspot__company": ["model.hubspot_source.stg_hubspot__company_tmp", "model.hubspot_source.stg_hubspot__company_tmp"], "model.hubspot_source.stg_hubspot__deal_contact": ["model.hubspot_source.stg_hubspot__deal_contact_tmp", "model.hubspot_source.stg_hubspot__deal_contact_tmp"], "model.hubspot_source.stg_hubspot__email_event_click": ["model.hubspot_source.stg_hubspot__email_event_click_tmp", "model.hubspot_source.stg_hubspot__email_event_click_tmp"], "model.hubspot_source.stg_hubspot__engagement_call": ["model.hubspot_source.stg_hubspot__engagement_call_tmp", "model.hubspot_source.stg_hubspot__engagement_call_tmp"], "model.hubspot_source.stg_hubspot__engagement": ["model.hubspot_source.stg_hubspot__engagement_tmp", "model.hubspot_source.stg_hubspot__engagement_tmp"], "model.hubspot_source.stg_hubspot__email_campaign": ["model.hubspot_source.stg_hubspot__email_campaign_tmp", "model.hubspot_source.stg_hubspot__email_campaign_tmp"], "model.hubspot_source.stg_hubspot__contact_property_history": ["model.hubspot_source.stg_hubspot__contact_property_history_tmp", "model.hubspot_source.stg_hubspot__contact_property_history_tmp"], "model.hubspot_source.stg_hubspot__email_event_open": ["model.hubspot_source.stg_hubspot__email_event_open_tmp", "model.hubspot_source.stg_hubspot__email_event_open_tmp"], "model.hubspot_source.stg_hubspot__email_event_sent": ["model.hubspot_source.stg_hubspot__email_event_sent_tmp", "model.hubspot_source.stg_hubspot__email_event_sent_tmp"], "model.hubspot_source.stg_hubspot__contact_property_history_tmp": ["source.hubspot_source.hubspot.contact_property_history"], "model.hubspot_source.stg_hubspot__email_event_dropped_tmp": ["source.hubspot_source.hubspot.email_event_dropped"], "model.hubspot_source.stg_hubspot__email_event_sent_tmp": ["source.hubspot_source.hubspot.email_event_sent"], "model.hubspot_source.stg_hubspot__deal_tmp": ["source.hubspot_source.hubspot.deal"], "model.hubspot_source.stg_hubspot__deal_contact_tmp": ["source.hubspot_source.hubspot.deal_contact"], "model.hubspot_source.stg_hubspot__contact_list_member_tmp": ["source.hubspot_source.hubspot.contact_list_member"], "model.hubspot_source.stg_hubspot__owner_tmp": ["source.hubspot_source.hubspot.owner"], "model.hubspot_source.stg_hubspot__deal_stage_tmp": ["source.hubspot_source.hubspot.deal_stage"], "model.hubspot_source.stg_hubspot__deal_pipeline_tmp": ["source.hubspot_source.hubspot.deal_pipeline"], "model.hubspot_source.stg_hubspot__engagement_company_tmp": ["source.hubspot_source.hubspot.engagement_company"], "model.hubspot_source.stg_hubspot__contact_tmp": ["source.hubspot_source.hubspot.contact"], "model.hubspot_source.stg_hubspot__email_event_status_change_tmp": ["source.hubspot_source.hubspot.email_event_status_change"], "model.hubspot_source.stg_hubspot__engagement_note_tmp": ["source.hubspot_source.hubspot.engagement_note"], "model.hubspot_source.stg_hubspot__deal_company_tmp": ["source.hubspot_source.hubspot.deal_company"], "model.hubspot_source.stg_hubspot__engagement_deal_tmp": ["source.hubspot_source.hubspot.engagement_deal"], "model.hubspot_source.stg_hubspot__company_property_history_tmp": ["source.hubspot_source.hubspot.company_property_history"], "model.hubspot_source.stg_hubspot__email_event_tmp": ["source.hubspot_source.hubspot.email_event"], "model.hubspot_source.stg_hubspot__company_tmp": ["source.hubspot_source.hubspot.company"], "model.hubspot_source.stg_hubspot__email_event_click_tmp": ["source.hubspot_source.hubspot.email_event_click"], "model.hubspot_source.stg_hubspot__engagement_contact_tmp": ["source.hubspot_source.hubspot.engagement_contact"], "model.hubspot_source.stg_hubspot__contact_list_tmp": ["source.hubspot_source.hubspot.contact_list"], "model.hubspot_source.stg_hubspot__engagement_meeting_tmp": ["source.hubspot_source.hubspot.engagement_meeting"], "model.hubspot_source.stg_hubspot__engagement_tmp": ["source.hubspot_source.hubspot.engagement"], "model.hubspot_source.stg_hubspot__email_event_delivered_tmp": ["source.hubspot_source.hubspot.email_event_delivered"], "model.hubspot_source.stg_hubspot__engagement_email_tmp": ["source.hubspot_source.hubspot.engagement_email"], "model.hubspot_source.stg_hubspot__email_event_bounce_tmp": ["source.hubspot_source.hubspot.email_event_bounce"], "model.hubspot_source.stg_hubspot__engagement_call_tmp": ["source.hubspot_source.hubspot.engagement_call"], "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp": ["source.hubspot_source.hubspot.deal_pipeline_stage"], "model.hubspot_source.stg_hubspot__engagement_task_tmp": ["source.hubspot_source.hubspot.engagement_task"], "model.hubspot_source.stg_hubspot__email_event_open_tmp": ["source.hubspot_source.hubspot.email_event_open"], "model.hubspot_source.stg_hubspot__deal_property_history_tmp": ["source.hubspot_source.hubspot.deal_property_history"], "model.hubspot_source.stg_hubspot__email_event_deferred_tmp": ["source.hubspot_source.hubspot.email_event_deferred"], "model.hubspot_source.stg_hubspot__email_campaign_tmp": ["source.hubspot_source.hubspot.email_campaign"], "model.linkedin_pages_source.stg_linkedin_pages__share_statistic": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp", "model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp"], "model.linkedin_pages_source.stg_linkedin_pages__organization": ["model.linkedin_pages_source.stg_linkedin_pages__organization_tmp", "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp"], "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post": ["model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp", "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp": ["source.linkedin_pages_source.linkedin_pages.ugc_post_history"], "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp": ["source.linkedin_pages_source.linkedin_pages.organization", "source.linkedin_pages_source.linkedin_pages.organization"], "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp": ["source.linkedin_pages_source.linkedin_pages.organization_ugc_post"], "model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp": ["source.linkedin_pages_source.linkedin_pages.share_statistic"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp": ["source.linkedin_pages_source.linkedin_pages.ugc_post_share_statistic"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp": ["source.linkedin_pages_source.linkedin_pages.ugc_post_share_content_media"], "model.hubspot.hubspot__companies": ["model.hubspot.hubspot__engagements", "model.hubspot_source.stg_hubspot__company", "model.hubspot_source.stg_hubspot__engagement_company"], "model.hubspot.hubspot__deals": ["model.hubspot.hubspot__engagements", "model.hubspot.int_hubspot__deals_enhanced", "model.hubspot_source.stg_hubspot__engagement_deal"], "model.hubspot.hubspot__deal_stages": ["model.hubspot.int_hubspot__deals_enhanced", "model.hubspot_source.stg_hubspot__deal_stage"], "model.hubspot.hubspot__engagements": ["model.hubspot_source.stg_hubspot__engagement", "model.hubspot_source.stg_hubspot__engagement_company", "model.hubspot_source.stg_hubspot__engagement_contact", "model.hubspot_source.stg_hubspot__engagement_deal"], "model.hubspot.hubspot__deal_history": ["model.hubspot_source.stg_hubspot__deal_property_history"], "model.hubspot.hubspot__company_history": ["model.hubspot_source.stg_hubspot__company_property_history"], "model.hubspot.hubspot__engagement_tasks": ["model.hubspot.hubspot__engagements", "model.hubspot_source.stg_hubspot__engagement_task"], "model.hubspot.hubspot__engagement_notes": ["model.hubspot.hubspot__engagements", "model.hubspot_source.stg_hubspot__engagement_note"], "model.hubspot.hubspot__engagement_calls": ["model.hubspot.hubspot__engagements", "model.hubspot_source.stg_hubspot__engagement_call"], "model.hubspot.hubspot__engagement_emails": ["model.hubspot.hubspot__engagements", "model.hubspot_source.stg_hubspot__engagement_email"], "model.hubspot.hubspot__engagement_meetings": ["model.hubspot.hubspot__engagements", "model.hubspot_source.stg_hubspot__engagement_meeting"], "model.hubspot.int_hubspot__deals_enhanced": ["model.hubspot_source.stg_hubspot__deal", "model.hubspot_source.stg_hubspot__deal_pipeline", "model.hubspot_source.stg_hubspot__deal_pipeline_stage", "model.hubspot_source.stg_hubspot__owner"], "model.hubspot.hubspot__email_sends": ["model.hubspot.hubspot__email_event_sent", "model.hubspot.int_hubspot__email_aggregate_status_change", "model.hubspot.int_hubspot__email_event_aggregates"], "model.hubspot.hubspot__contact_lists": ["model.hubspot.int_hubspot__email_metrics__by_contact_list", "model.hubspot_source.stg_hubspot__contact_list"], "model.hubspot.hubspot__contacts": ["model.hubspot.hubspot__email_sends", "model.hubspot.int_hubspot__engagement_metrics__by_contact", "model.hubspot_source.stg_hubspot__contact"], "model.hubspot.hubspot__email_campaigns": ["model.hubspot.hubspot__email_sends", "model.hubspot_source.stg_hubspot__email_campaign"], "model.hubspot.hubspot__email_event_dropped": ["model.hubspot_source.stg_hubspot__contact", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__email_event_dropped"], "model.hubspot.hubspot__email_event_deferred": ["model.hubspot_source.stg_hubspot__contact", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__email_event_deferred"], "model.hubspot.hubspot__email_event_opens": ["model.hubspot_source.stg_hubspot__contact", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__email_event_open"], "model.hubspot.hubspot__email_event_delivered": ["model.hubspot_source.stg_hubspot__contact", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__email_event_delivered"], "model.hubspot.hubspot__email_event_status_change": ["model.hubspot_source.stg_hubspot__contact", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__email_event_status_change"], "model.hubspot.hubspot__email_event_sent": ["model.hubspot_source.stg_hubspot__contact", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__email_event_sent"], "model.hubspot.hubspot__email_event_clicks": ["model.hubspot_source.stg_hubspot__contact", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__email_event_click"], "model.hubspot.hubspot__email_event_bounce": ["model.hubspot_source.stg_hubspot__contact", "model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__email_event_bounce"], "model.hubspot.hubspot__contact_history": ["model.hubspot_source.stg_hubspot__contact_property_history"], "model.hubspot.int_hubspot__engagement_metrics__by_contact": ["model.hubspot.hubspot__engagements", "model.hubspot_source.stg_hubspot__engagement_contact"], "model.hubspot.int_hubspot__email_event_aggregates": ["model.hubspot_source.stg_hubspot__email_event"], "model.hubspot.int_hubspot__email_aggregate_status_change": ["model.hubspot.hubspot__email_event_status_change"], "model.hubspot.int_hubspot__email_metrics__by_contact_list": ["model.hubspot.hubspot__email_sends", "model.hubspot_source.stg_hubspot__contact_list_member"], "model.stripe_source.stg_stripe__invoice_line_item": ["model.stripe_source.stg_stripe__invoice_line_item_tmp", "model.stripe_source.stg_stripe__invoice_line_item_tmp"], "model.stripe_source.stg_stripe__payment_intent": ["model.stripe_source.stg_stripe__payment_intent_tmp", "model.stripe_source.stg_stripe__payment_intent_tmp"], "model.stripe_source.stg_stripe__payment_method": ["model.stripe_source.stg_stripe__payment_method_tmp", "model.stripe_source.stg_stripe__payment_method_tmp"], "model.stripe_source.stg_stripe__refund": ["model.stripe_source.stg_stripe__refund_tmp", "model.stripe_source.stg_stripe__refund_tmp"], "model.stripe_source.stg_stripe__subscription": ["model.stripe_source.stg_stripe__subscription_tmp", "model.stripe_source.stg_stripe__subscription_tmp"], "model.stripe_source.stg_stripe__card": ["model.stripe_source.stg_stripe__card_tmp", "model.stripe_source.stg_stripe__card_tmp"], "model.stripe_source.stg_stripe__invoice": ["model.stripe_source.stg_stripe__invoice_tmp", "model.stripe_source.stg_stripe__invoice_tmp"], "model.stripe_source.stg_stripe__payout": ["model.stripe_source.stg_stripe__payout_tmp", "model.stripe_source.stg_stripe__payout_tmp"], "model.stripe_source.stg_stripe__charge": ["model.stripe_source.stg_stripe__charge_tmp", "model.stripe_source.stg_stripe__charge_tmp"], "model.stripe_source.stg_stripe__balance_transaction": ["model.stripe_source.stg_stripe__balance_transaction_tmp", "model.stripe_source.stg_stripe__balance_transaction_tmp"], "model.stripe_source.stg_stripe__fee": ["model.stripe_source.stg_stripe__fee_tmp", "model.stripe_source.stg_stripe__fee_tmp"], "model.stripe_source.stg_stripe__plan": ["model.stripe_source.stg_stripe__plan_tmp", "model.stripe_source.stg_stripe__plan_tmp"], "model.stripe_source.stg_stripe__payment_method_card": ["model.stripe_source.stg_stripe__payment_method_card_tmp", "model.stripe_source.stg_stripe__payment_method_card_tmp"], "model.stripe_source.stg_stripe__customer": ["model.stripe_source.stg_stripe__customer_tmp", "model.stripe_source.stg_stripe__customer_tmp"], "model.stripe_source.stg_stripe__payment_method_card_tmp": ["source.stripe_source.stripe.payment_method_card"], "model.stripe_source.stg_stripe__payment_method_tmp": ["source.stripe_source.stripe.payment_method"], "model.stripe_source.stg_stripe__refund_tmp": ["source.stripe_source.stripe.refund"], "model.stripe_source.stg_stripe__payout_tmp": ["source.stripe_source.stripe.payout"], "model.stripe_source.stg_stripe__invoice_tmp": ["source.stripe_source.stripe.invoice"], "model.stripe_source.stg_stripe__invoice_line_item_tmp": ["source.stripe_source.stripe.invoice_line_item"], "model.stripe_source.stg_stripe__charge_tmp": ["source.stripe_source.stripe.charge"], "model.stripe_source.stg_stripe__fee_tmp": ["source.stripe_source.stripe.fee"], "model.stripe_source.stg_stripe__payment_intent_tmp": ["source.stripe_source.stripe.payment_intent"], "model.stripe_source.stg_stripe__plan_tmp": ["source.stripe_source.stripe.plan"], "model.stripe_source.stg_stripe__card_tmp": ["source.stripe_source.stripe.card"], "model.stripe_source.stg_stripe__balance_transaction_tmp": ["source.stripe_source.stripe.balance_transaction"], "model.stripe_source.stg_stripe__customer_tmp": ["source.stripe_source.stripe.customer"], "model.stripe_source.stg_stripe__subscription_tmp": ["source.stripe_source.stripe.subscription_history"], "model.dbt_project_evaluator.stg_nodes": [], "model.dbt_project_evaluator.stg_exposure_relationships": [], "model.dbt_project_evaluator.stg_node_relationships": [], "model.dbt_project_evaluator.stg_sources": [], "model.dbt_project_evaluator.stg_exposures": [], "model.dbt_project_evaluator.stg_metric_relationships": [], "model.dbt_project_evaluator.stg_metrics": [], "model.dbt_project_evaluator.stg_naming_convention_folders": [], "model.dbt_project_evaluator.stg_naming_convention_prefixes": [], "model.dbt_project_evaluator.fct_undocumented_models": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_documentation_coverage": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.int_direct_relationships": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_exposure_relationships", "model.dbt_project_evaluator.stg_metric_relationships", "model.dbt_project_evaluator.stg_node_relationships"], "model.dbt_project_evaluator.int_all_dag_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.int_all_graph_resources": ["model.dbt_project_evaluator.stg_exposures", "model.dbt_project_evaluator.stg_metrics", "model.dbt_project_evaluator.stg_naming_convention_folders", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "model.dbt_project_evaluator.stg_nodes", "model.dbt_project_evaluator.stg_sources"], "model.dbt_project_evaluator.fct_multiple_sources_joined": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_root_models": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_fanout": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_unused_sources": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_source_fanout": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_direct_join_to_source": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_staging_dependent_on_staging": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_missing_primary_key_tests": ["model.dbt_project_evaluator.int_model_test_summary", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_test_coverage": ["model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.int_model_test_summary": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.fct_exposure_parents_materializations": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_chained_views_dependencies": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_source_directories": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_test_directories": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_naming_conventions": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_directories": ["model.dbt_project_evaluator.int_all_dag_relationships", "model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_folders", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": [], "model.linkedin_pages.linkedin_pages__posts": ["model.linkedin_pages.int_linkedin_pages__latest_post", "model.linkedin_pages.int_linkedin_pages__latest_post_history", "model.linkedin_pages_source.stg_linkedin_pages__organization", "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post", "model.linkedin_pages_source.stg_linkedin_pages__share_statistic", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media"], "model.linkedin_pages.int_linkedin_pages__latest_post_history": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history"], "model.linkedin_pages.int_linkedin_pages__latest_post": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic"], "model.stripe.stripe__customer_overview": ["model.stripe.int_stripe__incomplete_charges", "model.stripe.stripe__balance_transactions", "model.stripe_source.stg_stripe__customer"], "model.stripe.stripe__balance_transactions": ["model.stripe_source.stg_stripe__balance_transaction", "model.stripe_source.stg_stripe__card", "model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__payment_intent", "model.stripe_source.stg_stripe__payment_method", "model.stripe_source.stg_stripe__payment_method_card", "model.stripe_source.stg_stripe__payout", "model.stripe_source.stg_stripe__refund"], "model.stripe.stripe__invoice_line_items": ["model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__plan", "model.stripe_source.stg_stripe__subscription"], "model.stripe.stripe__subscription_details": ["model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__subscription"], "model.stripe.stripe__subscription_line_items": ["model.stripe.stripe__invoice_line_items"], "model.stripe.stripe__monthly_overview": ["model.stripe.stripe__daily_overview"], "model.stripe.stripe__weekly_overview": ["model.stripe.stripe__daily_overview"], "model.stripe.stripe__quarterly_overview": ["model.stripe.stripe__daily_overview"], "model.stripe.stripe__daily_overview": ["model.stripe.int_stripe__incomplete_charges", "model.stripe.stripe__balance_transactions"], "model.stripe.int_stripe__incomplete_charges": ["model.stripe_source.stg_stripe__charge"], "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"], "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage"], "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403": ["model.hubspot_source.stg_hubspot__deal_pipeline"], "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3": ["model.hubspot_source.stg_hubspot__deal_pipeline"], "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20": ["model.hubspot_source.stg_hubspot__deal"], "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69": ["model.hubspot_source.stg_hubspot__deal"], "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0": ["model.hubspot_source.stg_hubspot__contact_list"], "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a": ["model.hubspot_source.stg_hubspot__contact_list"], "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a": ["model.hubspot_source.stg_hubspot__contact"], "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944": ["model.hubspot_source.stg_hubspot__contact"], "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9": ["model.hubspot_source.stg_hubspot__email_event_bounce"], "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3": ["model.hubspot_source.stg_hubspot__email_event_bounce"], "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1": ["model.hubspot_source.stg_hubspot__email_event_click"], "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5": ["model.hubspot_source.stg_hubspot__email_event_click"], "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912": ["model.hubspot_source.stg_hubspot__email_event_deferred"], "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0": ["model.hubspot_source.stg_hubspot__email_event_deferred"], "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc": ["model.hubspot_source.stg_hubspot__email_event_delivered"], "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20": ["model.hubspot_source.stg_hubspot__email_event_delivered"], "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71": ["model.hubspot_source.stg_hubspot__email_event_dropped"], "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52": ["model.hubspot_source.stg_hubspot__email_event_dropped"], "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3": [], "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1": ["model.hubspot_source.stg_hubspot__email_event_open"], "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16": ["model.hubspot_source.stg_hubspot__email_event_open"], "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3": [], "test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b": [], "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272": ["model.hubspot_source.stg_hubspot__email_event_sent"], "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d": ["model.hubspot_source.stg_hubspot__email_event_sent"], "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a": [], "test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f": [], "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0": ["model.hubspot_source.stg_hubspot__email_event_status_change"], "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1": ["model.hubspot_source.stg_hubspot__email_event_status_change"], "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d": ["model.hubspot_source.stg_hubspot__email_event"], "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531": ["model.hubspot_source.stg_hubspot__email_event"], "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e": ["model.hubspot_source.stg_hubspot__email_campaign"], "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6": ["model.hubspot_source.stg_hubspot__email_campaign"], "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf": ["model.hubspot_source.stg_hubspot__engagement_call"], "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603": ["model.hubspot_source.stg_hubspot__engagement_call"], "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca": ["model.hubspot_source.stg_hubspot__engagement_email"], "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc": ["model.hubspot_source.stg_hubspot__engagement_email"], "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28": ["model.hubspot_source.stg_hubspot__engagement_meeting"], "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830": ["model.hubspot_source.stg_hubspot__engagement_meeting"], "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e": ["model.hubspot_source.stg_hubspot__engagement_note"], "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e": ["model.hubspot_source.stg_hubspot__engagement_note"], "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82": ["model.hubspot_source.stg_hubspot__engagement_task"], "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c": ["model.hubspot_source.stg_hubspot__engagement_task"], "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f": ["model.hubspot_source.stg_hubspot__engagement"], "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0": ["model.hubspot_source.stg_hubspot__engagement"], "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf": [], "test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53": [], "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0": ["model.hubspot_source.stg_hubspot__company"], "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43": ["model.hubspot_source.stg_hubspot__company"], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation.74490569e1": ["model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post"], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation.edd32b54a1": ["model.linkedin_pages_source.stg_linkedin_pages__organization"], "test.linkedin_pages_source.not_null_stg_linkedin_pages__share_statistic_organization_entity_urn.150c878c76": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic"], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation.452f64d50a": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic"], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation.8192e4952b": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history"], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation.f629d7cf4d": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media"], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation.10bd19bf37": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic"], "test.hubspot.not_null_hubspot__deals_deal_id.bdbfe47fcd": ["model.hubspot.hubspot__deals"], "test.hubspot.unique_hubspot__deals_deal_id.d728fe5f71": ["model.hubspot.hubspot__deals"], "test.hubspot.not_null_hubspot__deal_stages_deal_stage_id.162d2d204b": ["model.hubspot.hubspot__deal_stages"], "test.hubspot.unique_hubspot__deal_stages_deal_stage_id.7fd3732373": ["model.hubspot.hubspot__deal_stages"], "test.hubspot.unique_hubspot__companies_company_id.a58ceac3f2": ["model.hubspot.hubspot__companies"], "test.hubspot.not_null_hubspot__companies_company_id.687ec98e97": ["model.hubspot.hubspot__companies"], "test.hubspot.not_null_hubspot__engagements_engagement_id.59b32bc0d7": ["model.hubspot.hubspot__engagements"], "test.hubspot.unique_hubspot__engagements_engagement_id.01d5c3ee5d": ["model.hubspot.hubspot__engagements"], "test.hubspot.unique_hubspot__company_history_id.f1af964b1f": ["model.hubspot.hubspot__company_history"], "test.hubspot.not_null_hubspot__company_history_id.33035793ff": ["model.hubspot.hubspot__company_history"], "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to.654ef778b1": ["model.hubspot.hubspot__company_history"], "test.hubspot.unique_hubspot__deal_history_id.1cb93fca79": ["model.hubspot.hubspot__deal_history"], "test.hubspot.not_null_hubspot__deal_history_id.a1c6cd6a75": ["model.hubspot.hubspot__deal_history"], "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to.f55c724804": ["model.hubspot.hubspot__deal_history"], "test.hubspot.not_null_hubspot__engagement_calls_engagement_id.00f8d8357f": ["model.hubspot.hubspot__engagement_calls"], "test.hubspot.unique_hubspot__engagement_calls_engagement_id.972572ce6c": ["model.hubspot.hubspot__engagement_calls"], "test.hubspot.not_null_hubspot__engagement_emails_engagement_id.13a39d1e09": ["model.hubspot.hubspot__engagement_emails"], "test.hubspot.unique_hubspot__engagement_emails_engagement_id.b18e2acbde": ["model.hubspot.hubspot__engagement_emails"], "test.hubspot.not_null_hubspot__engagement_meetings_engagement_id.83a791c3df": ["model.hubspot.hubspot__engagement_meetings"], "test.hubspot.unique_hubspot__engagement_meetings_engagement_id.3098aabcd1": ["model.hubspot.hubspot__engagement_meetings"], "test.hubspot.not_null_hubspot__engagement_notes_engagement_id.76434ac965": ["model.hubspot.hubspot__engagement_notes"], "test.hubspot.unique_hubspot__engagement_notes_engagement_id.c9864b5001": ["model.hubspot.hubspot__engagement_notes"], "test.hubspot.not_null_hubspot__engagement_tasks_engagement_id.67738794ae": ["model.hubspot.hubspot__engagement_tasks"], "test.hubspot.unique_hubspot__engagement_tasks_engagement_id.754d36b939": ["model.hubspot.hubspot__engagement_tasks"], "test.hubspot.unique_hubspot__email_sends_event_id.b01306228f": ["model.hubspot.hubspot__email_sends"], "test.hubspot.not_null_hubspot__email_sends_event_id.9fc8a8bef3": ["model.hubspot.hubspot__email_sends"], "test.hubspot.unique_hubspot__email_campaigns_email_campaign_id.2470fabe62": ["model.hubspot.hubspot__email_campaigns"], "test.hubspot.not_null_hubspot__email_campaigns_email_campaign_id.6b2d6f43c0": ["model.hubspot.hubspot__email_campaigns"], "test.hubspot.unique_hubspot__contacts_contact_id.8f627121df": ["model.hubspot.hubspot__contacts"], "test.hubspot.not_null_hubspot__contacts_contact_id.e28e88dce3": ["model.hubspot.hubspot__contacts"], "test.hubspot.unique_hubspot__contact_lists_contact_list_id.ea9ef03bac": ["model.hubspot.hubspot__contact_lists"], "test.hubspot.not_null_hubspot__contact_lists_contact_list_id.3bde1bb891": ["model.hubspot.hubspot__contact_lists"], "test.hubspot.unique_hubspot__email_event_bounce_event_id.7a1c6704e1": ["model.hubspot.hubspot__email_event_bounce"], "test.hubspot.not_null_hubspot__email_event_bounce_event_id.39d8daa6f5": ["model.hubspot.hubspot__email_event_bounce"], "test.hubspot.unique_hubspot__email_event_clicks_event_id.60d3912846": ["model.hubspot.hubspot__email_event_clicks"], "test.hubspot.not_null_hubspot__email_event_clicks_event_id.f603501ca0": ["model.hubspot.hubspot__email_event_clicks"], "test.hubspot.unique_hubspot__email_event_deferred_event_id.bb75dcb83a": ["model.hubspot.hubspot__email_event_deferred"], "test.hubspot.not_null_hubspot__email_event_deferred_event_id.2c6decaa91": ["model.hubspot.hubspot__email_event_deferred"], "test.hubspot.unique_hubspot__email_event_delivered_event_id.242e838cce": ["model.hubspot.hubspot__email_event_delivered"], "test.hubspot.not_null_hubspot__email_event_delivered_event_id.0609870be3": ["model.hubspot.hubspot__email_event_delivered"], "test.hubspot.unique_hubspot__email_event_dropped_event_id.093040860b": ["model.hubspot.hubspot__email_event_dropped"], "test.hubspot.not_null_hubspot__email_event_dropped_event_id.5cfe4eeb95": ["model.hubspot.hubspot__email_event_dropped"], "test.hubspot.unique_hubspot__email_event_forward_event_id.064956aaa7": [], "test.hubspot.not_null_hubspot__email_event_forward_event_id.417a73da08": [], "test.hubspot.unique_hubspot__email_event_opens_event_id.d7963f4eb0": ["model.hubspot.hubspot__email_event_opens"], "test.hubspot.not_null_hubspot__email_event_opens_event_id.a9fe279ee1": ["model.hubspot.hubspot__email_event_opens"], "test.hubspot.unique_hubspot__email_event_print_event_id.548f6cece7": [], "test.hubspot.not_null_hubspot__email_event_print_event_id.9dac8a147e": [], "test.hubspot.unique_hubspot__email_event_sent_event_id.68076270f8": ["model.hubspot.hubspot__email_event_sent"], "test.hubspot.not_null_hubspot__email_event_sent_event_id.5507dcc5b9": ["model.hubspot.hubspot__email_event_sent"], "test.hubspot.unique_hubspot__email_event_spam_report_event_id.20aab81ec6": [], "test.hubspot.not_null_hubspot__email_event_spam_report_event_id.5ddca8771a": [], "test.hubspot.unique_hubspot__email_event_status_change_event_id.2e5b2b72e2": ["model.hubspot.hubspot__email_event_status_change"], "test.hubspot.not_null_hubspot__email_event_status_change_event_id.a1737e44b3": ["model.hubspot.hubspot__email_event_status_change"], "test.hubspot.unique_hubspot__contact_history_id.aef69ae1ec": ["model.hubspot.hubspot__contact_history"], "test.hubspot.not_null_hubspot__contact_history_id.eaae22e088": ["model.hubspot.hubspot__contact_history"], "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to.42ccfb8329": ["model.hubspot.hubspot__contact_history"], "test.hubspot.unique_int_hubspot__email_aggregate_status_change_email_send_id.7c03e87c05": ["model.hubspot.int_hubspot__email_aggregate_status_change"], "test.hubspot.not_null_int_hubspot__email_aggregate_status_change_email_send_id.16bf74a3bc": ["model.hubspot.int_hubspot__email_aggregate_status_change"], "test.hubspot.unique_int_hubspot__email_metrics__by_contact_list_contact_list_id.095d72d5b8": ["model.hubspot.int_hubspot__email_metrics__by_contact_list"], "test.hubspot.not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id.1d3cf4caf2": ["model.hubspot.int_hubspot__email_metrics__by_contact_list"], "test.hubspot.unique_int_hubspot__email_event_aggregates_email_send_id.4deec238f9": ["model.hubspot.int_hubspot__email_event_aggregates"], "test.hubspot.not_null_int_hubspot__email_event_aggregates_email_send_id.ac29e6997a": ["model.hubspot.int_hubspot__email_event_aggregates"], "test.hubspot.unique_int_hubspot__engagement_metrics__by_contact_contact_id.1c156b64ed": ["model.hubspot.int_hubspot__engagement_metrics__by_contact"], "test.hubspot.not_null_int_hubspot__engagement_metrics__by_contact_contact_id.4a800df06b": ["model.hubspot.int_hubspot__engagement_metrics__by_contact"], "test.stripe_source.unique_stg_stripe__balance_transaction_balance_transaction_id.2f29c783d0": ["model.stripe_source.stg_stripe__balance_transaction"], "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f": ["model.stripe_source.stg_stripe__balance_transaction"], "test.stripe_source.unique_stg_stripe__card_card_id.000d85b677": ["model.stripe_source.stg_stripe__card"], "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a": ["model.stripe_source.stg_stripe__card"], "test.stripe_source.unique_stg_stripe__charge_charge_id.04b21ec6e0": ["model.stripe_source.stg_stripe__charge"], "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a": ["model.stripe_source.stg_stripe__charge"], "test.stripe_source.unique_stg_stripe__customer_customer_id.a06a928db2": ["model.stripe_source.stg_stripe__customer"], "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0": ["model.stripe_source.stg_stripe__customer"], "test.stripe_source.unique_stg_stripe__payment_intent_payment_intent_id.02430feefd": ["model.stripe_source.stg_stripe__payment_intent"], "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb": ["model.stripe_source.stg_stripe__payment_intent"], "test.stripe_source.unique_stg_stripe__payment_method_payment_method_id.b12d5fcf1b": ["model.stripe_source.stg_stripe__payment_method"], "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471": ["model.stripe_source.stg_stripe__payment_method"], "test.stripe_source.unique_stg_stripe__payout_payout_id.9d9065d2c5": ["model.stripe_source.stg_stripe__payout"], "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc": ["model.stripe_source.stg_stripe__payout"], "test.stripe_source.unique_stg_stripe__refund_refund_id.0b7c337204": ["model.stripe_source.stg_stripe__refund"], "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0": ["model.stripe_source.stg_stripe__refund"], "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_id.e8805346de": ["model.stripe_source.stg_stripe__invoice_line_item"], "test.stripe_source.unique_stg_stripe__invoice_invoice_id.63b5714c58": ["model.stripe_source.stg_stripe__invoice"], "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095": ["model.stripe_source.stg_stripe__invoice"], "test.stripe_source.not_null_stg_stripe__plan_plan_id.f59445523e": ["model.stripe_source.stg_stripe__plan"], "test.stripe_source.unique_stg_stripe__plan_plan_id.b21f08031c": ["model.stripe_source.stg_stripe__plan"], "test.stripe_source.unique_stg_stripe__credit_note_credit_note_id.135c7cd4a0": [], "test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd": [], "test.stripe_source.unique_stg_stripe__credit_note_line_item_credit_note_line_item_id.3972a0829e": [], "test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7": [], "test.dbt_project_evaluator.dbt_utils_accepted_range_fct_documentation_coverage_documentation_coverage_pct___var_documentation_coverage_target_.31ca75dbaa": ["model.dbt_project_evaluator.fct_documentation_coverage"], "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": ["model.dbt_project_evaluator.fct_undocumented_models"], "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": ["model.dbt_project_evaluator.fct_direct_join_to_source"], "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": ["model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"], "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": ["model.dbt_project_evaluator.fct_model_fanout"], "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": ["model.dbt_project_evaluator.fct_multiple_sources_joined"], "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": ["model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"], "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": ["model.dbt_project_evaluator.fct_root_models"], "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": ["model.dbt_project_evaluator.fct_source_fanout"], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": ["model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": ["model.dbt_project_evaluator.fct_staging_dependent_on_staging"], "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": ["model.dbt_project_evaluator.fct_unused_sources"], "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": ["model.dbt_project_evaluator.fct_exposure_parents_materializations"], "test.dbt_project_evaluator.dbt_utils_accepted_range_fct_test_coverage_test_coverage_pct___var_test_coverage_target_.09c9579c9e": ["model.dbt_project_evaluator.fct_test_coverage"], "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": ["model.dbt_project_evaluator.fct_missing_primary_key_tests"], "test.dbt_project_evaluator.dbt_utils_accepted_range_fct_chained_views_dependencies_distance__False___var_chained_views_threshold_.f54ef16663": ["model.dbt_project_evaluator.fct_chained_views_dependencies"], "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": ["model.dbt_project_evaluator.fct_model_directories"], "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": ["model.dbt_project_evaluator.fct_model_naming_conventions"], "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": ["model.dbt_project_evaluator.fct_source_directories"], "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": ["model.dbt_project_evaluator.fct_test_directories"], "test.linkedin_pages.dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation.d7c3d11ad1": ["model.linkedin_pages.linkedin_pages__posts"], "test.stripe.unique_stripe__balance_transactions_balance_transaction_id.313ec591b5": ["model.stripe.stripe__balance_transactions"], "test.stripe.unique_stripe__invoice_line_items_invoice_line_item_id.6d4544857c": ["model.stripe.stripe__invoice_line_items"], "test.stripe.unique_stripe__subscription_line_items_invoice_line_item_id.a4a7f94547": ["model.stripe.stripe__subscription_line_items"], "test.stripe.unique_stripe__subscription_details_subscription_id.8c3bcf1f61": ["model.stripe.stripe__subscription_details"], "source.hubspot_source.hubspot.calendar_event": [], "source.hubspot_source.hubspot.company": [], "source.hubspot_source.hubspot.company_property_history": [], "source.hubspot_source.hubspot.contact_merge_audit": [], "source.hubspot_source.hubspot.contact": [], "source.hubspot_source.hubspot.contact_form_submission": [], "source.hubspot_source.hubspot.contact_list": [], "source.hubspot_source.hubspot.contact_list_member": [], "source.hubspot_source.hubspot.contact_property_history": [], "source.hubspot_source.hubspot.deal": [], "source.hubspot_source.hubspot.deal_stage": [], "source.hubspot_source.hubspot.deal_company": [], "source.hubspot_source.hubspot.deal_contact": [], "source.hubspot_source.hubspot.deal_pipeline": [], "source.hubspot_source.hubspot.deal_pipeline_stage": [], "source.hubspot_source.hubspot.deal_property_history": [], "source.hubspot_source.hubspot.email_campaign": [], "source.hubspot_source.hubspot.email_event": [], "source.hubspot_source.hubspot.email_event_bounce": [], "source.hubspot_source.hubspot.email_event_click": [], "source.hubspot_source.hubspot.email_event_deferred": [], "source.hubspot_source.hubspot.email_event_delivered": [], "source.hubspot_source.hubspot.email_event_dropped": [], "source.hubspot_source.hubspot.email_event_forward": [], "source.hubspot_source.hubspot.email_event_open": [], "source.hubspot_source.hubspot.email_event_print": [], "source.hubspot_source.hubspot.email_event_sent": [], "source.hubspot_source.hubspot.email_event_spam_report": [], "source.hubspot_source.hubspot.email_event_status_change": [], "source.hubspot_source.hubspot.email_subscription": [], "source.hubspot_source.hubspot.email_subscription_change": [], "source.hubspot_source.hubspot.engagement": [], "source.hubspot_source.hubspot.engagement_call": [], "source.hubspot_source.hubspot.engagement_company": [], "source.hubspot_source.hubspot.engagement_contact": [], "source.hubspot_source.hubspot.engagement_deal": [], "source.hubspot_source.hubspot.engagement_email": [], "source.hubspot_source.hubspot.engagement_email_cc": [], "source.hubspot_source.hubspot.engagement_email_to": [], "source.hubspot_source.hubspot.engagement_meeting": [], "source.hubspot_source.hubspot.engagement_note": [], "source.hubspot_source.hubspot.engagement_task": [], "source.hubspot_source.hubspot.form": [], "source.hubspot_source.hubspot.owner": [], "source.hubspot_source.hubspot.ticket_company": [], "source.hubspot_source.hubspot.ticket_contact": [], "source.hubspot_source.hubspot.ticket_deal": [], "source.hubspot_source.hubspot.ticket_engagement": [], "source.hubspot_source.hubspot.ticket_pipeline_stage": [], "source.hubspot_source.hubspot.ticket_pipeline": [], "source.hubspot_source.hubspot.ticket_property_history": [], "source.hubspot_source.hubspot.ticket": [], "source.linkedin_pages_source.linkedin_pages.share_statistic": [], "source.linkedin_pages_source.linkedin_pages.ugc_post_share_statistic": [], "source.linkedin_pages_source.linkedin_pages.ugc_post_history": [], "source.linkedin_pages_source.linkedin_pages.ugc_post_share_content_media": [], "source.linkedin_pages_source.linkedin_pages.organization": [], "source.linkedin_pages_source.linkedin_pages.organization_ugc_post": [], "source.stripe_source.stripe.balance_transaction": [], "source.stripe_source.stripe.card": [], "source.stripe_source.stripe.charge": [], "source.stripe_source.stripe.customer": [], "source.stripe_source.stripe.fee": [], "source.stripe_source.stripe.payment_intent": [], "source.stripe_source.stripe.payment_method_card": [], "source.stripe_source.stripe.payment_method": [], "source.stripe_source.stripe.payout": [], "source.stripe_source.stripe.refund": [], "source.stripe_source.stripe.invoice_line_item": [], "source.stripe_source.stripe.invoice": [], "source.stripe_source.stripe.subscription_history": [], "source.stripe_source.stripe.subscription": [], "source.stripe_source.stripe.plan": [], "source.stripe_source.stripe.credit_note": [], "source.stripe_source.stripe.credit_note_line_item": []}, "child_map": {"model.hubspot_source.stg_hubspot__engagement_task": ["model.hubspot.hubspot__engagement_tasks", "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82", "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c"], "model.hubspot_source.stg_hubspot__engagement_deal": ["model.hubspot.hubspot__deals", "model.hubspot.hubspot__engagements"], "model.hubspot_source.stg_hubspot__company_property_history": ["model.hubspot.hubspot__company_history"], "model.hubspot_source.stg_hubspot__email_event_delivered": ["model.hubspot.hubspot__email_event_delivered", "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20", "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc"], "model.hubspot_source.stg_hubspot__owner": ["model.hubspot.int_hubspot__deals_enhanced"], "model.hubspot_source.stg_hubspot__email_event": ["model.hubspot.hubspot__email_event_bounce", "model.hubspot.hubspot__email_event_clicks", "model.hubspot.hubspot__email_event_deferred", "model.hubspot.hubspot__email_event_delivered", "model.hubspot.hubspot__email_event_dropped", "model.hubspot.hubspot__email_event_opens", "model.hubspot.hubspot__email_event_sent", "model.hubspot.hubspot__email_event_status_change", "model.hubspot.int_hubspot__email_event_aggregates", "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531", "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d"], "model.hubspot_source.stg_hubspot__engagement_meeting": ["model.hubspot.hubspot__engagement_meetings", "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28", "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830"], "model.hubspot_source.stg_hubspot__engagement_email": ["model.hubspot.hubspot__engagement_emails", "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca", "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc"], "model.hubspot_source.stg_hubspot__email_event_status_change": ["model.hubspot.hubspot__email_event_status_change", "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1", "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0"], "model.hubspot_source.stg_hubspot__contact_list_member": ["model.hubspot.int_hubspot__email_metrics__by_contact_list"], "model.hubspot_source.stg_hubspot__contact": ["model.hubspot.hubspot__contacts", "model.hubspot.hubspot__email_event_bounce", "model.hubspot.hubspot__email_event_clicks", "model.hubspot.hubspot__email_event_deferred", "model.hubspot.hubspot__email_event_delivered", "model.hubspot.hubspot__email_event_dropped", "model.hubspot.hubspot__email_event_opens", "model.hubspot.hubspot__email_event_sent", "model.hubspot.hubspot__email_event_status_change", "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944", "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a"], "model.hubspot_source.stg_hubspot__deal": ["model.hubspot.int_hubspot__deals_enhanced", "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20", "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69"], "model.hubspot_source.stg_hubspot__deal_pipeline": ["model.hubspot.int_hubspot__deals_enhanced", "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3", "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403"], "model.hubspot_source.stg_hubspot__deal_company": [], "model.hubspot_source.stg_hubspot__engagement_note": ["model.hubspot.hubspot__engagement_notes", "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e", "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e"], "model.hubspot_source.stg_hubspot__engagement_contact": ["model.hubspot.hubspot__engagements", "model.hubspot.int_hubspot__engagement_metrics__by_contact"], "model.hubspot_source.stg_hubspot__contact_list": ["model.hubspot.hubspot__contact_lists", "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a", "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0"], "model.hubspot_source.stg_hubspot__deal_pipeline_stage": ["model.hubspot.int_hubspot__deals_enhanced", "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e", "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113"], "model.hubspot_source.stg_hubspot__email_event_dropped": ["model.hubspot.hubspot__email_event_dropped", "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52", "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71"], "model.hubspot_source.stg_hubspot__deal_stage": ["model.hubspot.hubspot__deal_stages"], "model.hubspot_source.stg_hubspot__deal_property_history": ["model.hubspot.hubspot__deal_history"], "model.hubspot_source.stg_hubspot__email_event_bounce": ["model.hubspot.hubspot__email_event_bounce", "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3", "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9"], "model.hubspot_source.stg_hubspot__engagement_company": ["model.hubspot.hubspot__companies", "model.hubspot.hubspot__engagements"], "model.hubspot_source.stg_hubspot__email_event_deferred": ["model.hubspot.hubspot__email_event_deferred", "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0", "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912"], "model.hubspot_source.stg_hubspot__company": ["model.hubspot.hubspot__companies", "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43", "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0"], "model.hubspot_source.stg_hubspot__deal_contact": [], "model.hubspot_source.stg_hubspot__email_event_click": ["model.hubspot.hubspot__email_event_clicks", "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5", "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1"], "model.hubspot_source.stg_hubspot__engagement_call": ["model.hubspot.hubspot__engagement_calls", "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf", "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603"], "model.hubspot_source.stg_hubspot__engagement": ["model.hubspot.hubspot__engagements", "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f", "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0"], "model.hubspot_source.stg_hubspot__email_campaign": ["model.hubspot.hubspot__email_campaigns", "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6", "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e"], "model.hubspot_source.stg_hubspot__contact_property_history": ["model.hubspot.hubspot__contact_history"], "model.hubspot_source.stg_hubspot__email_event_open": ["model.hubspot.hubspot__email_event_opens", "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16", "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1"], "model.hubspot_source.stg_hubspot__email_event_sent": ["model.hubspot.hubspot__email_event_sent", "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d", "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272"], "model.hubspot_source.stg_hubspot__contact_property_history_tmp": ["model.hubspot_source.stg_hubspot__contact_property_history", "model.hubspot_source.stg_hubspot__contact_property_history"], "model.hubspot_source.stg_hubspot__email_event_dropped_tmp": ["model.hubspot_source.stg_hubspot__email_event_dropped", "model.hubspot_source.stg_hubspot__email_event_dropped"], "model.hubspot_source.stg_hubspot__email_event_sent_tmp": ["model.hubspot_source.stg_hubspot__email_event_sent", "model.hubspot_source.stg_hubspot__email_event_sent"], "model.hubspot_source.stg_hubspot__deal_tmp": ["model.hubspot_source.stg_hubspot__deal", "model.hubspot_source.stg_hubspot__deal"], "model.hubspot_source.stg_hubspot__deal_contact_tmp": ["model.hubspot_source.stg_hubspot__deal_contact", "model.hubspot_source.stg_hubspot__deal_contact"], "model.hubspot_source.stg_hubspot__contact_list_member_tmp": ["model.hubspot_source.stg_hubspot__contact_list_member", "model.hubspot_source.stg_hubspot__contact_list_member"], "model.hubspot_source.stg_hubspot__owner_tmp": ["model.hubspot_source.stg_hubspot__owner", "model.hubspot_source.stg_hubspot__owner"], "model.hubspot_source.stg_hubspot__deal_stage_tmp": ["model.hubspot_source.stg_hubspot__deal_stage", "model.hubspot_source.stg_hubspot__deal_stage"], "model.hubspot_source.stg_hubspot__deal_pipeline_tmp": ["model.hubspot_source.stg_hubspot__deal_pipeline", "model.hubspot_source.stg_hubspot__deal_pipeline"], "model.hubspot_source.stg_hubspot__engagement_company_tmp": ["model.hubspot_source.stg_hubspot__engagement_company", "model.hubspot_source.stg_hubspot__engagement_company"], "model.hubspot_source.stg_hubspot__contact_tmp": ["model.hubspot_source.stg_hubspot__contact", "model.hubspot_source.stg_hubspot__contact"], "model.hubspot_source.stg_hubspot__email_event_status_change_tmp": ["model.hubspot_source.stg_hubspot__email_event_status_change", "model.hubspot_source.stg_hubspot__email_event_status_change"], "model.hubspot_source.stg_hubspot__engagement_note_tmp": ["model.hubspot_source.stg_hubspot__engagement_note", "model.hubspot_source.stg_hubspot__engagement_note"], "model.hubspot_source.stg_hubspot__deal_company_tmp": ["model.hubspot_source.stg_hubspot__deal_company", "model.hubspot_source.stg_hubspot__deal_company"], "model.hubspot_source.stg_hubspot__engagement_deal_tmp": ["model.hubspot_source.stg_hubspot__engagement_deal", "model.hubspot_source.stg_hubspot__engagement_deal"], "model.hubspot_source.stg_hubspot__company_property_history_tmp": ["model.hubspot_source.stg_hubspot__company_property_history", "model.hubspot_source.stg_hubspot__company_property_history"], "model.hubspot_source.stg_hubspot__email_event_tmp": ["model.hubspot_source.stg_hubspot__email_event", "model.hubspot_source.stg_hubspot__email_event"], "model.hubspot_source.stg_hubspot__company_tmp": ["model.hubspot_source.stg_hubspot__company", "model.hubspot_source.stg_hubspot__company"], "model.hubspot_source.stg_hubspot__email_event_click_tmp": ["model.hubspot_source.stg_hubspot__email_event_click", "model.hubspot_source.stg_hubspot__email_event_click"], "model.hubspot_source.stg_hubspot__engagement_contact_tmp": ["model.hubspot_source.stg_hubspot__engagement_contact", "model.hubspot_source.stg_hubspot__engagement_contact"], "model.hubspot_source.stg_hubspot__contact_list_tmp": ["model.hubspot_source.stg_hubspot__contact_list", "model.hubspot_source.stg_hubspot__contact_list"], "model.hubspot_source.stg_hubspot__engagement_meeting_tmp": ["model.hubspot_source.stg_hubspot__engagement_meeting", "model.hubspot_source.stg_hubspot__engagement_meeting"], "model.hubspot_source.stg_hubspot__engagement_tmp": ["model.hubspot_source.stg_hubspot__engagement", "model.hubspot_source.stg_hubspot__engagement"], "model.hubspot_source.stg_hubspot__email_event_delivered_tmp": ["model.hubspot_source.stg_hubspot__email_event_delivered", "model.hubspot_source.stg_hubspot__email_event_delivered"], "model.hubspot_source.stg_hubspot__engagement_email_tmp": ["model.hubspot_source.stg_hubspot__engagement_email", "model.hubspot_source.stg_hubspot__engagement_email"], "model.hubspot_source.stg_hubspot__email_event_bounce_tmp": ["model.hubspot_source.stg_hubspot__email_event_bounce", "model.hubspot_source.stg_hubspot__email_event_bounce"], "model.hubspot_source.stg_hubspot__engagement_call_tmp": ["model.hubspot_source.stg_hubspot__engagement_call", "model.hubspot_source.stg_hubspot__engagement_call"], "model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage", "model.hubspot_source.stg_hubspot__deal_pipeline_stage"], "model.hubspot_source.stg_hubspot__engagement_task_tmp": ["model.hubspot_source.stg_hubspot__engagement_task", "model.hubspot_source.stg_hubspot__engagement_task"], "model.hubspot_source.stg_hubspot__email_event_open_tmp": ["model.hubspot_source.stg_hubspot__email_event_open", "model.hubspot_source.stg_hubspot__email_event_open"], "model.hubspot_source.stg_hubspot__deal_property_history_tmp": ["model.hubspot_source.stg_hubspot__deal_property_history", "model.hubspot_source.stg_hubspot__deal_property_history"], "model.hubspot_source.stg_hubspot__email_event_deferred_tmp": ["model.hubspot_source.stg_hubspot__email_event_deferred", "model.hubspot_source.stg_hubspot__email_event_deferred"], "model.hubspot_source.stg_hubspot__email_campaign_tmp": ["model.hubspot_source.stg_hubspot__email_campaign", "model.hubspot_source.stg_hubspot__email_campaign"], "model.linkedin_pages_source.stg_linkedin_pages__share_statistic": ["model.linkedin_pages.linkedin_pages__posts", "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation.452f64d50a", "test.linkedin_pages_source.not_null_stg_linkedin_pages__share_statistic_organization_entity_urn.150c878c76"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media": ["model.linkedin_pages.linkedin_pages__posts", "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation.f629d7cf4d"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history": ["model.linkedin_pages.int_linkedin_pages__latest_post_history", "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation.8192e4952b"], "model.linkedin_pages_source.stg_linkedin_pages__organization": ["model.linkedin_pages.linkedin_pages__posts", "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation.edd32b54a1"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic": ["model.linkedin_pages.int_linkedin_pages__latest_post", "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation.10bd19bf37"], "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post": ["model.linkedin_pages.linkedin_pages__posts", "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation.74490569e1"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history"], "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp": ["model.linkedin_pages_source.stg_linkedin_pages__organization", "model.linkedin_pages_source.stg_linkedin_pages__organization"], "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp": ["model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post", "model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post"], "model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic", "model.linkedin_pages_source.stg_linkedin_pages__share_statistic"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic"], "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media", "model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_content_media"], "model.hubspot.hubspot__companies": ["test.hubspot.not_null_hubspot__companies_company_id.687ec98e97", "test.hubspot.unique_hubspot__companies_company_id.a58ceac3f2"], "model.hubspot.hubspot__deals": ["test.hubspot.not_null_hubspot__deals_deal_id.bdbfe47fcd", "test.hubspot.unique_hubspot__deals_deal_id.d728fe5f71"], "model.hubspot.hubspot__deal_stages": ["test.hubspot.not_null_hubspot__deal_stages_deal_stage_id.162d2d204b", "test.hubspot.unique_hubspot__deal_stages_deal_stage_id.7fd3732373"], "model.hubspot.hubspot__engagements": ["model.hubspot.hubspot__companies", "model.hubspot.hubspot__deals", "model.hubspot.hubspot__engagement_calls", "model.hubspot.hubspot__engagement_emails", "model.hubspot.hubspot__engagement_meetings", "model.hubspot.hubspot__engagement_notes", "model.hubspot.hubspot__engagement_tasks", "model.hubspot.int_hubspot__engagement_metrics__by_contact", "test.hubspot.not_null_hubspot__engagements_engagement_id.59b32bc0d7", "test.hubspot.unique_hubspot__engagements_engagement_id.01d5c3ee5d"], "model.hubspot.hubspot__deal_history": ["test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to.f55c724804", "test.hubspot.not_null_hubspot__deal_history_id.a1c6cd6a75", "test.hubspot.unique_hubspot__deal_history_id.1cb93fca79"], "model.hubspot.hubspot__company_history": ["test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to.654ef778b1", "test.hubspot.not_null_hubspot__company_history_id.33035793ff", "test.hubspot.unique_hubspot__company_history_id.f1af964b1f"], "model.hubspot.hubspot__engagement_tasks": ["test.hubspot.not_null_hubspot__engagement_tasks_engagement_id.67738794ae", "test.hubspot.unique_hubspot__engagement_tasks_engagement_id.754d36b939"], "model.hubspot.hubspot__engagement_notes": ["test.hubspot.not_null_hubspot__engagement_notes_engagement_id.76434ac965", "test.hubspot.unique_hubspot__engagement_notes_engagement_id.c9864b5001"], "model.hubspot.hubspot__engagement_calls": ["test.hubspot.not_null_hubspot__engagement_calls_engagement_id.00f8d8357f", "test.hubspot.unique_hubspot__engagement_calls_engagement_id.972572ce6c"], "model.hubspot.hubspot__engagement_emails": ["test.hubspot.not_null_hubspot__engagement_emails_engagement_id.13a39d1e09", "test.hubspot.unique_hubspot__engagement_emails_engagement_id.b18e2acbde"], "model.hubspot.hubspot__engagement_meetings": ["test.hubspot.not_null_hubspot__engagement_meetings_engagement_id.83a791c3df", "test.hubspot.unique_hubspot__engagement_meetings_engagement_id.3098aabcd1"], "model.hubspot.int_hubspot__deals_enhanced": ["model.hubspot.hubspot__deal_stages", "model.hubspot.hubspot__deals"], "model.hubspot.hubspot__email_sends": ["model.hubspot.hubspot__contacts", "model.hubspot.hubspot__email_campaigns", "model.hubspot.int_hubspot__email_metrics__by_contact_list", "test.hubspot.not_null_hubspot__email_sends_event_id.9fc8a8bef3", "test.hubspot.unique_hubspot__email_sends_event_id.b01306228f"], "model.hubspot.hubspot__contact_lists": ["test.hubspot.not_null_hubspot__contact_lists_contact_list_id.3bde1bb891", "test.hubspot.unique_hubspot__contact_lists_contact_list_id.ea9ef03bac"], "model.hubspot.hubspot__contacts": ["test.hubspot.not_null_hubspot__contacts_contact_id.e28e88dce3", "test.hubspot.unique_hubspot__contacts_contact_id.8f627121df"], "model.hubspot.hubspot__email_campaigns": ["test.hubspot.not_null_hubspot__email_campaigns_email_campaign_id.6b2d6f43c0", "test.hubspot.unique_hubspot__email_campaigns_email_campaign_id.2470fabe62"], "model.hubspot.hubspot__email_event_dropped": ["test.hubspot.not_null_hubspot__email_event_dropped_event_id.5cfe4eeb95", "test.hubspot.unique_hubspot__email_event_dropped_event_id.093040860b"], "model.hubspot.hubspot__email_event_deferred": ["test.hubspot.not_null_hubspot__email_event_deferred_event_id.2c6decaa91", "test.hubspot.unique_hubspot__email_event_deferred_event_id.bb75dcb83a"], "model.hubspot.hubspot__email_event_opens": ["test.hubspot.not_null_hubspot__email_event_opens_event_id.a9fe279ee1", "test.hubspot.unique_hubspot__email_event_opens_event_id.d7963f4eb0"], "model.hubspot.hubspot__email_event_delivered": ["test.hubspot.not_null_hubspot__email_event_delivered_event_id.0609870be3", "test.hubspot.unique_hubspot__email_event_delivered_event_id.242e838cce"], "model.hubspot.hubspot__email_event_status_change": ["model.hubspot.int_hubspot__email_aggregate_status_change", "test.hubspot.not_null_hubspot__email_event_status_change_event_id.a1737e44b3", "test.hubspot.unique_hubspot__email_event_status_change_event_id.2e5b2b72e2"], "model.hubspot.hubspot__email_event_sent": ["model.hubspot.hubspot__email_sends", "test.hubspot.not_null_hubspot__email_event_sent_event_id.5507dcc5b9", "test.hubspot.unique_hubspot__email_event_sent_event_id.68076270f8"], "model.hubspot.hubspot__email_event_clicks": ["test.hubspot.not_null_hubspot__email_event_clicks_event_id.f603501ca0", "test.hubspot.unique_hubspot__email_event_clicks_event_id.60d3912846"], "model.hubspot.hubspot__email_event_bounce": ["test.hubspot.not_null_hubspot__email_event_bounce_event_id.39d8daa6f5", "test.hubspot.unique_hubspot__email_event_bounce_event_id.7a1c6704e1"], "model.hubspot.hubspot__contact_history": ["test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to.42ccfb8329", "test.hubspot.not_null_hubspot__contact_history_id.eaae22e088", "test.hubspot.unique_hubspot__contact_history_id.aef69ae1ec"], "model.hubspot.int_hubspot__engagement_metrics__by_contact": ["model.hubspot.hubspot__contacts", "test.hubspot.not_null_int_hubspot__engagement_metrics__by_contact_contact_id.4a800df06b", "test.hubspot.unique_int_hubspot__engagement_metrics__by_contact_contact_id.1c156b64ed"], "model.hubspot.int_hubspot__email_event_aggregates": ["model.hubspot.hubspot__email_sends", "test.hubspot.not_null_int_hubspot__email_event_aggregates_email_send_id.ac29e6997a", "test.hubspot.unique_int_hubspot__email_event_aggregates_email_send_id.4deec238f9"], "model.hubspot.int_hubspot__email_aggregate_status_change": ["model.hubspot.hubspot__email_sends", "test.hubspot.not_null_int_hubspot__email_aggregate_status_change_email_send_id.16bf74a3bc", "test.hubspot.unique_int_hubspot__email_aggregate_status_change_email_send_id.7c03e87c05"], "model.hubspot.int_hubspot__email_metrics__by_contact_list": ["model.hubspot.hubspot__contact_lists", "test.hubspot.not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id.1d3cf4caf2", "test.hubspot.unique_int_hubspot__email_metrics__by_contact_list_contact_list_id.095d72d5b8"], "model.stripe_source.stg_stripe__invoice_line_item": ["model.stripe.stripe__invoice_line_items", "model.stripe.stripe__subscription_details", "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_id.e8805346de"], "model.stripe_source.stg_stripe__payment_intent": ["model.stripe.stripe__balance_transactions", "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb", "test.stripe_source.unique_stg_stripe__payment_intent_payment_intent_id.02430feefd"], "model.stripe_source.stg_stripe__payment_method": ["model.stripe.stripe__balance_transactions", "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471", "test.stripe_source.unique_stg_stripe__payment_method_payment_method_id.b12d5fcf1b"], "model.stripe_source.stg_stripe__refund": ["model.stripe.stripe__balance_transactions", "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0", "test.stripe_source.unique_stg_stripe__refund_refund_id.0b7c337204"], "model.stripe_source.stg_stripe__subscription": ["model.stripe.stripe__invoice_line_items", "model.stripe.stripe__subscription_details"], "model.stripe_source.stg_stripe__card": ["model.stripe.stripe__balance_transactions", "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a", "test.stripe_source.unique_stg_stripe__card_card_id.000d85b677"], "model.stripe_source.stg_stripe__invoice": ["model.stripe.stripe__invoice_line_items", "model.stripe.stripe__subscription_details", "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095", "test.stripe_source.unique_stg_stripe__invoice_invoice_id.63b5714c58"], "model.stripe_source.stg_stripe__payout": ["model.stripe.stripe__balance_transactions", "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc", "test.stripe_source.unique_stg_stripe__payout_payout_id.9d9065d2c5"], "model.stripe_source.stg_stripe__charge": ["model.stripe.int_stripe__incomplete_charges", "model.stripe.stripe__balance_transactions", "model.stripe.stripe__invoice_line_items", "model.stripe.stripe__subscription_details", "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a", "test.stripe_source.unique_stg_stripe__charge_charge_id.04b21ec6e0"], "model.stripe_source.stg_stripe__balance_transaction": ["model.stripe.stripe__balance_transactions", "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f", "test.stripe_source.unique_stg_stripe__balance_transaction_balance_transaction_id.2f29c783d0"], "model.stripe_source.stg_stripe__fee": [], "model.stripe_source.stg_stripe__plan": ["model.stripe.stripe__invoice_line_items", "test.stripe_source.not_null_stg_stripe__plan_plan_id.f59445523e", "test.stripe_source.unique_stg_stripe__plan_plan_id.b21f08031c"], "model.stripe_source.stg_stripe__payment_method_card": ["model.stripe.stripe__balance_transactions"], "model.stripe_source.stg_stripe__customer": ["model.stripe.stripe__balance_transactions", "model.stripe.stripe__customer_overview", "model.stripe.stripe__invoice_line_items", "model.stripe.stripe__subscription_details", "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0", "test.stripe_source.unique_stg_stripe__customer_customer_id.a06a928db2"], "model.stripe_source.stg_stripe__payment_method_card_tmp": ["model.stripe_source.stg_stripe__payment_method_card", "model.stripe_source.stg_stripe__payment_method_card"], "model.stripe_source.stg_stripe__payment_method_tmp": ["model.stripe_source.stg_stripe__payment_method", "model.stripe_source.stg_stripe__payment_method"], "model.stripe_source.stg_stripe__refund_tmp": ["model.stripe_source.stg_stripe__refund", "model.stripe_source.stg_stripe__refund"], "model.stripe_source.stg_stripe__payout_tmp": ["model.stripe_source.stg_stripe__payout", "model.stripe_source.stg_stripe__payout"], "model.stripe_source.stg_stripe__invoice_tmp": ["model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__invoice"], "model.stripe_source.stg_stripe__invoice_line_item_tmp": ["model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__invoice_line_item"], "model.stripe_source.stg_stripe__charge_tmp": ["model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__charge"], "model.stripe_source.stg_stripe__fee_tmp": ["model.stripe_source.stg_stripe__fee", "model.stripe_source.stg_stripe__fee"], "model.stripe_source.stg_stripe__payment_intent_tmp": ["model.stripe_source.stg_stripe__payment_intent", "model.stripe_source.stg_stripe__payment_intent"], "model.stripe_source.stg_stripe__plan_tmp": ["model.stripe_source.stg_stripe__plan", "model.stripe_source.stg_stripe__plan"], "model.stripe_source.stg_stripe__card_tmp": ["model.stripe_source.stg_stripe__card", "model.stripe_source.stg_stripe__card"], "model.stripe_source.stg_stripe__balance_transaction_tmp": ["model.stripe_source.stg_stripe__balance_transaction", "model.stripe_source.stg_stripe__balance_transaction"], "model.stripe_source.stg_stripe__customer_tmp": ["model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__customer"], "model.stripe_source.stg_stripe__subscription_tmp": ["model.stripe_source.stg_stripe__subscription", "model.stripe_source.stg_stripe__subscription"], "model.dbt_project_evaluator.stg_nodes": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_exposure_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_node_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_sources": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_exposures": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_metric_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_metrics": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_naming_convention_folders": ["model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_naming_convention_prefixes": ["model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.fct_undocumented_models": ["test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c"], "model.dbt_project_evaluator.fct_documentation_coverage": ["test.dbt_project_evaluator.dbt_utils_accepted_range_fct_documentation_coverage_documentation_coverage_pct___var_documentation_coverage_target_.31ca75dbaa"], "model.dbt_project_evaluator.int_direct_relationships": ["model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.int_all_dag_relationships", "model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.int_all_dag_relationships": ["model.dbt_project_evaluator.fct_chained_views_dependencies", "model.dbt_project_evaluator.fct_direct_join_to_source", "model.dbt_project_evaluator.fct_exposure_parents_materializations", "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_fanout", "model.dbt_project_evaluator.fct_multiple_sources_joined", "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "model.dbt_project_evaluator.fct_root_models", "model.dbt_project_evaluator.fct_source_fanout", "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "model.dbt_project_evaluator.fct_unused_sources"], "model.dbt_project_evaluator.int_all_graph_resources": ["model.dbt_project_evaluator.fct_documentation_coverage", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.fct_source_directories", "model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.fct_undocumented_models", "model.dbt_project_evaluator.int_direct_relationships", "model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.fct_multiple_sources_joined": ["test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817"], "model.dbt_project_evaluator.fct_root_models": ["test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1"], "model.dbt_project_evaluator.fct_model_fanout": ["test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95"], "model.dbt_project_evaluator.fct_unused_sources": ["test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8"], "model.dbt_project_evaluator.fct_source_fanout": ["test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722"], "model.dbt_project_evaluator.fct_direct_join_to_source": ["test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028"], "model.dbt_project_evaluator.fct_staging_dependent_on_staging": ["test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca"], "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": ["test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f"], "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": ["test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f"], "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": ["test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d"], "model.dbt_project_evaluator.fct_missing_primary_key_tests": ["test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0"], "model.dbt_project_evaluator.fct_test_coverage": ["test.dbt_project_evaluator.dbt_utils_accepted_range_fct_test_coverage_test_coverage_pct___var_test_coverage_target_.09c9579c9e"], "model.dbt_project_evaluator.int_model_test_summary": ["model.dbt_project_evaluator.fct_missing_primary_key_tests", "model.dbt_project_evaluator.fct_test_coverage"], "model.dbt_project_evaluator.fct_exposure_parents_materializations": ["test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422"], "model.dbt_project_evaluator.fct_chained_views_dependencies": ["test.dbt_project_evaluator.dbt_utils_accepted_range_fct_chained_views_dependencies_distance__False___var_chained_views_threshold_.f54ef16663"], "model.dbt_project_evaluator.fct_source_directories": ["test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c"], "model.dbt_project_evaluator.fct_test_directories": ["test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433"], "model.dbt_project_evaluator.fct_model_naming_conventions": ["test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2"], "model.dbt_project_evaluator.fct_model_directories": ["test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db"], "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": ["model.dbt_project_evaluator.fct_chained_views_dependencies", "model.dbt_project_evaluator.fct_direct_join_to_source", "model.dbt_project_evaluator.fct_exposure_parents_materializations", "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "model.dbt_project_evaluator.fct_missing_primary_key_tests", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_fanout", "model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.fct_multiple_sources_joined", "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "model.dbt_project_evaluator.fct_root_models", "model.dbt_project_evaluator.fct_source_directories", "model.dbt_project_evaluator.fct_source_fanout", "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.fct_undocumented_models", "model.dbt_project_evaluator.fct_unused_sources"], "model.linkedin_pages.linkedin_pages__posts": ["test.linkedin_pages.dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation.d7c3d11ad1"], "model.linkedin_pages.int_linkedin_pages__latest_post_history": ["model.linkedin_pages.linkedin_pages__posts"], "model.linkedin_pages.int_linkedin_pages__latest_post": ["model.linkedin_pages.linkedin_pages__posts"], "model.stripe.stripe__customer_overview": [], "model.stripe.stripe__balance_transactions": ["model.stripe.stripe__customer_overview", "model.stripe.stripe__daily_overview", "test.stripe.unique_stripe__balance_transactions_balance_transaction_id.313ec591b5"], "model.stripe.stripe__invoice_line_items": ["model.stripe.stripe__subscription_line_items", "test.stripe.unique_stripe__invoice_line_items_invoice_line_item_id.6d4544857c"], "model.stripe.stripe__subscription_details": ["test.stripe.unique_stripe__subscription_details_subscription_id.8c3bcf1f61"], "model.stripe.stripe__subscription_line_items": ["test.stripe.unique_stripe__subscription_line_items_invoice_line_item_id.a4a7f94547"], "model.stripe.stripe__monthly_overview": [], "model.stripe.stripe__weekly_overview": [], "model.stripe.stripe__quarterly_overview": [], "model.stripe.stripe__daily_overview": ["model.stripe.stripe__monthly_overview", "model.stripe.stripe__quarterly_overview", "model.stripe.stripe__weekly_overview"], "model.stripe.int_stripe__incomplete_charges": ["model.stripe.stripe__customer_overview", "model.stripe.stripe__daily_overview"], "test.hubspot_source.unique_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.ba90fa6113": [], "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_stage_deal_pipeline_stage_id.d53656553e": [], "test.hubspot_source.unique_stg_hubspot__deal_pipeline_deal_pipeline_id.dff6c45403": [], "test.hubspot_source.not_null_stg_hubspot__deal_pipeline_deal_pipeline_id.8a0e3cd7a3": [], "test.hubspot_source.not_null_stg_hubspot__deal_deal_id.ff48693e20": [], "test.hubspot_source.unique_stg_hubspot__deal_deal_id.ac1628ac69": [], "test.hubspot_source.unique_stg_hubspot__contact_list_contact_list_id.036739c1b0": [], "test.hubspot_source.not_null_stg_hubspot__contact_list_contact_list_id.ff8e4cc29a": [], "test.hubspot_source.unique_stg_hubspot__contact_contact_id.b9135eb03a": [], "test.hubspot_source.not_null_stg_hubspot__contact_contact_id.9f112f8944": [], "test.hubspot_source.unique_stg_hubspot__email_event_bounce_event_id.0341ffa8e9": [], "test.hubspot_source.not_null_stg_hubspot__email_event_bounce_event_id.71b13d26d3": [], "test.hubspot_source.unique_stg_hubspot__email_event_click_event_id.da8d8487a1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_click_event_id.8a1be931c5": [], "test.hubspot_source.unique_stg_hubspot__email_event_deferred_event_id.2f779e2912": [], "test.hubspot_source.not_null_stg_hubspot__email_event_deferred_event_id.80293078e0": [], "test.hubspot_source.unique_stg_hubspot__email_event_delivered_event_id.f818bf03fc": [], "test.hubspot_source.not_null_stg_hubspot__email_event_delivered_event_id.87c8eb3f20": [], "test.hubspot_source.unique_stg_hubspot__email_event_dropped_event_id.40706bbf71": [], "test.hubspot_source.not_null_stg_hubspot__email_event_dropped_event_id.c92d449f52": [], "test.hubspot_source.unique_stg_hubspot__email_event_forward_event_id.7f133d2dd1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_forward_event_id.b9a8bf63b3": [], "test.hubspot_source.unique_stg_hubspot__email_event_open_event_id.3a369549b1": [], "test.hubspot_source.not_null_stg_hubspot__email_event_open_event_id.a2e658fe16": [], "test.hubspot_source.unique_stg_hubspot__email_event_print_event_id.40a8ccd3f3": [], "test.hubspot_source.not_null_stg_hubspot__email_event_print_event_id.94d4e09b3b": [], "test.hubspot_source.unique_stg_hubspot__email_event_sent_event_id.122cb22272": [], "test.hubspot_source.not_null_stg_hubspot__email_event_sent_event_id.cf77d9f15d": [], "test.hubspot_source.unique_stg_hubspot__email_event_spam_report_event_id.448320447a": [], "test.hubspot_source.not_null_stg_hubspot__email_event_spam_report_event_id.2a56aced8f": [], "test.hubspot_source.unique_stg_hubspot__email_event_status_change_event_id.13105203e0": [], "test.hubspot_source.not_null_stg_hubspot__email_event_status_change_event_id.c5e80297b1": [], "test.hubspot_source.unique_stg_hubspot__email_event_event_id.734683460d": [], "test.hubspot_source.not_null_stg_hubspot__email_event_event_id.4f287f3531": [], "test.hubspot_source.unique_stg_hubspot__email_campaign_email_campaign_id.9820d33f2e": [], "test.hubspot_source.not_null_stg_hubspot__email_campaign_email_campaign_id.79921899a6": [], "test.hubspot_source.not_null_stg_hubspot__engagement_call_engagement_id.5ceb3917bf": [], "test.hubspot_source.unique_stg_hubspot__engagement_call_engagement_id.43b4413603": [], "test.hubspot_source.not_null_stg_hubspot__engagement_email_engagement_id.175561ecca": [], "test.hubspot_source.unique_stg_hubspot__engagement_email_engagement_id.5eeb06dcfc": [], "test.hubspot_source.not_null_stg_hubspot__engagement_meeting_engagement_id.18dd11dc28": [], "test.hubspot_source.unique_stg_hubspot__engagement_meeting_engagement_id.70721fb830": [], "test.hubspot_source.not_null_stg_hubspot__engagement_note_engagement_id.244059891e": [], "test.hubspot_source.unique_stg_hubspot__engagement_note_engagement_id.e2eaf5256e": [], "test.hubspot_source.not_null_stg_hubspot__engagement_task_engagement_id.0bbd752d82": [], "test.hubspot_source.unique_stg_hubspot__engagement_task_engagement_id.0f578bc80c": [], "test.hubspot_source.not_null_stg_hubspot__engagement_engagement_id.b26f4d328f": [], "test.hubspot_source.unique_stg_hubspot__engagement_engagement_id.4f054187b0": [], "test.hubspot_source.unique_stg_hubspot__ticket_ticket_id.78c6fbfcaf": [], "test.hubspot_source.not_null_stg_hubspot__ticket_ticket_id.299e7c4c53": [], "test.hubspot_source.unique_stg_hubspot__company_company_id.394a2a4ba0": [], "test.hubspot_source.not_null_stg_hubspot__company_company_id.0d0a080d43": [], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_ugc_post_organization_id__ugc_post_id__source_relation.74490569e1": [], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__organization_organization_id__source_relation.edd32b54a1": [], "test.linkedin_pages_source.not_null_stg_linkedin_pages__share_statistic_organization_entity_urn.150c878c76": [], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__share_statistic_share_statistic_id__source_relation.452f64d50a": [], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_history_ugc_post_id__last_modified_timestamp__source_relation.8192e4952b": [], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_content_media_ugc_post_id__last_modified_timestamp__source_relation.f629d7cf4d": [], "test.linkedin_pages_source.dbt_utils_unique_combination_of_columns_stg_linkedin_pages__ugc_post_share_statistic_share_statistic_id__source_relation.10bd19bf37": [], "test.hubspot.not_null_hubspot__deals_deal_id.bdbfe47fcd": [], "test.hubspot.unique_hubspot__deals_deal_id.d728fe5f71": [], "test.hubspot.not_null_hubspot__deal_stages_deal_stage_id.162d2d204b": [], "test.hubspot.unique_hubspot__deal_stages_deal_stage_id.7fd3732373": [], "test.hubspot.unique_hubspot__companies_company_id.a58ceac3f2": [], "test.hubspot.not_null_hubspot__companies_company_id.687ec98e97": [], "test.hubspot.not_null_hubspot__engagements_engagement_id.59b32bc0d7": [], "test.hubspot.unique_hubspot__engagements_engagement_id.01d5c3ee5d": [], "test.hubspot.unique_hubspot__company_history_id.f1af964b1f": [], "test.hubspot.not_null_hubspot__company_history_id.33035793ff": [], "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__company_history_company_id__field_name__valid_to.654ef778b1": [], "test.hubspot.unique_hubspot__deal_history_id.1cb93fca79": [], "test.hubspot.not_null_hubspot__deal_history_id.a1c6cd6a75": [], "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__deal_history_deal_id__field_name__valid_to.f55c724804": [], "test.hubspot.not_null_hubspot__engagement_calls_engagement_id.00f8d8357f": [], "test.hubspot.unique_hubspot__engagement_calls_engagement_id.972572ce6c": [], "test.hubspot.not_null_hubspot__engagement_emails_engagement_id.13a39d1e09": [], "test.hubspot.unique_hubspot__engagement_emails_engagement_id.b18e2acbde": [], "test.hubspot.not_null_hubspot__engagement_meetings_engagement_id.83a791c3df": [], "test.hubspot.unique_hubspot__engagement_meetings_engagement_id.3098aabcd1": [], "test.hubspot.not_null_hubspot__engagement_notes_engagement_id.76434ac965": [], "test.hubspot.unique_hubspot__engagement_notes_engagement_id.c9864b5001": [], "test.hubspot.not_null_hubspot__engagement_tasks_engagement_id.67738794ae": [], "test.hubspot.unique_hubspot__engagement_tasks_engagement_id.754d36b939": [], "test.hubspot.unique_hubspot__email_sends_event_id.b01306228f": [], "test.hubspot.not_null_hubspot__email_sends_event_id.9fc8a8bef3": [], "test.hubspot.unique_hubspot__email_campaigns_email_campaign_id.2470fabe62": [], "test.hubspot.not_null_hubspot__email_campaigns_email_campaign_id.6b2d6f43c0": [], "test.hubspot.unique_hubspot__contacts_contact_id.8f627121df": [], "test.hubspot.not_null_hubspot__contacts_contact_id.e28e88dce3": [], "test.hubspot.unique_hubspot__contact_lists_contact_list_id.ea9ef03bac": [], "test.hubspot.not_null_hubspot__contact_lists_contact_list_id.3bde1bb891": [], "test.hubspot.unique_hubspot__email_event_bounce_event_id.7a1c6704e1": [], "test.hubspot.not_null_hubspot__email_event_bounce_event_id.39d8daa6f5": [], "test.hubspot.unique_hubspot__email_event_clicks_event_id.60d3912846": [], "test.hubspot.not_null_hubspot__email_event_clicks_event_id.f603501ca0": [], "test.hubspot.unique_hubspot__email_event_deferred_event_id.bb75dcb83a": [], "test.hubspot.not_null_hubspot__email_event_deferred_event_id.2c6decaa91": [], "test.hubspot.unique_hubspot__email_event_delivered_event_id.242e838cce": [], "test.hubspot.not_null_hubspot__email_event_delivered_event_id.0609870be3": [], "test.hubspot.unique_hubspot__email_event_dropped_event_id.093040860b": [], "test.hubspot.not_null_hubspot__email_event_dropped_event_id.5cfe4eeb95": [], "test.hubspot.unique_hubspot__email_event_forward_event_id.064956aaa7": [], "test.hubspot.not_null_hubspot__email_event_forward_event_id.417a73da08": [], "test.hubspot.unique_hubspot__email_event_opens_event_id.d7963f4eb0": [], "test.hubspot.not_null_hubspot__email_event_opens_event_id.a9fe279ee1": [], "test.hubspot.unique_hubspot__email_event_print_event_id.548f6cece7": [], "test.hubspot.not_null_hubspot__email_event_print_event_id.9dac8a147e": [], "test.hubspot.unique_hubspot__email_event_sent_event_id.68076270f8": [], "test.hubspot.not_null_hubspot__email_event_sent_event_id.5507dcc5b9": [], "test.hubspot.unique_hubspot__email_event_spam_report_event_id.20aab81ec6": [], "test.hubspot.not_null_hubspot__email_event_spam_report_event_id.5ddca8771a": [], "test.hubspot.unique_hubspot__email_event_status_change_event_id.2e5b2b72e2": [], "test.hubspot.not_null_hubspot__email_event_status_change_event_id.a1737e44b3": [], "test.hubspot.unique_hubspot__contact_history_id.aef69ae1ec": [], "test.hubspot.not_null_hubspot__contact_history_id.eaae22e088": [], "test.hubspot.dbt_utils_unique_combination_of_columns_hubspot__contact_history_contact_id__field_name__valid_to.42ccfb8329": [], "test.hubspot.unique_int_hubspot__email_aggregate_status_change_email_send_id.7c03e87c05": [], "test.hubspot.not_null_int_hubspot__email_aggregate_status_change_email_send_id.16bf74a3bc": [], "test.hubspot.unique_int_hubspot__email_metrics__by_contact_list_contact_list_id.095d72d5b8": [], "test.hubspot.not_null_int_hubspot__email_metrics__by_contact_list_contact_list_id.1d3cf4caf2": [], "test.hubspot.unique_int_hubspot__email_event_aggregates_email_send_id.4deec238f9": [], "test.hubspot.not_null_int_hubspot__email_event_aggregates_email_send_id.ac29e6997a": [], "test.hubspot.unique_int_hubspot__engagement_metrics__by_contact_contact_id.1c156b64ed": [], "test.hubspot.not_null_int_hubspot__engagement_metrics__by_contact_contact_id.4a800df06b": [], "test.stripe_source.unique_stg_stripe__balance_transaction_balance_transaction_id.2f29c783d0": [], "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f": [], "test.stripe_source.unique_stg_stripe__card_card_id.000d85b677": [], "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a": [], "test.stripe_source.unique_stg_stripe__charge_charge_id.04b21ec6e0": [], "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a": [], "test.stripe_source.unique_stg_stripe__customer_customer_id.a06a928db2": [], "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0": [], "test.stripe_source.unique_stg_stripe__payment_intent_payment_intent_id.02430feefd": [], "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb": [], "test.stripe_source.unique_stg_stripe__payment_method_payment_method_id.b12d5fcf1b": [], "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471": [], "test.stripe_source.unique_stg_stripe__payout_payout_id.9d9065d2c5": [], "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc": [], "test.stripe_source.unique_stg_stripe__refund_refund_id.0b7c337204": [], "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0": [], "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_id.e8805346de": [], "test.stripe_source.unique_stg_stripe__invoice_invoice_id.63b5714c58": [], "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095": [], "test.stripe_source.not_null_stg_stripe__plan_plan_id.f59445523e": [], "test.stripe_source.unique_stg_stripe__plan_plan_id.b21f08031c": [], "test.stripe_source.unique_stg_stripe__credit_note_credit_note_id.135c7cd4a0": [], "test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd": [], "test.stripe_source.unique_stg_stripe__credit_note_line_item_credit_note_line_item_id.3972a0829e": [], "test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7": [], "test.dbt_project_evaluator.dbt_utils_accepted_range_fct_documentation_coverage_documentation_coverage_pct___var_documentation_coverage_target_.31ca75dbaa": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": [], "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": [], "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": [], "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": [], "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": [], "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": [], "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": [], "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": [], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": [], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": [], "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": [], "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": [], "test.dbt_project_evaluator.dbt_utils_accepted_range_fct_test_coverage_test_coverage_pct___var_test_coverage_target_.09c9579c9e": [], "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": [], "test.dbt_project_evaluator.dbt_utils_accepted_range_fct_chained_views_dependencies_distance__False___var_chained_views_threshold_.f54ef16663": [], "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": [], "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": [], "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": [], "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": [], "test.linkedin_pages.dbt_utils_unique_combination_of_columns_linkedin_pages__posts_ugc_post_id__source_relation.d7c3d11ad1": [], "test.stripe.unique_stripe__balance_transactions_balance_transaction_id.313ec591b5": [], "test.stripe.unique_stripe__invoice_line_items_invoice_line_item_id.6d4544857c": [], "test.stripe.unique_stripe__subscription_line_items_invoice_line_item_id.a4a7f94547": [], "test.stripe.unique_stripe__subscription_details_subscription_id.8c3bcf1f61": [], "source.hubspot_source.hubspot.calendar_event": [], "source.hubspot_source.hubspot.company": ["model.hubspot_source.stg_hubspot__company_tmp"], "source.hubspot_source.hubspot.company_property_history": ["model.hubspot_source.stg_hubspot__company_property_history_tmp"], "source.hubspot_source.hubspot.contact_merge_audit": [], "source.hubspot_source.hubspot.contact": ["model.hubspot_source.stg_hubspot__contact_tmp"], "source.hubspot_source.hubspot.contact_form_submission": [], "source.hubspot_source.hubspot.contact_list": ["model.hubspot_source.stg_hubspot__contact_list_tmp"], "source.hubspot_source.hubspot.contact_list_member": ["model.hubspot_source.stg_hubspot__contact_list_member_tmp"], "source.hubspot_source.hubspot.contact_property_history": ["model.hubspot_source.stg_hubspot__contact_property_history_tmp"], "source.hubspot_source.hubspot.deal": ["model.hubspot_source.stg_hubspot__deal_tmp"], "source.hubspot_source.hubspot.deal_stage": ["model.hubspot_source.stg_hubspot__deal_stage_tmp"], "source.hubspot_source.hubspot.deal_company": ["model.hubspot_source.stg_hubspot__deal_company_tmp"], "source.hubspot_source.hubspot.deal_contact": ["model.hubspot_source.stg_hubspot__deal_contact_tmp"], "source.hubspot_source.hubspot.deal_pipeline": ["model.hubspot_source.stg_hubspot__deal_pipeline_tmp"], "source.hubspot_source.hubspot.deal_pipeline_stage": ["model.hubspot_source.stg_hubspot__deal_pipeline_stage_tmp"], "source.hubspot_source.hubspot.deal_property_history": ["model.hubspot_source.stg_hubspot__deal_property_history_tmp"], "source.hubspot_source.hubspot.email_campaign": ["model.hubspot_source.stg_hubspot__email_campaign_tmp"], "source.hubspot_source.hubspot.email_event": ["model.hubspot_source.stg_hubspot__email_event_tmp"], "source.hubspot_source.hubspot.email_event_bounce": ["model.hubspot_source.stg_hubspot__email_event_bounce_tmp"], "source.hubspot_source.hubspot.email_event_click": ["model.hubspot_source.stg_hubspot__email_event_click_tmp"], "source.hubspot_source.hubspot.email_event_deferred": ["model.hubspot_source.stg_hubspot__email_event_deferred_tmp"], "source.hubspot_source.hubspot.email_event_delivered": ["model.hubspot_source.stg_hubspot__email_event_delivered_tmp"], "source.hubspot_source.hubspot.email_event_dropped": ["model.hubspot_source.stg_hubspot__email_event_dropped_tmp"], "source.hubspot_source.hubspot.email_event_forward": [], "source.hubspot_source.hubspot.email_event_open": ["model.hubspot_source.stg_hubspot__email_event_open_tmp"], "source.hubspot_source.hubspot.email_event_print": [], "source.hubspot_source.hubspot.email_event_sent": ["model.hubspot_source.stg_hubspot__email_event_sent_tmp"], "source.hubspot_source.hubspot.email_event_spam_report": [], "source.hubspot_source.hubspot.email_event_status_change": ["model.hubspot_source.stg_hubspot__email_event_status_change_tmp"], "source.hubspot_source.hubspot.email_subscription": [], "source.hubspot_source.hubspot.email_subscription_change": [], "source.hubspot_source.hubspot.engagement": ["model.hubspot_source.stg_hubspot__engagement_tmp"], "source.hubspot_source.hubspot.engagement_call": ["model.hubspot_source.stg_hubspot__engagement_call_tmp"], "source.hubspot_source.hubspot.engagement_company": ["model.hubspot_source.stg_hubspot__engagement_company_tmp"], "source.hubspot_source.hubspot.engagement_contact": ["model.hubspot_source.stg_hubspot__engagement_contact_tmp"], "source.hubspot_source.hubspot.engagement_deal": ["model.hubspot_source.stg_hubspot__engagement_deal_tmp"], "source.hubspot_source.hubspot.engagement_email": ["model.hubspot_source.stg_hubspot__engagement_email_tmp"], "source.hubspot_source.hubspot.engagement_email_cc": [], "source.hubspot_source.hubspot.engagement_email_to": [], "source.hubspot_source.hubspot.engagement_meeting": ["model.hubspot_source.stg_hubspot__engagement_meeting_tmp"], "source.hubspot_source.hubspot.engagement_note": ["model.hubspot_source.stg_hubspot__engagement_note_tmp"], "source.hubspot_source.hubspot.engagement_task": ["model.hubspot_source.stg_hubspot__engagement_task_tmp"], "source.hubspot_source.hubspot.form": [], "source.hubspot_source.hubspot.owner": ["model.hubspot_source.stg_hubspot__owner_tmp"], "source.hubspot_source.hubspot.ticket_company": [], "source.hubspot_source.hubspot.ticket_contact": [], "source.hubspot_source.hubspot.ticket_deal": [], "source.hubspot_source.hubspot.ticket_engagement": [], "source.hubspot_source.hubspot.ticket_pipeline_stage": [], "source.hubspot_source.hubspot.ticket_pipeline": [], "source.hubspot_source.hubspot.ticket_property_history": [], "source.hubspot_source.hubspot.ticket": [], "source.linkedin_pages_source.linkedin_pages.share_statistic": ["model.linkedin_pages_source.stg_linkedin_pages__share_statistic_tmp"], "source.linkedin_pages_source.linkedin_pages.ugc_post_share_statistic": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_statistic_tmp"], "source.linkedin_pages_source.linkedin_pages.ugc_post_history": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_history_tmp"], "source.linkedin_pages_source.linkedin_pages.ugc_post_share_content_media": ["model.linkedin_pages_source.stg_linkedin_pages__ugc_post_share_media_tmp"], "source.linkedin_pages_source.linkedin_pages.organization": ["model.linkedin_pages_source.stg_linkedin_pages__organization_tmp", "model.linkedin_pages_source.stg_linkedin_pages__organization_tmp"], "source.linkedin_pages_source.linkedin_pages.organization_ugc_post": ["model.linkedin_pages_source.stg_linkedin_pages__organization_ugc_post_tmp"], "source.stripe_source.stripe.balance_transaction": ["model.stripe_source.stg_stripe__balance_transaction_tmp"], "source.stripe_source.stripe.card": ["model.stripe_source.stg_stripe__card_tmp"], "source.stripe_source.stripe.charge": ["model.stripe_source.stg_stripe__charge_tmp"], "source.stripe_source.stripe.customer": ["model.stripe_source.stg_stripe__customer_tmp"], "source.stripe_source.stripe.fee": ["model.stripe_source.stg_stripe__fee_tmp"], "source.stripe_source.stripe.payment_intent": ["model.stripe_source.stg_stripe__payment_intent_tmp"], "source.stripe_source.stripe.payment_method_card": ["model.stripe_source.stg_stripe__payment_method_card_tmp"], "source.stripe_source.stripe.payment_method": ["model.stripe_source.stg_stripe__payment_method_tmp"], "source.stripe_source.stripe.payout": ["model.stripe_source.stg_stripe__payout_tmp"], "source.stripe_source.stripe.refund": ["model.stripe_source.stg_stripe__refund_tmp"], "source.stripe_source.stripe.invoice_line_item": ["model.stripe_source.stg_stripe__invoice_line_item_tmp"], "source.stripe_source.stripe.invoice": ["model.stripe_source.stg_stripe__invoice_tmp"], "source.stripe_source.stripe.subscription_history": ["model.stripe_source.stg_stripe__subscription_tmp"], "source.stripe_source.stripe.subscription": [], "source.stripe_source.stripe.plan": ["model.stripe_source.stg_stripe__plan_tmp"], "source.stripe_source.stripe.credit_note": [], "source.stripe_source.stripe.credit_note_line_item": []}}